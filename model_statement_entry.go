/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the StatementEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementEntry{}

// StatementEntry struct for StatementEntry
type StatementEntry struct {
	// The unique identifier of the transaction.
	TransactionId TransactionId `json:"transactionId"`
	EntryState StatementEntryState `json:"entryState"`
	// The transaction amount as originally requested. The original amount currency may be different from the currency of the instrument.  In case of purchases, this will indicate the original currency and amount that the merchant requested. 
	OriginalAmount *CurrencyAmount `json:"originalAmount,omitempty"`
	// If the `originalAmount` is in a different currency from the instrument's currency, the forex rate used will be provided.
	ForexRate *ScaledAmount `json:"forexRate,omitempty"`
	// The transaction amount in the instrument's currency.
	TransactionAmount CurrencyAmount `json:"transactionAmount"`
	// The amount of funds credited or debited on the available balance of the instrument.
	AvailableBalanceAdjustment *CurrencyAmount `json:"availableBalanceAdjustment,omitempty"`
	// The amount of funds credited or debited on the actual balance of the instrument.
	ActualBalanceAdjustment *CurrencyAmount `json:"actualBalanceAdjustment,omitempty"`
	// The balance of the instrument after the transaction was executed.
	BalanceAfter *CurrencyAmount `json:"balanceAfter,omitempty"`
	// The available balance of the instrument after the transaction was executed.
	AvailableBalanceAfter *CurrencyAmount `json:"availableBalanceAfter,omitempty"`
	// The actual balance of the instrument after the transaction was executed.
	ActualBalanceAfter *CurrencyAmount `json:"actualBalanceAfter,omitempty"`
	// The fee amount that was captured for you (Multi account owner). You can set fees to be taken during transactions in the Multi Portal.
	TransactionFee *CurrencyAmount `json:"transactionFee,omitempty"`
	// The fee amount that was captured for you (Multi account owner). You can set fees to be taken during transactions in the Multi Portal. This field is deprecated - use `transactionFee` instead.
	CardholderFee *CurrencyAmount `json:"cardholderFee,omitempty"`
	// The timestamp when the transaction was processed by the system, expressed in Epoch timestamp using millisecond precision.
	ProcessedTimestamp interface{} `json:"processedTimestamp"`
	// The source amount of the transaction, if the transaction involves forex.
	SourceAmount *CurrencyAmount `json:"sourceAmount,omitempty"`
	// A Map of additional fields. Possible values include fee information. The possible entries are `merchantName`, `merchantCategoryCode`, `merchantTerminalCountry`, `sourceInstrumentType`, `sourceInstrumentId`, `destinationInstrumentType`, `destinationInstrumentId`, `forexPaddingCurrency`, `forexPaddingAmount`, `note`, `sourceInstrumentFriendlyName`, `destinationInstrumentFriendlyName`, `sourceIdentityType`, `sourceIdentityId`, `sourceIdentityName`, `destinationIdentityType`, `destinationIdentityId`, `destinationIdentityName`, `exchangeRate`, `authorisationState`, `authorisationRelatedId`, `settlementRelatedId`, `chargeFeeType`, `relatedTransactionId`, `relatedTransactionIdType`, `beneficiaryName`, `beneficiaryAccount`, `beneficiaryBankCode`, `merchantId`, `merchantTransactionType`, `systemTransactionType`, `authorisationCode`, `relatedCardId`, `sender`, `forexFeeCurrency`, `forexFeeAmount`, `senderIban`, `senderReference`, `mandateId`, `merchantReference`, `description`, `declineReason` and `spendRuleFailedReason`.
	AdditionalFields map[string]interface{} `json:"additionalFields,omitempty"`
}

// NewStatementEntry instantiates a new StatementEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementEntry(transactionId TransactionId, entryState StatementEntryState, transactionAmount CurrencyAmount, processedTimestamp interface{}) *StatementEntry {
	this := StatementEntry{}
	this.TransactionId = transactionId
	this.EntryState = entryState
	this.TransactionAmount = transactionAmount
	this.ProcessedTimestamp = processedTimestamp
	return &this
}

// NewStatementEntryWithDefaults instantiates a new StatementEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementEntryWithDefaults() *StatementEntry {
	this := StatementEntry{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *StatementEntry) GetTransactionId() TransactionId {
	if o == nil {
		var ret TransactionId
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetTransactionIdOk() (*TransactionId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *StatementEntry) SetTransactionId(v TransactionId) {
	o.TransactionId = v
}

// GetEntryState returns the EntryState field value
func (o *StatementEntry) GetEntryState() StatementEntryState {
	if o == nil {
		var ret StatementEntryState
		return ret
	}

	return o.EntryState
}

// GetEntryStateOk returns a tuple with the EntryState field value
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetEntryStateOk() (*StatementEntryState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryState, true
}

// SetEntryState sets field value
func (o *StatementEntry) SetEntryState(v StatementEntryState) {
	o.EntryState = v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *StatementEntry) GetOriginalAmount() CurrencyAmount {
	if o == nil || IsNil(o.OriginalAmount) {
		var ret CurrencyAmount
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetOriginalAmountOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.OriginalAmount) {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *StatementEntry) HasOriginalAmount() bool {
	if o != nil && !IsNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given CurrencyAmount and assigns it to the OriginalAmount field.
func (o *StatementEntry) SetOriginalAmount(v CurrencyAmount) {
	o.OriginalAmount = &v
}

// GetForexRate returns the ForexRate field value if set, zero value otherwise.
func (o *StatementEntry) GetForexRate() ScaledAmount {
	if o == nil || IsNil(o.ForexRate) {
		var ret ScaledAmount
		return ret
	}
	return *o.ForexRate
}

// GetForexRateOk returns a tuple with the ForexRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetForexRateOk() (*ScaledAmount, bool) {
	if o == nil || IsNil(o.ForexRate) {
		return nil, false
	}
	return o.ForexRate, true
}

// HasForexRate returns a boolean if a field has been set.
func (o *StatementEntry) HasForexRate() bool {
	if o != nil && !IsNil(o.ForexRate) {
		return true
	}

	return false
}

// SetForexRate gets a reference to the given ScaledAmount and assigns it to the ForexRate field.
func (o *StatementEntry) SetForexRate(v ScaledAmount) {
	o.ForexRate = &v
}

// GetTransactionAmount returns the TransactionAmount field value
func (o *StatementEntry) GetTransactionAmount() CurrencyAmount {
	if o == nil {
		var ret CurrencyAmount
		return ret
	}

	return o.TransactionAmount
}

// GetTransactionAmountOk returns a tuple with the TransactionAmount field value
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetTransactionAmountOk() (*CurrencyAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionAmount, true
}

// SetTransactionAmount sets field value
func (o *StatementEntry) SetTransactionAmount(v CurrencyAmount) {
	o.TransactionAmount = v
}

// GetAvailableBalanceAdjustment returns the AvailableBalanceAdjustment field value if set, zero value otherwise.
func (o *StatementEntry) GetAvailableBalanceAdjustment() CurrencyAmount {
	if o == nil || IsNil(o.AvailableBalanceAdjustment) {
		var ret CurrencyAmount
		return ret
	}
	return *o.AvailableBalanceAdjustment
}

// GetAvailableBalanceAdjustmentOk returns a tuple with the AvailableBalanceAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetAvailableBalanceAdjustmentOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.AvailableBalanceAdjustment) {
		return nil, false
	}
	return o.AvailableBalanceAdjustment, true
}

// HasAvailableBalanceAdjustment returns a boolean if a field has been set.
func (o *StatementEntry) HasAvailableBalanceAdjustment() bool {
	if o != nil && !IsNil(o.AvailableBalanceAdjustment) {
		return true
	}

	return false
}

// SetAvailableBalanceAdjustment gets a reference to the given CurrencyAmount and assigns it to the AvailableBalanceAdjustment field.
func (o *StatementEntry) SetAvailableBalanceAdjustment(v CurrencyAmount) {
	o.AvailableBalanceAdjustment = &v
}

// GetActualBalanceAdjustment returns the ActualBalanceAdjustment field value if set, zero value otherwise.
func (o *StatementEntry) GetActualBalanceAdjustment() CurrencyAmount {
	if o == nil || IsNil(o.ActualBalanceAdjustment) {
		var ret CurrencyAmount
		return ret
	}
	return *o.ActualBalanceAdjustment
}

// GetActualBalanceAdjustmentOk returns a tuple with the ActualBalanceAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetActualBalanceAdjustmentOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.ActualBalanceAdjustment) {
		return nil, false
	}
	return o.ActualBalanceAdjustment, true
}

// HasActualBalanceAdjustment returns a boolean if a field has been set.
func (o *StatementEntry) HasActualBalanceAdjustment() bool {
	if o != nil && !IsNil(o.ActualBalanceAdjustment) {
		return true
	}

	return false
}

// SetActualBalanceAdjustment gets a reference to the given CurrencyAmount and assigns it to the ActualBalanceAdjustment field.
func (o *StatementEntry) SetActualBalanceAdjustment(v CurrencyAmount) {
	o.ActualBalanceAdjustment = &v
}

// GetBalanceAfter returns the BalanceAfter field value if set, zero value otherwise.
func (o *StatementEntry) GetBalanceAfter() CurrencyAmount {
	if o == nil || IsNil(o.BalanceAfter) {
		var ret CurrencyAmount
		return ret
	}
	return *o.BalanceAfter
}

// GetBalanceAfterOk returns a tuple with the BalanceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetBalanceAfterOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.BalanceAfter) {
		return nil, false
	}
	return o.BalanceAfter, true
}

// HasBalanceAfter returns a boolean if a field has been set.
func (o *StatementEntry) HasBalanceAfter() bool {
	if o != nil && !IsNil(o.BalanceAfter) {
		return true
	}

	return false
}

// SetBalanceAfter gets a reference to the given CurrencyAmount and assigns it to the BalanceAfter field.
func (o *StatementEntry) SetBalanceAfter(v CurrencyAmount) {
	o.BalanceAfter = &v
}

// GetAvailableBalanceAfter returns the AvailableBalanceAfter field value if set, zero value otherwise.
func (o *StatementEntry) GetAvailableBalanceAfter() CurrencyAmount {
	if o == nil || IsNil(o.AvailableBalanceAfter) {
		var ret CurrencyAmount
		return ret
	}
	return *o.AvailableBalanceAfter
}

// GetAvailableBalanceAfterOk returns a tuple with the AvailableBalanceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetAvailableBalanceAfterOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.AvailableBalanceAfter) {
		return nil, false
	}
	return o.AvailableBalanceAfter, true
}

// HasAvailableBalanceAfter returns a boolean if a field has been set.
func (o *StatementEntry) HasAvailableBalanceAfter() bool {
	if o != nil && !IsNil(o.AvailableBalanceAfter) {
		return true
	}

	return false
}

// SetAvailableBalanceAfter gets a reference to the given CurrencyAmount and assigns it to the AvailableBalanceAfter field.
func (o *StatementEntry) SetAvailableBalanceAfter(v CurrencyAmount) {
	o.AvailableBalanceAfter = &v
}

// GetActualBalanceAfter returns the ActualBalanceAfter field value if set, zero value otherwise.
func (o *StatementEntry) GetActualBalanceAfter() CurrencyAmount {
	if o == nil || IsNil(o.ActualBalanceAfter) {
		var ret CurrencyAmount
		return ret
	}
	return *o.ActualBalanceAfter
}

// GetActualBalanceAfterOk returns a tuple with the ActualBalanceAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetActualBalanceAfterOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.ActualBalanceAfter) {
		return nil, false
	}
	return o.ActualBalanceAfter, true
}

// HasActualBalanceAfter returns a boolean if a field has been set.
func (o *StatementEntry) HasActualBalanceAfter() bool {
	if o != nil && !IsNil(o.ActualBalanceAfter) {
		return true
	}

	return false
}

// SetActualBalanceAfter gets a reference to the given CurrencyAmount and assigns it to the ActualBalanceAfter field.
func (o *StatementEntry) SetActualBalanceAfter(v CurrencyAmount) {
	o.ActualBalanceAfter = &v
}

// GetTransactionFee returns the TransactionFee field value if set, zero value otherwise.
func (o *StatementEntry) GetTransactionFee() CurrencyAmount {
	if o == nil || IsNil(o.TransactionFee) {
		var ret CurrencyAmount
		return ret
	}
	return *o.TransactionFee
}

// GetTransactionFeeOk returns a tuple with the TransactionFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetTransactionFeeOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.TransactionFee) {
		return nil, false
	}
	return o.TransactionFee, true
}

// HasTransactionFee returns a boolean if a field has been set.
func (o *StatementEntry) HasTransactionFee() bool {
	if o != nil && !IsNil(o.TransactionFee) {
		return true
	}

	return false
}

// SetTransactionFee gets a reference to the given CurrencyAmount and assigns it to the TransactionFee field.
func (o *StatementEntry) SetTransactionFee(v CurrencyAmount) {
	o.TransactionFee = &v
}

// GetCardholderFee returns the CardholderFee field value if set, zero value otherwise.
func (o *StatementEntry) GetCardholderFee() CurrencyAmount {
	if o == nil || IsNil(o.CardholderFee) {
		var ret CurrencyAmount
		return ret
	}
	return *o.CardholderFee
}

// GetCardholderFeeOk returns a tuple with the CardholderFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetCardholderFeeOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.CardholderFee) {
		return nil, false
	}
	return o.CardholderFee, true
}

// HasCardholderFee returns a boolean if a field has been set.
func (o *StatementEntry) HasCardholderFee() bool {
	if o != nil && !IsNil(o.CardholderFee) {
		return true
	}

	return false
}

// SetCardholderFee gets a reference to the given CurrencyAmount and assigns it to the CardholderFee field.
func (o *StatementEntry) SetCardholderFee(v CurrencyAmount) {
	o.CardholderFee = &v
}

// GetProcessedTimestamp returns the ProcessedTimestamp field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *StatementEntry) GetProcessedTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProcessedTimestamp
}

// GetProcessedTimestampOk returns a tuple with the ProcessedTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatementEntry) GetProcessedTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProcessedTimestamp) {
		return nil, false
	}
	return &o.ProcessedTimestamp, true
}

// SetProcessedTimestamp sets field value
func (o *StatementEntry) SetProcessedTimestamp(v interface{}) {
	o.ProcessedTimestamp = v
}

// GetSourceAmount returns the SourceAmount field value if set, zero value otherwise.
func (o *StatementEntry) GetSourceAmount() CurrencyAmount {
	if o == nil || IsNil(o.SourceAmount) {
		var ret CurrencyAmount
		return ret
	}
	return *o.SourceAmount
}

// GetSourceAmountOk returns a tuple with the SourceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementEntry) GetSourceAmountOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.SourceAmount) {
		return nil, false
	}
	return o.SourceAmount, true
}

// HasSourceAmount returns a boolean if a field has been set.
func (o *StatementEntry) HasSourceAmount() bool {
	if o != nil && !IsNil(o.SourceAmount) {
		return true
	}

	return false
}

// SetSourceAmount gets a reference to the given CurrencyAmount and assigns it to the SourceAmount field.
func (o *StatementEntry) SetSourceAmount(v CurrencyAmount) {
	o.SourceAmount = &v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatementEntry) GetAdditionalFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatementEntry) GetAdditionalFieldsOk() (*map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalFields) {
		return nil, false
	}
	return &o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *StatementEntry) HasAdditionalFields() bool {
	if o != nil && IsNil(o.AdditionalFields) {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given map[string]interface{} and assigns it to the AdditionalFields field.
func (o *StatementEntry) SetAdditionalFields(v map[string]interface{}) {
	o.AdditionalFields = v
}

func (o StatementEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionId"] = o.TransactionId
	toSerialize["entryState"] = o.EntryState
	if !IsNil(o.OriginalAmount) {
		toSerialize["originalAmount"] = o.OriginalAmount
	}
	if !IsNil(o.ForexRate) {
		toSerialize["forexRate"] = o.ForexRate
	}
	toSerialize["transactionAmount"] = o.TransactionAmount
	if !IsNil(o.AvailableBalanceAdjustment) {
		toSerialize["availableBalanceAdjustment"] = o.AvailableBalanceAdjustment
	}
	if !IsNil(o.ActualBalanceAdjustment) {
		toSerialize["actualBalanceAdjustment"] = o.ActualBalanceAdjustment
	}
	if !IsNil(o.BalanceAfter) {
		toSerialize["balanceAfter"] = o.BalanceAfter
	}
	if !IsNil(o.AvailableBalanceAfter) {
		toSerialize["availableBalanceAfter"] = o.AvailableBalanceAfter
	}
	if !IsNil(o.ActualBalanceAfter) {
		toSerialize["actualBalanceAfter"] = o.ActualBalanceAfter
	}
	if !IsNil(o.TransactionFee) {
		toSerialize["transactionFee"] = o.TransactionFee
	}
	if !IsNil(o.CardholderFee) {
		toSerialize["cardholderFee"] = o.CardholderFee
	}
	if o.ProcessedTimestamp != nil {
		toSerialize["processedTimestamp"] = o.ProcessedTimestamp
	}
	if !IsNil(o.SourceAmount) {
		toSerialize["sourceAmount"] = o.SourceAmount
	}
	if o.AdditionalFields != nil {
		toSerialize["additionalFields"] = o.AdditionalFields
	}
	return toSerialize, nil
}

type NullableStatementEntry struct {
	value *StatementEntry
	isSet bool
}

func (v NullableStatementEntry) Get() *StatementEntry {
	return v.value
}

func (v *NullableStatementEntry) Set(val *StatementEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementEntry(val *StatementEntry) *NullableStatementEntry {
	return &NullableStatementEntry{value: val, isSet: true}
}

func (v NullableStatementEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


