/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the CorporateCompany type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporateCompany{}

// CorporateCompany struct for CorporateCompany
type CorporateCompany struct {
	// The registered name of the company.
	Name interface{} `json:"name"`
	Type CompanyType `json:"type"`
	// The company registration number.
	RegistrationNumber interface{} `json:"registrationNumber,omitempty"`
	RegisteredAddress *LegalAddress `json:"registeredAddress,omitempty"`
	// The address where the business is based.
	BusinessAddress *Address `json:"businessAddress,omitempty"`
	// The country of company registration in ISO 3166 alpha-2.
	CountryOfRegistration interface{} `json:"countryOfRegistration"`
	// The company's date of incorporation
	IncorporatedOn *Date `json:"incorporatedOn,omitempty"`
}

// NewCorporateCompany instantiates a new CorporateCompany object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporateCompany(name interface{}, type_ CompanyType, countryOfRegistration interface{}) *CorporateCompany {
	this := CorporateCompany{}
	this.Name = name
	this.Type = type_
	this.CountryOfRegistration = countryOfRegistration
	return &this
}

// NewCorporateCompanyWithDefaults instantiates a new CorporateCompany object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporateCompanyWithDefaults() *CorporateCompany {
	this := CorporateCompany{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateCompany) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateCompany) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CorporateCompany) SetName(v interface{}) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CorporateCompany) GetType() CompanyType {
	if o == nil {
		var ret CompanyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CorporateCompany) GetTypeOk() (*CompanyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CorporateCompany) SetType(v CompanyType) {
	o.Type = v
}

// GetRegistrationNumber returns the RegistrationNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CorporateCompany) GetRegistrationNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RegistrationNumber
}

// GetRegistrationNumberOk returns a tuple with the RegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateCompany) GetRegistrationNumberOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RegistrationNumber) {
		return nil, false
	}
	return &o.RegistrationNumber, true
}

// HasRegistrationNumber returns a boolean if a field has been set.
func (o *CorporateCompany) HasRegistrationNumber() bool {
	if o != nil && IsNil(o.RegistrationNumber) {
		return true
	}

	return false
}

// SetRegistrationNumber gets a reference to the given interface{} and assigns it to the RegistrationNumber field.
func (o *CorporateCompany) SetRegistrationNumber(v interface{}) {
	o.RegistrationNumber = v
}

// GetRegisteredAddress returns the RegisteredAddress field value if set, zero value otherwise.
func (o *CorporateCompany) GetRegisteredAddress() LegalAddress {
	if o == nil || IsNil(o.RegisteredAddress) {
		var ret LegalAddress
		return ret
	}
	return *o.RegisteredAddress
}

// GetRegisteredAddressOk returns a tuple with the RegisteredAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateCompany) GetRegisteredAddressOk() (*LegalAddress, bool) {
	if o == nil || IsNil(o.RegisteredAddress) {
		return nil, false
	}
	return o.RegisteredAddress, true
}

// HasRegisteredAddress returns a boolean if a field has been set.
func (o *CorporateCompany) HasRegisteredAddress() bool {
	if o != nil && !IsNil(o.RegisteredAddress) {
		return true
	}

	return false
}

// SetRegisteredAddress gets a reference to the given LegalAddress and assigns it to the RegisteredAddress field.
func (o *CorporateCompany) SetRegisteredAddress(v LegalAddress) {
	o.RegisteredAddress = &v
}

// GetBusinessAddress returns the BusinessAddress field value if set, zero value otherwise.
func (o *CorporateCompany) GetBusinessAddress() Address {
	if o == nil || IsNil(o.BusinessAddress) {
		var ret Address
		return ret
	}
	return *o.BusinessAddress
}

// GetBusinessAddressOk returns a tuple with the BusinessAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateCompany) GetBusinessAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.BusinessAddress) {
		return nil, false
	}
	return o.BusinessAddress, true
}

// HasBusinessAddress returns a boolean if a field has been set.
func (o *CorporateCompany) HasBusinessAddress() bool {
	if o != nil && !IsNil(o.BusinessAddress) {
		return true
	}

	return false
}

// SetBusinessAddress gets a reference to the given Address and assigns it to the BusinessAddress field.
func (o *CorporateCompany) SetBusinessAddress(v Address) {
	o.BusinessAddress = &v
}

// GetCountryOfRegistration returns the CountryOfRegistration field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateCompany) GetCountryOfRegistration() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CountryOfRegistration
}

// GetCountryOfRegistrationOk returns a tuple with the CountryOfRegistration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateCompany) GetCountryOfRegistrationOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CountryOfRegistration) {
		return nil, false
	}
	return &o.CountryOfRegistration, true
}

// SetCountryOfRegistration sets field value
func (o *CorporateCompany) SetCountryOfRegistration(v interface{}) {
	o.CountryOfRegistration = v
}

// GetIncorporatedOn returns the IncorporatedOn field value if set, zero value otherwise.
func (o *CorporateCompany) GetIncorporatedOn() Date {
	if o == nil || IsNil(o.IncorporatedOn) {
		var ret Date
		return ret
	}
	return *o.IncorporatedOn
}

// GetIncorporatedOnOk returns a tuple with the IncorporatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateCompany) GetIncorporatedOnOk() (*Date, bool) {
	if o == nil || IsNil(o.IncorporatedOn) {
		return nil, false
	}
	return o.IncorporatedOn, true
}

// HasIncorporatedOn returns a boolean if a field has been set.
func (o *CorporateCompany) HasIncorporatedOn() bool {
	if o != nil && !IsNil(o.IncorporatedOn) {
		return true
	}

	return false
}

// SetIncorporatedOn gets a reference to the given Date and assigns it to the IncorporatedOn field.
func (o *CorporateCompany) SetIncorporatedOn(v Date) {
	o.IncorporatedOn = &v
}

func (o CorporateCompany) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporateCompany) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	toSerialize["type"] = o.Type
	if o.RegistrationNumber != nil {
		toSerialize["registrationNumber"] = o.RegistrationNumber
	}
	if !IsNil(o.RegisteredAddress) {
		toSerialize["registeredAddress"] = o.RegisteredAddress
	}
	if !IsNil(o.BusinessAddress) {
		toSerialize["businessAddress"] = o.BusinessAddress
	}
	if o.CountryOfRegistration != nil {
		toSerialize["countryOfRegistration"] = o.CountryOfRegistration
	}
	if !IsNil(o.IncorporatedOn) {
		toSerialize["incorporatedOn"] = o.IncorporatedOn
	}
	return toSerialize, nil
}

type NullableCorporateCompany struct {
	value *CorporateCompany
	isSet bool
}

func (v NullableCorporateCompany) Get() *CorporateCompany {
	return v.value
}

func (v *NullableCorporateCompany) Set(val *CorporateCompany) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporateCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporateCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporateCompany(val *CorporateCompany) *NullableCorporateCompany {
	return &NullableCorporateCompany{value: val, isSet: true}
}

func (v NullableCorporateCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporateCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


