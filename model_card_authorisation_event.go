/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the CardAuthorisationEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardAuthorisationEvent{}

// CardAuthorisationEvent struct for CardAuthorisationEvent
type CardAuthorisationEvent struct {
	// The unique identifier of the card on which an authorisation is being performed
	CardId interface{} `json:"cardId"`
	// The id of this transaction, for reference.
	TransactionId interface{} `json:"transactionId"`
	// The type of authorisation (Debit or Credit)
	AuthorisationType CardAuthorisationDetailsAuthorisationType `json:"authorisationType"`
	// The amount in the currency of the merchant.
	SourceAmount CurrencyAmount `json:"sourceAmount"`
	// The amount in the currency of the card.
	TransactionAmount CurrencyAmount `json:"transactionAmount"`
	// The total amount to be deducted in the currency of the card. This is the summation of the transaction amount, forex padding and forex fees.
	TotalTransactionCost CurrencyAmount `json:"totalTransactionCost"`
	// The timestamp of the transaction, using epoch timestamp with millisecond precision.
	TransactionTimestamp interface{} `json:"transactionTimestamp"`
	// Merchant related information
	MerchantData MerchantData `json:"merchantData"`
	// The owner of the card
	Owner IdentityId `json:"owner"`
	// Optional detail indicating if the card holder was present when the authorisation occurred.
	CardholderPresent *CardHolderPresent `json:"cardholderPresent,omitempty"`
	// Optional detail indicating if the card was present when the authorisation occurred.
	CardPresent interface{} `json:"cardPresent,omitempty"`
	// The authorisation code associated with this authorisation.
	AuthCode interface{} `json:"authCode,omitempty"`
	// The forex padding amount, if any, that has been included in the transactionAmount.  Forex padding is extra amount blocked to cater for currency fluctuation.
	ForexPadding *CurrencyAmount `json:"forexPadding,omitempty"`
	// The forex fee, if set, that is included in the transactionAmount.
	ForexFee *CurrencyAmount `json:"forexFee,omitempty"`
	// The card can be created in prepaid mode or debit mode.  - A prepaid mode card has its own balance and can have funds transferred to or from it. - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit. 
	Mode interface{} `json:"mode,omitempty"`
}

// NewCardAuthorisationEvent instantiates a new CardAuthorisationEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardAuthorisationEvent(cardId interface{}, transactionId interface{}, authorisationType CardAuthorisationDetailsAuthorisationType, sourceAmount CurrencyAmount, transactionAmount CurrencyAmount, totalTransactionCost CurrencyAmount, transactionTimestamp interface{}, merchantData MerchantData, owner IdentityId) *CardAuthorisationEvent {
	this := CardAuthorisationEvent{}
	this.CardId = cardId
	this.TransactionId = transactionId
	this.AuthorisationType = authorisationType
	this.SourceAmount = sourceAmount
	this.TransactionAmount = transactionAmount
	this.TotalTransactionCost = totalTransactionCost
	this.TransactionTimestamp = transactionTimestamp
	this.MerchantData = merchantData
	this.Owner = owner
	return &this
}

// NewCardAuthorisationEventWithDefaults instantiates a new CardAuthorisationEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardAuthorisationEventWithDefaults() *CardAuthorisationEvent {
	this := CardAuthorisationEvent{}
	return &this
}

// GetCardId returns the CardId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CardAuthorisationEvent) GetCardId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardAuthorisationEvent) GetCardIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardId) {
		return nil, false
	}
	return &o.CardId, true
}

// SetCardId sets field value
func (o *CardAuthorisationEvent) SetCardId(v interface{}) {
	o.CardId = v
}

// GetTransactionId returns the TransactionId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CardAuthorisationEvent) GetTransactionId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardAuthorisationEvent) GetTransactionIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *CardAuthorisationEvent) SetTransactionId(v interface{}) {
	o.TransactionId = v
}

// GetAuthorisationType returns the AuthorisationType field value
func (o *CardAuthorisationEvent) GetAuthorisationType() CardAuthorisationDetailsAuthorisationType {
	if o == nil {
		var ret CardAuthorisationDetailsAuthorisationType
		return ret
	}

	return o.AuthorisationType
}

// GetAuthorisationTypeOk returns a tuple with the AuthorisationType field value
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetAuthorisationTypeOk() (*CardAuthorisationDetailsAuthorisationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorisationType, true
}

// SetAuthorisationType sets field value
func (o *CardAuthorisationEvent) SetAuthorisationType(v CardAuthorisationDetailsAuthorisationType) {
	o.AuthorisationType = v
}

// GetSourceAmount returns the SourceAmount field value
func (o *CardAuthorisationEvent) GetSourceAmount() CurrencyAmount {
	if o == nil {
		var ret CurrencyAmount
		return ret
	}

	return o.SourceAmount
}

// GetSourceAmountOk returns a tuple with the SourceAmount field value
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetSourceAmountOk() (*CurrencyAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAmount, true
}

// SetSourceAmount sets field value
func (o *CardAuthorisationEvent) SetSourceAmount(v CurrencyAmount) {
	o.SourceAmount = v
}

// GetTransactionAmount returns the TransactionAmount field value
func (o *CardAuthorisationEvent) GetTransactionAmount() CurrencyAmount {
	if o == nil {
		var ret CurrencyAmount
		return ret
	}

	return o.TransactionAmount
}

// GetTransactionAmountOk returns a tuple with the TransactionAmount field value
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetTransactionAmountOk() (*CurrencyAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionAmount, true
}

// SetTransactionAmount sets field value
func (o *CardAuthorisationEvent) SetTransactionAmount(v CurrencyAmount) {
	o.TransactionAmount = v
}

// GetTotalTransactionCost returns the TotalTransactionCost field value
func (o *CardAuthorisationEvent) GetTotalTransactionCost() CurrencyAmount {
	if o == nil {
		var ret CurrencyAmount
		return ret
	}

	return o.TotalTransactionCost
}

// GetTotalTransactionCostOk returns a tuple with the TotalTransactionCost field value
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetTotalTransactionCostOk() (*CurrencyAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTransactionCost, true
}

// SetTotalTransactionCost sets field value
func (o *CardAuthorisationEvent) SetTotalTransactionCost(v CurrencyAmount) {
	o.TotalTransactionCost = v
}

// GetTransactionTimestamp returns the TransactionTimestamp field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CardAuthorisationEvent) GetTransactionTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.TransactionTimestamp
}

// GetTransactionTimestampOk returns a tuple with the TransactionTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardAuthorisationEvent) GetTransactionTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TransactionTimestamp) {
		return nil, false
	}
	return &o.TransactionTimestamp, true
}

// SetTransactionTimestamp sets field value
func (o *CardAuthorisationEvent) SetTransactionTimestamp(v interface{}) {
	o.TransactionTimestamp = v
}

// GetMerchantData returns the MerchantData field value
func (o *CardAuthorisationEvent) GetMerchantData() MerchantData {
	if o == nil {
		var ret MerchantData
		return ret
	}

	return o.MerchantData
}

// GetMerchantDataOk returns a tuple with the MerchantData field value
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetMerchantDataOk() (*MerchantData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantData, true
}

// SetMerchantData sets field value
func (o *CardAuthorisationEvent) SetMerchantData(v MerchantData) {
	o.MerchantData = v
}

// GetOwner returns the Owner field value
func (o *CardAuthorisationEvent) GetOwner() IdentityId {
	if o == nil {
		var ret IdentityId
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetOwnerOk() (*IdentityId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *CardAuthorisationEvent) SetOwner(v IdentityId) {
	o.Owner = v
}

// GetCardholderPresent returns the CardholderPresent field value if set, zero value otherwise.
func (o *CardAuthorisationEvent) GetCardholderPresent() CardHolderPresent {
	if o == nil || IsNil(o.CardholderPresent) {
		var ret CardHolderPresent
		return ret
	}
	return *o.CardholderPresent
}

// GetCardholderPresentOk returns a tuple with the CardholderPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetCardholderPresentOk() (*CardHolderPresent, bool) {
	if o == nil || IsNil(o.CardholderPresent) {
		return nil, false
	}
	return o.CardholderPresent, true
}

// HasCardholderPresent returns a boolean if a field has been set.
func (o *CardAuthorisationEvent) HasCardholderPresent() bool {
	if o != nil && !IsNil(o.CardholderPresent) {
		return true
	}

	return false
}

// SetCardholderPresent gets a reference to the given CardHolderPresent and assigns it to the CardholderPresent field.
func (o *CardAuthorisationEvent) SetCardholderPresent(v CardHolderPresent) {
	o.CardholderPresent = &v
}

// GetCardPresent returns the CardPresent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CardAuthorisationEvent) GetCardPresent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CardPresent
}

// GetCardPresentOk returns a tuple with the CardPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardAuthorisationEvent) GetCardPresentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardPresent) {
		return nil, false
	}
	return &o.CardPresent, true
}

// HasCardPresent returns a boolean if a field has been set.
func (o *CardAuthorisationEvent) HasCardPresent() bool {
	if o != nil && IsNil(o.CardPresent) {
		return true
	}

	return false
}

// SetCardPresent gets a reference to the given interface{} and assigns it to the CardPresent field.
func (o *CardAuthorisationEvent) SetCardPresent(v interface{}) {
	o.CardPresent = v
}

// GetAuthCode returns the AuthCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CardAuthorisationEvent) GetAuthCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AuthCode
}

// GetAuthCodeOk returns a tuple with the AuthCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardAuthorisationEvent) GetAuthCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AuthCode) {
		return nil, false
	}
	return &o.AuthCode, true
}

// HasAuthCode returns a boolean if a field has been set.
func (o *CardAuthorisationEvent) HasAuthCode() bool {
	if o != nil && IsNil(o.AuthCode) {
		return true
	}

	return false
}

// SetAuthCode gets a reference to the given interface{} and assigns it to the AuthCode field.
func (o *CardAuthorisationEvent) SetAuthCode(v interface{}) {
	o.AuthCode = v
}

// GetForexPadding returns the ForexPadding field value if set, zero value otherwise.
func (o *CardAuthorisationEvent) GetForexPadding() CurrencyAmount {
	if o == nil || IsNil(o.ForexPadding) {
		var ret CurrencyAmount
		return ret
	}
	return *o.ForexPadding
}

// GetForexPaddingOk returns a tuple with the ForexPadding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetForexPaddingOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.ForexPadding) {
		return nil, false
	}
	return o.ForexPadding, true
}

// HasForexPadding returns a boolean if a field has been set.
func (o *CardAuthorisationEvent) HasForexPadding() bool {
	if o != nil && !IsNil(o.ForexPadding) {
		return true
	}

	return false
}

// SetForexPadding gets a reference to the given CurrencyAmount and assigns it to the ForexPadding field.
func (o *CardAuthorisationEvent) SetForexPadding(v CurrencyAmount) {
	o.ForexPadding = &v
}

// GetForexFee returns the ForexFee field value if set, zero value otherwise.
func (o *CardAuthorisationEvent) GetForexFee() CurrencyAmount {
	if o == nil || IsNil(o.ForexFee) {
		var ret CurrencyAmount
		return ret
	}
	return *o.ForexFee
}

// GetForexFeeOk returns a tuple with the ForexFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardAuthorisationEvent) GetForexFeeOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.ForexFee) {
		return nil, false
	}
	return o.ForexFee, true
}

// HasForexFee returns a boolean if a field has been set.
func (o *CardAuthorisationEvent) HasForexFee() bool {
	if o != nil && !IsNil(o.ForexFee) {
		return true
	}

	return false
}

// SetForexFee gets a reference to the given CurrencyAmount and assigns it to the ForexFee field.
func (o *CardAuthorisationEvent) SetForexFee(v CurrencyAmount) {
	o.ForexFee = &v
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CardAuthorisationEvent) GetMode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardAuthorisationEvent) GetModeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return &o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CardAuthorisationEvent) HasMode() bool {
	if o != nil && IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given interface{} and assigns it to the Mode field.
func (o *CardAuthorisationEvent) SetMode(v interface{}) {
	o.Mode = v
}

func (o CardAuthorisationEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardAuthorisationEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CardId != nil {
		toSerialize["cardId"] = o.CardId
	}
	if o.TransactionId != nil {
		toSerialize["transactionId"] = o.TransactionId
	}
	toSerialize["authorisationType"] = o.AuthorisationType
	toSerialize["sourceAmount"] = o.SourceAmount
	toSerialize["transactionAmount"] = o.TransactionAmount
	toSerialize["totalTransactionCost"] = o.TotalTransactionCost
	if o.TransactionTimestamp != nil {
		toSerialize["transactionTimestamp"] = o.TransactionTimestamp
	}
	toSerialize["merchantData"] = o.MerchantData
	toSerialize["owner"] = o.Owner
	if !IsNil(o.CardholderPresent) {
		toSerialize["cardholderPresent"] = o.CardholderPresent
	}
	if o.CardPresent != nil {
		toSerialize["cardPresent"] = o.CardPresent
	}
	if o.AuthCode != nil {
		toSerialize["authCode"] = o.AuthCode
	}
	if !IsNil(o.ForexPadding) {
		toSerialize["forexPadding"] = o.ForexPadding
	}
	if !IsNil(o.ForexFee) {
		toSerialize["forexFee"] = o.ForexFee
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

type NullableCardAuthorisationEvent struct {
	value *CardAuthorisationEvent
	isSet bool
}

func (v NullableCardAuthorisationEvent) Get() *CardAuthorisationEvent {
	return v.value
}

func (v *NullableCardAuthorisationEvent) Set(val *CardAuthorisationEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableCardAuthorisationEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableCardAuthorisationEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardAuthorisationEvent(val *CardAuthorisationEvent) *NullableCardAuthorisationEvent {
	return &NullableCardAuthorisationEvent{value: val, isSet: true}
}

func (v NullableCardAuthorisationEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardAuthorisationEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


