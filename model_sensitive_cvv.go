/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SensitiveCvv type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensitiveCvv{}

// SensitiveCvv The CVV of the card.  Unless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's CVV will be tokenised.  To show the card's CVV to your user, you need to embed the CVV UI Component in your application. This accepts the tokenised CVV and shows the plain text CVV number to the user on screen. 
type SensitiveCvv struct {
	Value interface{} `json:"value,omitempty"`
}

// NewSensitiveCvv instantiates a new SensitiveCvv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensitiveCvv() *SensitiveCvv {
	this := SensitiveCvv{}
	return &this
}

// NewSensitiveCvvWithDefaults instantiates a new SensitiveCvv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensitiveCvvWithDefaults() *SensitiveCvv {
	this := SensitiveCvv{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SensitiveCvv) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SensitiveCvv) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SensitiveCvv) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *SensitiveCvv) SetValue(v interface{}) {
	o.Value = v
}

func (o SensitiveCvv) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensitiveCvv) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSensitiveCvv struct {
	value *SensitiveCvv
	isSet bool
}

func (v NullableSensitiveCvv) Get() *SensitiveCvv {
	return v.value
}

func (v *NullableSensitiveCvv) Set(val *SensitiveCvv) {
	v.value = val
	v.isSet = true
}

func (v NullableSensitiveCvv) IsSet() bool {
	return v.isSet
}

func (v *NullableSensitiveCvv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensitiveCvv(val *SensitiveCvv) *NullableSensitiveCvv {
	return &NullableSensitiveCvv{value: val, isSet: true}
}

func (v NullableSensitiveCvv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensitiveCvv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


