/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ManagedAccountUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedAccountUpdateRequest{}

// ManagedAccountUpdateRequest struct for ManagedAccountUpdateRequest
type ManagedAccountUpdateRequest struct {
	// The tag field is a custom field that can be used to search and filter.
	Tag interface{} `json:"tag,omitempty"`
	// Updates the friendly name of the managed account. Leave blank if no change is needed.
	FriendlyName interface{} `json:"friendlyName,omitempty"`
}

// NewManagedAccountUpdateRequest instantiates a new ManagedAccountUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedAccountUpdateRequest() *ManagedAccountUpdateRequest {
	this := ManagedAccountUpdateRequest{}
	return &this
}

// NewManagedAccountUpdateRequestWithDefaults instantiates a new ManagedAccountUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedAccountUpdateRequestWithDefaults() *ManagedAccountUpdateRequest {
	this := ManagedAccountUpdateRequest{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedAccountUpdateRequest) GetTag() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedAccountUpdateRequest) GetTagOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return &o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ManagedAccountUpdateRequest) HasTag() bool {
	if o != nil && IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given interface{} and assigns it to the Tag field.
func (o *ManagedAccountUpdateRequest) SetTag(v interface{}) {
	o.Tag = v
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedAccountUpdateRequest) GetFriendlyName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedAccountUpdateRequest) GetFriendlyNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return &o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *ManagedAccountUpdateRequest) HasFriendlyName() bool {
	if o != nil && IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given interface{} and assigns it to the FriendlyName field.
func (o *ManagedAccountUpdateRequest) SetFriendlyName(v interface{}) {
	o.FriendlyName = v
}

func (o ManagedAccountUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedAccountUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.FriendlyName != nil {
		toSerialize["friendlyName"] = o.FriendlyName
	}
	return toSerialize, nil
}

type NullableManagedAccountUpdateRequest struct {
	value *ManagedAccountUpdateRequest
	isSet bool
}

func (v NullableManagedAccountUpdateRequest) Get() *ManagedAccountUpdateRequest {
	return v.value
}

func (v *NullableManagedAccountUpdateRequest) Set(val *ManagedAccountUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedAccountUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedAccountUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedAccountUpdateRequest(val *ManagedAccountUpdateRequest) *NullableManagedAccountUpdateRequest {
	return &NullableManagedAccountUpdateRequest{value: val, isSet: true}
}

func (v NullableManagedAccountUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedAccountUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


