/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ManagedCard type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedCard{}

// ManagedCard struct for ManagedCard
type ManagedCard struct {
	// The unique identifier of the card.
	Id interface{} `json:"id"`
	// The profile Id which a specific identity, instrument or transaction type is linked to.  Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.  You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.  Profile Ids can be found in the Multi Portal, in the API Credentials page. 
	ProfileId interface{} `json:"profileId"`
	// A uniquely generated code used to identify a card.  This code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket. 
	ExternalHandle interface{} `json:"externalHandle"`
	// The tag field is a custom field that can be used to search and filter.
	Tag interface{} `json:"tag,omitempty"`
	// The friendly name given to the card.
	FriendlyName interface{} `json:"friendlyName"`
	// The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.
	Currency interface{} `json:"currency"`
	State ManagedInstrumentState `json:"state"`
	// The type of card:   - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.   - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals. 
	Type interface{} `json:"type"`
	// The card scheme, or brand of the card.
	CardBrand interface{} `json:"cardBrand"`
	CardNumber *SensitiveCardNumber `json:"cardNumber,omitempty"`
	Cvv *SensitiveCvv `json:"cvv,omitempty"`
	// The first six digits of the card number.
	CardNumberFirstSix interface{} `json:"cardNumberFirstSix,omitempty"`
	// The last four digits of the card number.
	CardNumberLastFour interface{} `json:"cardNumberLastFour,omitempty"`
	// The card holderâ€™s name for the card. This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.
	NameOnCard interface{} `json:"nameOnCard"`
	// Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.
	NameOnCardLine2 interface{} `json:"nameOnCardLine2,omitempty"`
	// The start date of this card, in MMYY format.
	StartMmyy interface{} `json:"startMmyy,omitempty"`
	// The end date of this card, in MMYY format.
	ExpiryMmyy interface{} `json:"expiryMmyy,omitempty"`
	// The card classification determines whether the card is from Consumer or Corporate BINs.
	CardLevelClassification interface{} `json:"cardLevelClassification"`
	// The validity timeframe of the card, in months.
	ExpiryPeriodMonths interface{} `json:"expiryPeriodMonths"`
	// Indicates how card will be handled once it is close to expiring.   - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.   - NO_RENEW: Once the expiry date is reached, the card is destroyed. 
	RenewalType interface{} `json:"renewalType"`
	// The timestamp when the card was created, expressed in Epoch timestamp using millisecond precision.
	CreationTimestamp interface{} `json:"creationTimestamp"`
	// The mobile number including country code of the card holder, needed for 3DS challenge.
	CardholderMobileNumber interface{} `json:"cardholderMobileNumber"`
	// The billing address set for the cardholder. This can be checked by the merchant during online purchases.
	BillingAddress *Address `json:"billingAddress,omitempty"`
	PhysicalCardDetails *PhysicalCardDetails `json:"physicalCardDetails,omitempty"`
	DigitalWallets *DigitalWallets `json:"digitalWallets,omitempty"`
	// Default decision for auth forwarding on timeout
	AuthForwardingDefaultTimeoutDecision interface{} `json:"authForwardingDefaultTimeoutDecision,omitempty"`
	// The mode with which this card was created:  - A prepaid mode card has its own balance and can have funds transferred to or from it. - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit. 
	Mode interface{} `json:"mode"`
}

// NewManagedCard instantiates a new ManagedCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedCard(id interface{}, profileId interface{}, externalHandle interface{}, friendlyName interface{}, currency interface{}, state ManagedInstrumentState, type_ interface{}, cardBrand interface{}, nameOnCard interface{}, cardLevelClassification interface{}, expiryPeriodMonths interface{}, renewalType interface{}, creationTimestamp interface{}, cardholderMobileNumber interface{}, mode interface{}) *ManagedCard {
	this := ManagedCard{}
	this.Id = id
	this.ProfileId = profileId
	this.ExternalHandle = externalHandle
	this.FriendlyName = friendlyName
	this.Currency = currency
	this.State = state
	this.Type = type_
	this.CardBrand = cardBrand
	this.NameOnCard = nameOnCard
	this.CardLevelClassification = cardLevelClassification
	this.ExpiryPeriodMonths = expiryPeriodMonths
	this.RenewalType = renewalType
	this.CreationTimestamp = creationTimestamp
	this.CardholderMobileNumber = cardholderMobileNumber
	this.Mode = mode
	return &this
}

// NewManagedCardWithDefaults instantiates a new ManagedCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedCardWithDefaults() *ManagedCard {
	this := ManagedCard{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ManagedCard) SetId(v interface{}) {
	o.Id = v
}

// GetProfileId returns the ProfileId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetProfileId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetProfileIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *ManagedCard) SetProfileId(v interface{}) {
	o.ProfileId = v
}

// GetExternalHandle returns the ExternalHandle field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetExternalHandle() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ExternalHandle
}

// GetExternalHandleOk returns a tuple with the ExternalHandle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetExternalHandleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExternalHandle) {
		return nil, false
	}
	return &o.ExternalHandle, true
}

// SetExternalHandle sets field value
func (o *ManagedCard) SetExternalHandle(v interface{}) {
	o.ExternalHandle = v
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetTag() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetTagOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return &o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ManagedCard) HasTag() bool {
	if o != nil && IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given interface{} and assigns it to the Tag field.
func (o *ManagedCard) SetTag(v interface{}) {
	o.Tag = v
}

// GetFriendlyName returns the FriendlyName field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetFriendlyName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetFriendlyNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return &o.FriendlyName, true
}

// SetFriendlyName sets field value
func (o *ManagedCard) SetFriendlyName(v interface{}) {
	o.FriendlyName = v
}

// GetCurrency returns the Currency field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetCurrency() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCurrencyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ManagedCard) SetCurrency(v interface{}) {
	o.Currency = v
}

// GetState returns the State field value
func (o *ManagedCard) GetState() ManagedInstrumentState {
	if o == nil {
		var ret ManagedInstrumentState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ManagedCard) GetStateOk() (*ManagedInstrumentState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ManagedCard) SetState(v ManagedInstrumentState) {
	o.State = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ManagedCard) SetType(v interface{}) {
	o.Type = v
}

// GetCardBrand returns the CardBrand field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetCardBrand() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CardBrand
}

// GetCardBrandOk returns a tuple with the CardBrand field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCardBrandOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardBrand) {
		return nil, false
	}
	return &o.CardBrand, true
}

// SetCardBrand sets field value
func (o *ManagedCard) SetCardBrand(v interface{}) {
	o.CardBrand = v
}

// GetCardNumber returns the CardNumber field value if set, zero value otherwise.
func (o *ManagedCard) GetCardNumber() SensitiveCardNumber {
	if o == nil || IsNil(o.CardNumber) {
		var ret SensitiveCardNumber
		return ret
	}
	return *o.CardNumber
}

// GetCardNumberOk returns a tuple with the CardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedCard) GetCardNumberOk() (*SensitiveCardNumber, bool) {
	if o == nil || IsNil(o.CardNumber) {
		return nil, false
	}
	return o.CardNumber, true
}

// HasCardNumber returns a boolean if a field has been set.
func (o *ManagedCard) HasCardNumber() bool {
	if o != nil && !IsNil(o.CardNumber) {
		return true
	}

	return false
}

// SetCardNumber gets a reference to the given SensitiveCardNumber and assigns it to the CardNumber field.
func (o *ManagedCard) SetCardNumber(v SensitiveCardNumber) {
	o.CardNumber = &v
}

// GetCvv returns the Cvv field value if set, zero value otherwise.
func (o *ManagedCard) GetCvv() SensitiveCvv {
	if o == nil || IsNil(o.Cvv) {
		var ret SensitiveCvv
		return ret
	}
	return *o.Cvv
}

// GetCvvOk returns a tuple with the Cvv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedCard) GetCvvOk() (*SensitiveCvv, bool) {
	if o == nil || IsNil(o.Cvv) {
		return nil, false
	}
	return o.Cvv, true
}

// HasCvv returns a boolean if a field has been set.
func (o *ManagedCard) HasCvv() bool {
	if o != nil && !IsNil(o.Cvv) {
		return true
	}

	return false
}

// SetCvv gets a reference to the given SensitiveCvv and assigns it to the Cvv field.
func (o *ManagedCard) SetCvv(v SensitiveCvv) {
	o.Cvv = &v
}

// GetCardNumberFirstSix returns the CardNumberFirstSix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetCardNumberFirstSix() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CardNumberFirstSix
}

// GetCardNumberFirstSixOk returns a tuple with the CardNumberFirstSix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCardNumberFirstSixOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardNumberFirstSix) {
		return nil, false
	}
	return &o.CardNumberFirstSix, true
}

// HasCardNumberFirstSix returns a boolean if a field has been set.
func (o *ManagedCard) HasCardNumberFirstSix() bool {
	if o != nil && IsNil(o.CardNumberFirstSix) {
		return true
	}

	return false
}

// SetCardNumberFirstSix gets a reference to the given interface{} and assigns it to the CardNumberFirstSix field.
func (o *ManagedCard) SetCardNumberFirstSix(v interface{}) {
	o.CardNumberFirstSix = v
}

// GetCardNumberLastFour returns the CardNumberLastFour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetCardNumberLastFour() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CardNumberLastFour
}

// GetCardNumberLastFourOk returns a tuple with the CardNumberLastFour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCardNumberLastFourOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardNumberLastFour) {
		return nil, false
	}
	return &o.CardNumberLastFour, true
}

// HasCardNumberLastFour returns a boolean if a field has been set.
func (o *ManagedCard) HasCardNumberLastFour() bool {
	if o != nil && IsNil(o.CardNumberLastFour) {
		return true
	}

	return false
}

// SetCardNumberLastFour gets a reference to the given interface{} and assigns it to the CardNumberLastFour field.
func (o *ManagedCard) SetCardNumberLastFour(v interface{}) {
	o.CardNumberLastFour = v
}

// GetNameOnCard returns the NameOnCard field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetNameOnCard() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.NameOnCard
}

// GetNameOnCardOk returns a tuple with the NameOnCard field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetNameOnCardOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NameOnCard) {
		return nil, false
	}
	return &o.NameOnCard, true
}

// SetNameOnCard sets field value
func (o *ManagedCard) SetNameOnCard(v interface{}) {
	o.NameOnCard = v
}

// GetNameOnCardLine2 returns the NameOnCardLine2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetNameOnCardLine2() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NameOnCardLine2
}

// GetNameOnCardLine2Ok returns a tuple with the NameOnCardLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetNameOnCardLine2Ok() (*interface{}, bool) {
	if o == nil || IsNil(o.NameOnCardLine2) {
		return nil, false
	}
	return &o.NameOnCardLine2, true
}

// HasNameOnCardLine2 returns a boolean if a field has been set.
func (o *ManagedCard) HasNameOnCardLine2() bool {
	if o != nil && IsNil(o.NameOnCardLine2) {
		return true
	}

	return false
}

// SetNameOnCardLine2 gets a reference to the given interface{} and assigns it to the NameOnCardLine2 field.
func (o *ManagedCard) SetNameOnCardLine2(v interface{}) {
	o.NameOnCardLine2 = v
}

// GetStartMmyy returns the StartMmyy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetStartMmyy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.StartMmyy
}

// GetStartMmyyOk returns a tuple with the StartMmyy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetStartMmyyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.StartMmyy) {
		return nil, false
	}
	return &o.StartMmyy, true
}

// HasStartMmyy returns a boolean if a field has been set.
func (o *ManagedCard) HasStartMmyy() bool {
	if o != nil && IsNil(o.StartMmyy) {
		return true
	}

	return false
}

// SetStartMmyy gets a reference to the given interface{} and assigns it to the StartMmyy field.
func (o *ManagedCard) SetStartMmyy(v interface{}) {
	o.StartMmyy = v
}

// GetExpiryMmyy returns the ExpiryMmyy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetExpiryMmyy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExpiryMmyy
}

// GetExpiryMmyyOk returns a tuple with the ExpiryMmyy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetExpiryMmyyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExpiryMmyy) {
		return nil, false
	}
	return &o.ExpiryMmyy, true
}

// HasExpiryMmyy returns a boolean if a field has been set.
func (o *ManagedCard) HasExpiryMmyy() bool {
	if o != nil && IsNil(o.ExpiryMmyy) {
		return true
	}

	return false
}

// SetExpiryMmyy gets a reference to the given interface{} and assigns it to the ExpiryMmyy field.
func (o *ManagedCard) SetExpiryMmyy(v interface{}) {
	o.ExpiryMmyy = v
}

// GetCardLevelClassification returns the CardLevelClassification field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetCardLevelClassification() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CardLevelClassification
}

// GetCardLevelClassificationOk returns a tuple with the CardLevelClassification field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCardLevelClassificationOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardLevelClassification) {
		return nil, false
	}
	return &o.CardLevelClassification, true
}

// SetCardLevelClassification sets field value
func (o *ManagedCard) SetCardLevelClassification(v interface{}) {
	o.CardLevelClassification = v
}

// GetExpiryPeriodMonths returns the ExpiryPeriodMonths field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetExpiryPeriodMonths() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ExpiryPeriodMonths
}

// GetExpiryPeriodMonthsOk returns a tuple with the ExpiryPeriodMonths field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetExpiryPeriodMonthsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExpiryPeriodMonths) {
		return nil, false
	}
	return &o.ExpiryPeriodMonths, true
}

// SetExpiryPeriodMonths sets field value
func (o *ManagedCard) SetExpiryPeriodMonths(v interface{}) {
	o.ExpiryPeriodMonths = v
}

// GetRenewalType returns the RenewalType field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetRenewalType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RenewalType
}

// GetRenewalTypeOk returns a tuple with the RenewalType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetRenewalTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RenewalType) {
		return nil, false
	}
	return &o.RenewalType, true
}

// SetRenewalType sets field value
func (o *ManagedCard) SetRenewalType(v interface{}) {
	o.RenewalType = v
}

// GetCreationTimestamp returns the CreationTimestamp field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetCreationTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCreationTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return &o.CreationTimestamp, true
}

// SetCreationTimestamp sets field value
func (o *ManagedCard) SetCreationTimestamp(v interface{}) {
	o.CreationTimestamp = v
}

// GetCardholderMobileNumber returns the CardholderMobileNumber field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetCardholderMobileNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CardholderMobileNumber
}

// GetCardholderMobileNumberOk returns a tuple with the CardholderMobileNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetCardholderMobileNumberOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardholderMobileNumber) {
		return nil, false
	}
	return &o.CardholderMobileNumber, true
}

// SetCardholderMobileNumber sets field value
func (o *ManagedCard) SetCardholderMobileNumber(v interface{}) {
	o.CardholderMobileNumber = v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *ManagedCard) GetBillingAddress() Address {
	if o == nil || IsNil(o.BillingAddress) {
		var ret Address
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedCard) GetBillingAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *ManagedCard) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given Address and assigns it to the BillingAddress field.
func (o *ManagedCard) SetBillingAddress(v Address) {
	o.BillingAddress = &v
}

// GetPhysicalCardDetails returns the PhysicalCardDetails field value if set, zero value otherwise.
func (o *ManagedCard) GetPhysicalCardDetails() PhysicalCardDetails {
	if o == nil || IsNil(o.PhysicalCardDetails) {
		var ret PhysicalCardDetails
		return ret
	}
	return *o.PhysicalCardDetails
}

// GetPhysicalCardDetailsOk returns a tuple with the PhysicalCardDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedCard) GetPhysicalCardDetailsOk() (*PhysicalCardDetails, bool) {
	if o == nil || IsNil(o.PhysicalCardDetails) {
		return nil, false
	}
	return o.PhysicalCardDetails, true
}

// HasPhysicalCardDetails returns a boolean if a field has been set.
func (o *ManagedCard) HasPhysicalCardDetails() bool {
	if o != nil && !IsNil(o.PhysicalCardDetails) {
		return true
	}

	return false
}

// SetPhysicalCardDetails gets a reference to the given PhysicalCardDetails and assigns it to the PhysicalCardDetails field.
func (o *ManagedCard) SetPhysicalCardDetails(v PhysicalCardDetails) {
	o.PhysicalCardDetails = &v
}

// GetDigitalWallets returns the DigitalWallets field value if set, zero value otherwise.
func (o *ManagedCard) GetDigitalWallets() DigitalWallets {
	if o == nil || IsNil(o.DigitalWallets) {
		var ret DigitalWallets
		return ret
	}
	return *o.DigitalWallets
}

// GetDigitalWalletsOk returns a tuple with the DigitalWallets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedCard) GetDigitalWalletsOk() (*DigitalWallets, bool) {
	if o == nil || IsNil(o.DigitalWallets) {
		return nil, false
	}
	return o.DigitalWallets, true
}

// HasDigitalWallets returns a boolean if a field has been set.
func (o *ManagedCard) HasDigitalWallets() bool {
	if o != nil && !IsNil(o.DigitalWallets) {
		return true
	}

	return false
}

// SetDigitalWallets gets a reference to the given DigitalWallets and assigns it to the DigitalWallets field.
func (o *ManagedCard) SetDigitalWallets(v DigitalWallets) {
	o.DigitalWallets = &v
}

// GetAuthForwardingDefaultTimeoutDecision returns the AuthForwardingDefaultTimeoutDecision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCard) GetAuthForwardingDefaultTimeoutDecision() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AuthForwardingDefaultTimeoutDecision
}

// GetAuthForwardingDefaultTimeoutDecisionOk returns a tuple with the AuthForwardingDefaultTimeoutDecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetAuthForwardingDefaultTimeoutDecisionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AuthForwardingDefaultTimeoutDecision) {
		return nil, false
	}
	return &o.AuthForwardingDefaultTimeoutDecision, true
}

// HasAuthForwardingDefaultTimeoutDecision returns a boolean if a field has been set.
func (o *ManagedCard) HasAuthForwardingDefaultTimeoutDecision() bool {
	if o != nil && IsNil(o.AuthForwardingDefaultTimeoutDecision) {
		return true
	}

	return false
}

// SetAuthForwardingDefaultTimeoutDecision gets a reference to the given interface{} and assigns it to the AuthForwardingDefaultTimeoutDecision field.
func (o *ManagedCard) SetAuthForwardingDefaultTimeoutDecision(v interface{}) {
	o.AuthForwardingDefaultTimeoutDecision = v
}

// GetMode returns the Mode field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCard) GetMode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCard) GetModeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *ManagedCard) SetMode(v interface{}) {
	o.Mode = v
}

func (o ManagedCard) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedCard) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ProfileId != nil {
		toSerialize["profileId"] = o.ProfileId
	}
	if o.ExternalHandle != nil {
		toSerialize["externalHandle"] = o.ExternalHandle
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.FriendlyName != nil {
		toSerialize["friendlyName"] = o.FriendlyName
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	toSerialize["state"] = o.State
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.CardBrand != nil {
		toSerialize["cardBrand"] = o.CardBrand
	}
	if !IsNil(o.CardNumber) {
		toSerialize["cardNumber"] = o.CardNumber
	}
	if !IsNil(o.Cvv) {
		toSerialize["cvv"] = o.Cvv
	}
	if o.CardNumberFirstSix != nil {
		toSerialize["cardNumberFirstSix"] = o.CardNumberFirstSix
	}
	if o.CardNumberLastFour != nil {
		toSerialize["cardNumberLastFour"] = o.CardNumberLastFour
	}
	if o.NameOnCard != nil {
		toSerialize["nameOnCard"] = o.NameOnCard
	}
	if o.NameOnCardLine2 != nil {
		toSerialize["nameOnCardLine2"] = o.NameOnCardLine2
	}
	if o.StartMmyy != nil {
		toSerialize["startMmyy"] = o.StartMmyy
	}
	if o.ExpiryMmyy != nil {
		toSerialize["expiryMmyy"] = o.ExpiryMmyy
	}
	if o.CardLevelClassification != nil {
		toSerialize["cardLevelClassification"] = o.CardLevelClassification
	}
	if o.ExpiryPeriodMonths != nil {
		toSerialize["expiryPeriodMonths"] = o.ExpiryPeriodMonths
	}
	if o.RenewalType != nil {
		toSerialize["renewalType"] = o.RenewalType
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if o.CardholderMobileNumber != nil {
		toSerialize["cardholderMobileNumber"] = o.CardholderMobileNumber
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billingAddress"] = o.BillingAddress
	}
	if !IsNil(o.PhysicalCardDetails) {
		toSerialize["physicalCardDetails"] = o.PhysicalCardDetails
	}
	if !IsNil(o.DigitalWallets) {
		toSerialize["digitalWallets"] = o.DigitalWallets
	}
	if o.AuthForwardingDefaultTimeoutDecision != nil {
		toSerialize["authForwardingDefaultTimeoutDecision"] = o.AuthForwardingDefaultTimeoutDecision
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

type NullableManagedCard struct {
	value *ManagedCard
	isSet bool
}

func (v NullableManagedCard) Get() *ManagedCard {
	return v.value
}

func (v *NullableManagedCard) Set(val *ManagedCard) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedCard) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedCard(val *ManagedCard) *NullableManagedCard {
	return &NullableManagedCard{value: val, isSet: true}
}

func (v NullableManagedCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


