/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the AuthorisedUserEmailVerify409Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorisedUserEmailVerify409Response{}

// AuthorisedUserEmailVerify409Response struct for AuthorisedUserEmailVerify409Response
type AuthorisedUserEmailVerify409Response struct {
	ErrorCode interface{} `json:"errorCode,omitempty"`
}

// NewAuthorisedUserEmailVerify409Response instantiates a new AuthorisedUserEmailVerify409Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorisedUserEmailVerify409Response() *AuthorisedUserEmailVerify409Response {
	this := AuthorisedUserEmailVerify409Response{}
	return &this
}

// NewAuthorisedUserEmailVerify409ResponseWithDefaults instantiates a new AuthorisedUserEmailVerify409Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorisedUserEmailVerify409ResponseWithDefaults() *AuthorisedUserEmailVerify409Response {
	this := AuthorisedUserEmailVerify409Response{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorisedUserEmailVerify409Response) GetErrorCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorisedUserEmailVerify409Response) GetErrorCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return &o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *AuthorisedUserEmailVerify409Response) HasErrorCode() bool {
	if o != nil && IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given interface{} and assigns it to the ErrorCode field.
func (o *AuthorisedUserEmailVerify409Response) SetErrorCode(v interface{}) {
	o.ErrorCode = v
}

func (o AuthorisedUserEmailVerify409Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorisedUserEmailVerify409Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableAuthorisedUserEmailVerify409Response struct {
	value *AuthorisedUserEmailVerify409Response
	isSet bool
}

func (v NullableAuthorisedUserEmailVerify409Response) Get() *AuthorisedUserEmailVerify409Response {
	return v.value
}

func (v *NullableAuthorisedUserEmailVerify409Response) Set(val *AuthorisedUserEmailVerify409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorisedUserEmailVerify409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorisedUserEmailVerify409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorisedUserEmailVerify409Response(val *AuthorisedUserEmailVerify409Response) *NullableAuthorisedUserEmailVerify409Response {
	return &NullableAuthorisedUserEmailVerify409Response{value: val, isSet: true}
}

func (v NullableAuthorisedUserEmailVerify409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorisedUserEmailVerify409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


