/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ConsumerKycStartRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumerKycStartRequest{}

// ConsumerKycStartRequest struct for ConsumerKycStartRequest
type ConsumerKycStartRequest struct {
	// The KYC level that the consumer will be assigned to, which determines the due diligence details that the user will need to provide.
	KycLevel *KycLevel `json:"kycLevel,omitempty"`
}

// NewConsumerKycStartRequest instantiates a new ConsumerKycStartRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerKycStartRequest() *ConsumerKycStartRequest {
	this := ConsumerKycStartRequest{}
	return &this
}

// NewConsumerKycStartRequestWithDefaults instantiates a new ConsumerKycStartRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerKycStartRequestWithDefaults() *ConsumerKycStartRequest {
	this := ConsumerKycStartRequest{}
	return &this
}

// GetKycLevel returns the KycLevel field value if set, zero value otherwise.
func (o *ConsumerKycStartRequest) GetKycLevel() KycLevel {
	if o == nil || IsNil(o.KycLevel) {
		var ret KycLevel
		return ret
	}
	return *o.KycLevel
}

// GetKycLevelOk returns a tuple with the KycLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerKycStartRequest) GetKycLevelOk() (*KycLevel, bool) {
	if o == nil || IsNil(o.KycLevel) {
		return nil, false
	}
	return o.KycLevel, true
}

// HasKycLevel returns a boolean if a field has been set.
func (o *ConsumerKycStartRequest) HasKycLevel() bool {
	if o != nil && !IsNil(o.KycLevel) {
		return true
	}

	return false
}

// SetKycLevel gets a reference to the given KycLevel and assigns it to the KycLevel field.
func (o *ConsumerKycStartRequest) SetKycLevel(v KycLevel) {
	o.KycLevel = &v
}

func (o ConsumerKycStartRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumerKycStartRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KycLevel) {
		toSerialize["kycLevel"] = o.KycLevel
	}
	return toSerialize, nil
}

type NullableConsumerKycStartRequest struct {
	value *ConsumerKycStartRequest
	isSet bool
}

func (v NullableConsumerKycStartRequest) Get() *ConsumerKycStartRequest {
	return v.value
}

func (v *NullableConsumerKycStartRequest) Set(val *ConsumerKycStartRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerKycStartRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerKycStartRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerKycStartRequest(val *ConsumerKycStartRequest) *NullableConsumerKycStartRequest {
	return &NullableConsumerKycStartRequest{value: val, isSet: true}
}

func (v NullableConsumerKycStartRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerKycStartRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


