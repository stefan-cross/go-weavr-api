/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the UserInviteConsumeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInviteConsumeRequest{}

// UserInviteConsumeRequest struct for UserInviteConsumeRequest
type UserInviteConsumeRequest struct {
	// A randomly generated one-time use code.
	InviteCode interface{} `json:"inviteCode"`
	Password SensitivePassword `json:"password"`
}

// NewUserInviteConsumeRequest instantiates a new UserInviteConsumeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInviteConsumeRequest(inviteCode interface{}, password SensitivePassword) *UserInviteConsumeRequest {
	this := UserInviteConsumeRequest{}
	this.InviteCode = inviteCode
	this.Password = password
	return &this
}

// NewUserInviteConsumeRequestWithDefaults instantiates a new UserInviteConsumeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInviteConsumeRequestWithDefaults() *UserInviteConsumeRequest {
	this := UserInviteConsumeRequest{}
	return &this
}

// GetInviteCode returns the InviteCode field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UserInviteConsumeRequest) GetInviteCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.InviteCode
}

// GetInviteCodeOk returns a tuple with the InviteCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInviteConsumeRequest) GetInviteCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.InviteCode) {
		return nil, false
	}
	return &o.InviteCode, true
}

// SetInviteCode sets field value
func (o *UserInviteConsumeRequest) SetInviteCode(v interface{}) {
	o.InviteCode = v
}

// GetPassword returns the Password field value
func (o *UserInviteConsumeRequest) GetPassword() SensitivePassword {
	if o == nil {
		var ret SensitivePassword
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserInviteConsumeRequest) GetPasswordOk() (*SensitivePassword, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserInviteConsumeRequest) SetPassword(v SensitivePassword) {
	o.Password = v
}

func (o UserInviteConsumeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInviteConsumeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InviteCode != nil {
		toSerialize["inviteCode"] = o.InviteCode
	}
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableUserInviteConsumeRequest struct {
	value *UserInviteConsumeRequest
	isSet bool
}

func (v NullableUserInviteConsumeRequest) Get() *UserInviteConsumeRequest {
	return v.value
}

func (v *NullableUserInviteConsumeRequest) Set(val *UserInviteConsumeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInviteConsumeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInviteConsumeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInviteConsumeRequest(val *UserInviteConsumeRequest) *NullableUserInviteConsumeRequest {
	return &NullableUserInviteConsumeRequest{value: val, isSet: true}
}

func (v NullableUserInviteConsumeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInviteConsumeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


