/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ManagedInstrumentBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedInstrumentBalance{}

// ManagedInstrumentBalance Instruments with funds have 2 balances, the `availableBalance` indicating the funds that are available for transactions such as purchases, and the `actualBalance` indicating the funds that are actually on the instrument.
type ManagedInstrumentBalance struct {
	// The funds available for transactions on the instrument. Funds that are blocked or pending are not included in the available balance.
	AvailableBalance interface{} `json:"availableBalance,omitempty"`
	// The funds that are actually on the instrument. Funds that are blocked or pending, due to for example, a purchase authorisation or a pending deposit, are included in the actual balance.
	ActualBalance interface{} `json:"actualBalance,omitempty"`
}

// NewManagedInstrumentBalance instantiates a new ManagedInstrumentBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedInstrumentBalance() *ManagedInstrumentBalance {
	this := ManagedInstrumentBalance{}
	return &this
}

// NewManagedInstrumentBalanceWithDefaults instantiates a new ManagedInstrumentBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedInstrumentBalanceWithDefaults() *ManagedInstrumentBalance {
	this := ManagedInstrumentBalance{}
	return &this
}

// GetAvailableBalance returns the AvailableBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedInstrumentBalance) GetAvailableBalance() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedInstrumentBalance) GetAvailableBalanceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AvailableBalance) {
		return nil, false
	}
	return &o.AvailableBalance, true
}

// HasAvailableBalance returns a boolean if a field has been set.
func (o *ManagedInstrumentBalance) HasAvailableBalance() bool {
	if o != nil && IsNil(o.AvailableBalance) {
		return true
	}

	return false
}

// SetAvailableBalance gets a reference to the given interface{} and assigns it to the AvailableBalance field.
func (o *ManagedInstrumentBalance) SetAvailableBalance(v interface{}) {
	o.AvailableBalance = v
}

// GetActualBalance returns the ActualBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedInstrumentBalance) GetActualBalance() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ActualBalance
}

// GetActualBalanceOk returns a tuple with the ActualBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedInstrumentBalance) GetActualBalanceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ActualBalance) {
		return nil, false
	}
	return &o.ActualBalance, true
}

// HasActualBalance returns a boolean if a field has been set.
func (o *ManagedInstrumentBalance) HasActualBalance() bool {
	if o != nil && IsNil(o.ActualBalance) {
		return true
	}

	return false
}

// SetActualBalance gets a reference to the given interface{} and assigns it to the ActualBalance field.
func (o *ManagedInstrumentBalance) SetActualBalance(v interface{}) {
	o.ActualBalance = v
}

func (o ManagedInstrumentBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedInstrumentBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailableBalance != nil {
		toSerialize["availableBalance"] = o.AvailableBalance
	}
	if o.ActualBalance != nil {
		toSerialize["actualBalance"] = o.ActualBalance
	}
	return toSerialize, nil
}

type NullableManagedInstrumentBalance struct {
	value *ManagedInstrumentBalance
	isSet bool
}

func (v NullableManagedInstrumentBalance) Get() *ManagedInstrumentBalance {
	return v.value
}

func (v *NullableManagedInstrumentBalance) Set(val *ManagedInstrumentBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedInstrumentBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedInstrumentBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedInstrumentBalance(val *ManagedInstrumentBalance) *NullableManagedInstrumentBalance {
	return &NullableManagedInstrumentBalance{value: val, isSet: true}
}

func (v NullableManagedInstrumentBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedInstrumentBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


