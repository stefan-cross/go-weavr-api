/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the Date type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Date{}

// Date struct for Date
type Date struct {
	Year interface{} `json:"year"`
	Month interface{} `json:"month"`
	Day interface{} `json:"day"`
}

// NewDate instantiates a new Date object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDate(year interface{}, month interface{}, day interface{}) *Date {
	this := Date{}
	this.Year = year
	this.Month = month
	this.Day = day
	return &this
}

// NewDateWithDefaults instantiates a new Date object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateWithDefaults() *Date {
	this := Date{}
	return &this
}

// GetYear returns the Year field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Date) GetYear() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Date) GetYearOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *Date) SetYear(v interface{}) {
	o.Year = v
}

// GetMonth returns the Month field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Date) GetMonth() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Date) GetMonthOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *Date) SetMonth(v interface{}) {
	o.Month = v
}

// GetDay returns the Day field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Date) GetDay() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Date) GetDayOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *Date) SetDay(v interface{}) {
	o.Day = v
}

func (o Date) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Date) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.Day != nil {
		toSerialize["day"] = o.Day
	}
	return toSerialize, nil
}

type NullableDate struct {
	value *Date
	isSet bool
}

func (v NullableDate) Get() *Date {
	return v.value
}

func (v *NullableDate) Set(val *Date) {
	v.value = val
	v.isSet = true
}

func (v NullableDate) IsSet() bool {
	return v.isSet
}

func (v *NullableDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDate(val *Date) *NullableDate {
	return &NullableDate{value: val, isSet: true}
}

func (v NullableDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


