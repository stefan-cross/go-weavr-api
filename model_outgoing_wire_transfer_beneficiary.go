/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the OutgoingWireTransferBeneficiary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutgoingWireTransferBeneficiary{}

// OutgoingWireTransferBeneficiary Details of the beneficiary of the outgoing wire transfer.
type OutgoingWireTransferBeneficiary struct {
	// The beneficiary's full name.
	Name interface{} `json:"name"`
	// The beneficiary's address.
	Address interface{} `json:"address,omitempty"`
	// The beneficiary's bank name.
	BankName interface{} `json:"bankName,omitempty"`
	// The beneficiary's bank address.
	BankAddress interface{} `json:"bankAddress,omitempty"`
	// The beneficiary's bank country.
	BankCountry interface{} `json:"bankCountry,omitempty"`
	// Details of the beneficiary bank account, depending on the type of transfer chosen.
	BankAccountDetails interface{} `json:"bankAccountDetails"`
}

// NewOutgoingWireTransferBeneficiary instantiates a new OutgoingWireTransferBeneficiary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingWireTransferBeneficiary(name interface{}, bankAccountDetails interface{}) *OutgoingWireTransferBeneficiary {
	this := OutgoingWireTransferBeneficiary{}
	this.Name = name
	this.BankAccountDetails = bankAccountDetails
	return &this
}

// NewOutgoingWireTransferBeneficiaryWithDefaults instantiates a new OutgoingWireTransferBeneficiary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingWireTransferBeneficiaryWithDefaults() *OutgoingWireTransferBeneficiary {
	this := OutgoingWireTransferBeneficiary{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *OutgoingWireTransferBeneficiary) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutgoingWireTransferBeneficiary) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OutgoingWireTransferBeneficiary) SetName(v interface{}) {
	o.Name = v
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutgoingWireTransferBeneficiary) GetAddress() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutgoingWireTransferBeneficiary) GetAddressOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return &o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *OutgoingWireTransferBeneficiary) HasAddress() bool {
	if o != nil && IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given interface{} and assigns it to the Address field.
func (o *OutgoingWireTransferBeneficiary) SetAddress(v interface{}) {
	o.Address = v
}

// GetBankName returns the BankName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutgoingWireTransferBeneficiary) GetBankName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BankName
}

// GetBankNameOk returns a tuple with the BankName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutgoingWireTransferBeneficiary) GetBankNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BankName) {
		return nil, false
	}
	return &o.BankName, true
}

// HasBankName returns a boolean if a field has been set.
func (o *OutgoingWireTransferBeneficiary) HasBankName() bool {
	if o != nil && IsNil(o.BankName) {
		return true
	}

	return false
}

// SetBankName gets a reference to the given interface{} and assigns it to the BankName field.
func (o *OutgoingWireTransferBeneficiary) SetBankName(v interface{}) {
	o.BankName = v
}

// GetBankAddress returns the BankAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutgoingWireTransferBeneficiary) GetBankAddress() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BankAddress
}

// GetBankAddressOk returns a tuple with the BankAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutgoingWireTransferBeneficiary) GetBankAddressOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BankAddress) {
		return nil, false
	}
	return &o.BankAddress, true
}

// HasBankAddress returns a boolean if a field has been set.
func (o *OutgoingWireTransferBeneficiary) HasBankAddress() bool {
	if o != nil && IsNil(o.BankAddress) {
		return true
	}

	return false
}

// SetBankAddress gets a reference to the given interface{} and assigns it to the BankAddress field.
func (o *OutgoingWireTransferBeneficiary) SetBankAddress(v interface{}) {
	o.BankAddress = v
}

// GetBankCountry returns the BankCountry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutgoingWireTransferBeneficiary) GetBankCountry() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BankCountry
}

// GetBankCountryOk returns a tuple with the BankCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutgoingWireTransferBeneficiary) GetBankCountryOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BankCountry) {
		return nil, false
	}
	return &o.BankCountry, true
}

// HasBankCountry returns a boolean if a field has been set.
func (o *OutgoingWireTransferBeneficiary) HasBankCountry() bool {
	if o != nil && IsNil(o.BankCountry) {
		return true
	}

	return false
}

// SetBankCountry gets a reference to the given interface{} and assigns it to the BankCountry field.
func (o *OutgoingWireTransferBeneficiary) SetBankCountry(v interface{}) {
	o.BankCountry = v
}

// GetBankAccountDetails returns the BankAccountDetails field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *OutgoingWireTransferBeneficiary) GetBankAccountDetails() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.BankAccountDetails
}

// GetBankAccountDetailsOk returns a tuple with the BankAccountDetails field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutgoingWireTransferBeneficiary) GetBankAccountDetailsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BankAccountDetails) {
		return nil, false
	}
	return &o.BankAccountDetails, true
}

// SetBankAccountDetails sets field value
func (o *OutgoingWireTransferBeneficiary) SetBankAccountDetails(v interface{}) {
	o.BankAccountDetails = v
}

func (o OutgoingWireTransferBeneficiary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingWireTransferBeneficiary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.BankName != nil {
		toSerialize["bankName"] = o.BankName
	}
	if o.BankAddress != nil {
		toSerialize["bankAddress"] = o.BankAddress
	}
	if o.BankCountry != nil {
		toSerialize["bankCountry"] = o.BankCountry
	}
	if o.BankAccountDetails != nil {
		toSerialize["bankAccountDetails"] = o.BankAccountDetails
	}
	return toSerialize, nil
}

type NullableOutgoingWireTransferBeneficiary struct {
	value *OutgoingWireTransferBeneficiary
	isSet bool
}

func (v NullableOutgoingWireTransferBeneficiary) Get() *OutgoingWireTransferBeneficiary {
	return v.value
}

func (v *NullableOutgoingWireTransferBeneficiary) Set(val *OutgoingWireTransferBeneficiary) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingWireTransferBeneficiary) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingWireTransferBeneficiary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingWireTransferBeneficiary(val *OutgoingWireTransferBeneficiary) *NullableOutgoingWireTransferBeneficiary {
	return &NullableOutgoingWireTransferBeneficiary{value: val, isSet: true}
}

func (v NullableOutgoingWireTransferBeneficiary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingWireTransferBeneficiary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


