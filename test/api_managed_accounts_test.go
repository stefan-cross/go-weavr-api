/*
Weavr Multi Product API

Testing ManagedAccountsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package weavr

import (
	"context"
	openapiclient "github.com/stefan-cross/go-weavr-api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_weavr_ManagedAccountsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedAccountsApiService ManagedAccountBlock", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountBlock(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountIBANGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountIBANGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountRemove", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountRemove(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountStatement", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountStatement(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountUnblock", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountUnblock(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAccountsApiService ManagedAccountsIBANUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedAccountsApi.ManagedAccountsIBANUpgrade(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
