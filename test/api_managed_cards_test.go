/*
Weavr Multi Product API

Testing ManagedCardsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package weavr

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_weavr_ManagedCardsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedCardsApiService ManagedCardAssign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardAssign(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardBlock(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalActivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalActivate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalContactlessLimitReset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalContactlessLimitReset(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalPinGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalPinGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalPinUnBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalPinUnBlock(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalReplaceDamaged", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalReplaceDamaged(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalReplaceLostOrStolen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalReplaceLostOrStolen(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalReportLost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalReportLost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalReportStolen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalReportStolen(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardPhysicalUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardPhysicalUpgrade(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardRemove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardRemove(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardSpendRulesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardSpendRulesCreate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardSpendRulesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardSpendRulesDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardSpendRulesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardSpendRulesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardSpendRulesSet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardSpendRulesSet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardSpendRulesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardSpendRulesUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardStatement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardStatement(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardUnblock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardUnblock(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id interface{}

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedCardsApiService ManagedCardsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ManagedCardsApi.ManagedCardsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
