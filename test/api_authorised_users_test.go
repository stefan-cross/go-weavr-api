/*
Weavr Multi Product API

Testing AuthorisedUsersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package weavr

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_weavr_AuthorisedUsersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthorisedUsersApiService AuthorisedUserEmailVerificationCodeSend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AuthorisedUsersApi.AuthorisedUserEmailVerificationCodeSend(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService AuthorisedUserEmailVerify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AuthorisedUsersApi.AuthorisedUserEmailVerify(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserActivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserActivate(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AuthorisedUsersApi.UserCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserDeactivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserDeactivate(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserGetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserGetById(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserInviteConsume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserInviteConsume(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserInviteSend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserInviteSend(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserInviteValidate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserInviteValidate(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserKyc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AuthorisedUsersApi.UserKyc(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UserUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId interface{}

		httpRes, err := apiClient.AuthorisedUsersApi.UserUpdate(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorisedUsersApiService UsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.AuthorisedUsersApi.UsersGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
