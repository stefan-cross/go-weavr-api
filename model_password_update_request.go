/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the PasswordUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordUpdateRequest{}

// PasswordUpdateRequest struct for PasswordUpdateRequest
type PasswordUpdateRequest struct {
	OldPassword SensitivePassword `json:"oldPassword"`
	NewPassword SensitivePassword `json:"newPassword"`
}

// NewPasswordUpdateRequest instantiates a new PasswordUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordUpdateRequest(oldPassword SensitivePassword, newPassword SensitivePassword) *PasswordUpdateRequest {
	this := PasswordUpdateRequest{}
	this.OldPassword = oldPassword
	this.NewPassword = newPassword
	return &this
}

// NewPasswordUpdateRequestWithDefaults instantiates a new PasswordUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordUpdateRequestWithDefaults() *PasswordUpdateRequest {
	this := PasswordUpdateRequest{}
	return &this
}

// GetOldPassword returns the OldPassword field value
func (o *PasswordUpdateRequest) GetOldPassword() SensitivePassword {
	if o == nil {
		var ret SensitivePassword
		return ret
	}

	return o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value
// and a boolean to check if the value has been set.
func (o *PasswordUpdateRequest) GetOldPasswordOk() (*SensitivePassword, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldPassword, true
}

// SetOldPassword sets field value
func (o *PasswordUpdateRequest) SetOldPassword(v SensitivePassword) {
	o.OldPassword = v
}

// GetNewPassword returns the NewPassword field value
func (o *PasswordUpdateRequest) GetNewPassword() SensitivePassword {
	if o == nil {
		var ret SensitivePassword
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *PasswordUpdateRequest) GetNewPasswordOk() (*SensitivePassword, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *PasswordUpdateRequest) SetNewPassword(v SensitivePassword) {
	o.NewPassword = v
}

func (o PasswordUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["oldPassword"] = o.OldPassword
	toSerialize["newPassword"] = o.NewPassword
	return toSerialize, nil
}

type NullablePasswordUpdateRequest struct {
	value *PasswordUpdateRequest
	isSet bool
}

func (v NullablePasswordUpdateRequest) Get() *PasswordUpdateRequest {
	return v.value
}

func (v *NullablePasswordUpdateRequest) Set(val *PasswordUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordUpdateRequest(val *PasswordUpdateRequest) *NullablePasswordUpdateRequest {
	return &NullablePasswordUpdateRequest{value: val, isSet: true}
}

func (v NullablePasswordUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


