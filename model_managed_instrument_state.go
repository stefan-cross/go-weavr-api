/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ManagedInstrumentState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedInstrumentState{}

// ManagedInstrumentState struct for ManagedInstrumentState
type ManagedInstrumentState struct {
	State InstrumentState `json:"state"`
	BlockedReason *BlockedReason `json:"blockedReason,omitempty"`
	DestroyedReason *DestroyedReason `json:"destroyedReason,omitempty"`
}

// NewManagedInstrumentState instantiates a new ManagedInstrumentState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedInstrumentState(state InstrumentState) *ManagedInstrumentState {
	this := ManagedInstrumentState{}
	this.State = state
	return &this
}

// NewManagedInstrumentStateWithDefaults instantiates a new ManagedInstrumentState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedInstrumentStateWithDefaults() *ManagedInstrumentState {
	this := ManagedInstrumentState{}
	return &this
}

// GetState returns the State field value
func (o *ManagedInstrumentState) GetState() InstrumentState {
	if o == nil {
		var ret InstrumentState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ManagedInstrumentState) GetStateOk() (*InstrumentState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ManagedInstrumentState) SetState(v InstrumentState) {
	o.State = v
}

// GetBlockedReason returns the BlockedReason field value if set, zero value otherwise.
func (o *ManagedInstrumentState) GetBlockedReason() BlockedReason {
	if o == nil || IsNil(o.BlockedReason) {
		var ret BlockedReason
		return ret
	}
	return *o.BlockedReason
}

// GetBlockedReasonOk returns a tuple with the BlockedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInstrumentState) GetBlockedReasonOk() (*BlockedReason, bool) {
	if o == nil || IsNil(o.BlockedReason) {
		return nil, false
	}
	return o.BlockedReason, true
}

// HasBlockedReason returns a boolean if a field has been set.
func (o *ManagedInstrumentState) HasBlockedReason() bool {
	if o != nil && !IsNil(o.BlockedReason) {
		return true
	}

	return false
}

// SetBlockedReason gets a reference to the given BlockedReason and assigns it to the BlockedReason field.
func (o *ManagedInstrumentState) SetBlockedReason(v BlockedReason) {
	o.BlockedReason = &v
}

// GetDestroyedReason returns the DestroyedReason field value if set, zero value otherwise.
func (o *ManagedInstrumentState) GetDestroyedReason() DestroyedReason {
	if o == nil || IsNil(o.DestroyedReason) {
		var ret DestroyedReason
		return ret
	}
	return *o.DestroyedReason
}

// GetDestroyedReasonOk returns a tuple with the DestroyedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedInstrumentState) GetDestroyedReasonOk() (*DestroyedReason, bool) {
	if o == nil || IsNil(o.DestroyedReason) {
		return nil, false
	}
	return o.DestroyedReason, true
}

// HasDestroyedReason returns a boolean if a field has been set.
func (o *ManagedInstrumentState) HasDestroyedReason() bool {
	if o != nil && !IsNil(o.DestroyedReason) {
		return true
	}

	return false
}

// SetDestroyedReason gets a reference to the given DestroyedReason and assigns it to the DestroyedReason field.
func (o *ManagedInstrumentState) SetDestroyedReason(v DestroyedReason) {
	o.DestroyedReason = &v
}

func (o ManagedInstrumentState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedInstrumentState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["state"] = o.State
	if !IsNil(o.BlockedReason) {
		toSerialize["blockedReason"] = o.BlockedReason
	}
	if !IsNil(o.DestroyedReason) {
		toSerialize["destroyedReason"] = o.DestroyedReason
	}
	return toSerialize, nil
}

type NullableManagedInstrumentState struct {
	value *ManagedInstrumentState
	isSet bool
}

func (v NullableManagedInstrumentState) Get() *ManagedInstrumentState {
	return v.value
}

func (v *NullableManagedInstrumentState) Set(val *ManagedInstrumentState) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedInstrumentState) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedInstrumentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedInstrumentState(val *ManagedInstrumentState) *NullableManagedInstrumentState {
	return &NullableManagedInstrumentState{value: val, isSet: true}
}

func (v NullableManagedInstrumentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedInstrumentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


