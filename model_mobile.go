/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the Mobile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mobile{}

// Mobile struct for Mobile
type Mobile struct {
	// The country code of the Corporate's root user mobile number (e.g. +44).
	CountryCode interface{} `json:"countryCode"`
	// The mobile number of the Corporate's root user - excluding country code.
	Number interface{} `json:"number"`
}

// NewMobile instantiates a new Mobile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobile(countryCode interface{}, number interface{}) *Mobile {
	this := Mobile{}
	this.CountryCode = countryCode
	this.Number = number
	return &this
}

// NewMobileWithDefaults instantiates a new Mobile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileWithDefaults() *Mobile {
	this := Mobile{}
	return &this
}

// GetCountryCode returns the CountryCode field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Mobile) GetCountryCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mobile) GetCountryCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *Mobile) SetCountryCode(v interface{}) {
	o.CountryCode = v
}

// GetNumber returns the Number field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Mobile) GetNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mobile) GetNumberOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *Mobile) SetNumber(v interface{}) {
	o.Number = v
}

func (o Mobile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mobile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryCode != nil {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	return toSerialize, nil
}

type NullableMobile struct {
	value *Mobile
	isSet bool
}

func (v NullableMobile) Get() *Mobile {
	return v.value
}

func (v *NullableMobile) Set(val *Mobile) {
	v.value = val
	v.isSet = true
}

func (v NullableMobile) IsSet() bool {
	return v.isSet
}

func (v *NullableMobile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobile(val *Mobile) *NullableMobile {
	return &NullableMobile{value: val, isSet: true}
}

func (v NullableMobile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


