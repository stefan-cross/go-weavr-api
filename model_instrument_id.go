/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the InstrumentId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstrumentId{}

// InstrumentId struct for InstrumentId
type InstrumentId struct {
	Id interface{} `json:"id"`
	Type InstrumentType `json:"type"`
}

// NewInstrumentId instantiates a new InstrumentId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstrumentId(id interface{}, type_ InstrumentType) *InstrumentId {
	this := InstrumentId{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewInstrumentIdWithDefaults instantiates a new InstrumentId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstrumentIdWithDefaults() *InstrumentId {
	this := InstrumentId{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *InstrumentId) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstrumentId) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstrumentId) SetId(v interface{}) {
	o.Id = v
}

// GetType returns the Type field value
func (o *InstrumentId) GetType() InstrumentType {
	if o == nil {
		var ret InstrumentType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InstrumentId) GetTypeOk() (*InstrumentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InstrumentId) SetType(v InstrumentType) {
	o.Type = v
}

func (o InstrumentId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstrumentId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableInstrumentId struct {
	value *InstrumentId
	isSet bool
}

func (v NullableInstrumentId) Get() *InstrumentId {
	return v.value
}

func (v *NullableInstrumentId) Set(val *InstrumentId) {
	v.value = val
	v.isSet = true
}

func (v NullableInstrumentId) IsSet() bool {
	return v.isSet
}

func (v *NullableInstrumentId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstrumentId(val *InstrumentId) *NullableInstrumentId {
	return &NullableInstrumentId{value: val, isSet: true}
}

func (v NullableInstrumentId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstrumentId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


