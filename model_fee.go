/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the Fee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Fee{}

// Fee struct for Fee
type Fee struct {
	// The fee type as defined in the Multi Portal.
	FeeType interface{} `json:"feeType"`
	// The instrument from where the fee should be deducted.
	Source InstrumentId `json:"source"`
}

// NewFee instantiates a new Fee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFee(feeType interface{}, source InstrumentId) *Fee {
	this := Fee{}
	this.FeeType = feeType
	this.Source = source
	return &this
}

// NewFeeWithDefaults instantiates a new Fee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeeWithDefaults() *Fee {
	this := Fee{}
	return &this
}

// GetFeeType returns the FeeType field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Fee) GetFeeType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Fee) GetFeeTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FeeType) {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *Fee) SetFeeType(v interface{}) {
	o.FeeType = v
}

// GetSource returns the Source field value
func (o *Fee) GetSource() InstrumentId {
	if o == nil {
		var ret InstrumentId
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Fee) GetSourceOk() (*InstrumentId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Fee) SetSource(v InstrumentId) {
	o.Source = v
}

func (o Fee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Fee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FeeType != nil {
		toSerialize["feeType"] = o.FeeType
	}
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

type NullableFee struct {
	value *Fee
	isSet bool
}

func (v NullableFee) Get() *Fee {
	return v.value
}

func (v *NullableFee) Set(val *Fee) {
	v.value = val
	v.isSet = true
}

func (v NullableFee) IsSet() bool {
	return v.isSet
}

func (v *NullableFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFee(val *Fee) *NullableFee {
	return &NullableFee{value: val, isSet: true}
}

func (v NullableFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


