/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the CorporateRootUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorporateRootUser{}

// CorporateRootUser struct for CorporateRootUser
type CorporateRootUser struct {
	Id IdentityId `json:"id"`
	// First name of the root user.
	Name interface{} `json:"name"`
	// Last name of the root user.
	Surname interface{} `json:"surname"`
	// E-mail Address of the user
	Email interface{} `json:"email"`
	Mobile Mobile `json:"mobile"`
	CompanyPosition CompanyPosition `json:"companyPosition"`
	// The state of the root user. If false, then the user will not be able to log in.
	Active interface{} `json:"active"`
	// Indicates if the root user's email has been verified.
	EmailVerified interface{} `json:"emailVerified"`
	// Indicates if the root user's mobile number has been verified.
	MobileNumberVerified interface{} `json:"mobileNumberVerified"`
	// Date of birth of the authorised user.
	DateOfBirth *Date `json:"dateOfBirth,omitempty"`
}

// NewCorporateRootUser instantiates a new CorporateRootUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporateRootUser(id IdentityId, name interface{}, surname interface{}, email interface{}, mobile Mobile, companyPosition CompanyPosition, active interface{}, emailVerified interface{}, mobileNumberVerified interface{}) *CorporateRootUser {
	this := CorporateRootUser{}
	this.Id = id
	this.Name = name
	this.Surname = surname
	this.Email = email
	this.Mobile = mobile
	this.CompanyPosition = companyPosition
	this.Active = active
	this.EmailVerified = emailVerified
	this.MobileNumberVerified = mobileNumberVerified
	return &this
}

// NewCorporateRootUserWithDefaults instantiates a new CorporateRootUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporateRootUserWithDefaults() *CorporateRootUser {
	this := CorporateRootUser{}
	return &this
}

// GetId returns the Id field value
func (o *CorporateRootUser) GetId() IdentityId {
	if o == nil {
		var ret IdentityId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CorporateRootUser) GetIdOk() (*IdentityId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CorporateRootUser) SetId(v IdentityId) {
	o.Id = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateRootUser) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateRootUser) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CorporateRootUser) SetName(v interface{}) {
	o.Name = v
}

// GetSurname returns the Surname field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateRootUser) GetSurname() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateRootUser) GetSurnameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return &o.Surname, true
}

// SetSurname sets field value
func (o *CorporateRootUser) SetSurname(v interface{}) {
	o.Surname = v
}

// GetEmail returns the Email field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateRootUser) GetEmail() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateRootUser) GetEmailOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CorporateRootUser) SetEmail(v interface{}) {
	o.Email = v
}

// GetMobile returns the Mobile field value
func (o *CorporateRootUser) GetMobile() Mobile {
	if o == nil {
		var ret Mobile
		return ret
	}

	return o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value
// and a boolean to check if the value has been set.
func (o *CorporateRootUser) GetMobileOk() (*Mobile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mobile, true
}

// SetMobile sets field value
func (o *CorporateRootUser) SetMobile(v Mobile) {
	o.Mobile = v
}

// GetCompanyPosition returns the CompanyPosition field value
func (o *CorporateRootUser) GetCompanyPosition() CompanyPosition {
	if o == nil {
		var ret CompanyPosition
		return ret
	}

	return o.CompanyPosition
}

// GetCompanyPositionOk returns a tuple with the CompanyPosition field value
// and a boolean to check if the value has been set.
func (o *CorporateRootUser) GetCompanyPositionOk() (*CompanyPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyPosition, true
}

// SetCompanyPosition sets field value
func (o *CorporateRootUser) SetCompanyPosition(v CompanyPosition) {
	o.CompanyPosition = v
}

// GetActive returns the Active field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateRootUser) GetActive() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateRootUser) GetActiveOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *CorporateRootUser) SetActive(v interface{}) {
	o.Active = v
}

// GetEmailVerified returns the EmailVerified field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateRootUser) GetEmailVerified() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateRootUser) GetEmailVerifiedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return &o.EmailVerified, true
}

// SetEmailVerified sets field value
func (o *CorporateRootUser) SetEmailVerified(v interface{}) {
	o.EmailVerified = v
}

// GetMobileNumberVerified returns the MobileNumberVerified field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CorporateRootUser) GetMobileNumberVerified() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.MobileNumberVerified
}

// GetMobileNumberVerifiedOk returns a tuple with the MobileNumberVerified field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CorporateRootUser) GetMobileNumberVerifiedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MobileNumberVerified) {
		return nil, false
	}
	return &o.MobileNumberVerified, true
}

// SetMobileNumberVerified sets field value
func (o *CorporateRootUser) SetMobileNumberVerified(v interface{}) {
	o.MobileNumberVerified = v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *CorporateRootUser) GetDateOfBirth() Date {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret Date
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorporateRootUser) GetDateOfBirthOk() (*Date, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *CorporateRootUser) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given Date and assigns it to the DateOfBirth field.
func (o *CorporateRootUser) SetDateOfBirth(v Date) {
	o.DateOfBirth = &v
}

func (o CorporateRootUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorporateRootUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Surname != nil {
		toSerialize["surname"] = o.Surname
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	toSerialize["mobile"] = o.Mobile
	toSerialize["companyPosition"] = o.CompanyPosition
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.EmailVerified != nil {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if o.MobileNumberVerified != nil {
		toSerialize["mobileNumberVerified"] = o.MobileNumberVerified
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	return toSerialize, nil
}

type NullableCorporateRootUser struct {
	value *CorporateRootUser
	isSet bool
}

func (v NullableCorporateRootUser) Get() *CorporateRootUser {
	return v.value
}

func (v *NullableCorporateRootUser) Set(val *CorporateRootUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporateRootUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporateRootUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporateRootUser(val *CorporateRootUser) *NullableCorporateRootUser {
	return &NullableCorporateRootUser{value: val, isSet: true}
}

func (v NullableCorporateRootUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporateRootUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


