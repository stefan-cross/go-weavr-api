/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the PasswordInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordInfo{}

// PasswordInfo Additional information related to the user's password.
type PasswordInfo struct {
	// The identity to which the user's password information belongs to.
	IdentityId IdentityId `json:"identityId"`
	// The millisecond timestamp indicating when the password will expire. If 0, then this password will not expire.
	ExpiryDate interface{} `json:"expiryDate,omitempty"`
}

// NewPasswordInfo instantiates a new PasswordInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordInfo(identityId IdentityId) *PasswordInfo {
	this := PasswordInfo{}
	this.IdentityId = identityId
	return &this
}

// NewPasswordInfoWithDefaults instantiates a new PasswordInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordInfoWithDefaults() *PasswordInfo {
	this := PasswordInfo{}
	return &this
}

// GetIdentityId returns the IdentityId field value
func (o *PasswordInfo) GetIdentityId() IdentityId {
	if o == nil {
		var ret IdentityId
		return ret
	}

	return o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value
// and a boolean to check if the value has been set.
func (o *PasswordInfo) GetIdentityIdOk() (*IdentityId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityId, true
}

// SetIdentityId sets field value
func (o *PasswordInfo) SetIdentityId(v IdentityId) {
	o.IdentityId = v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PasswordInfo) GetExpiryDate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PasswordInfo) GetExpiryDateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return &o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *PasswordInfo) HasExpiryDate() bool {
	if o != nil && IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given interface{} and assigns it to the ExpiryDate field.
func (o *PasswordInfo) SetExpiryDate(v interface{}) {
	o.ExpiryDate = v
}

func (o PasswordInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityId"] = o.IdentityId
	if o.ExpiryDate != nil {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	return toSerialize, nil
}

type NullablePasswordInfo struct {
	value *PasswordInfo
	isSet bool
}

func (v NullablePasswordInfo) Get() *PasswordInfo {
	return v.value
}

func (v *NullablePasswordInfo) Set(val *PasswordInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordInfo(val *PasswordInfo) *NullablePasswordInfo {
	return &NullablePasswordInfo{value: val, isSet: true}
}

func (v NullablePasswordInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


