/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the Corporate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Corporate{}

// Corporate struct for Corporate
type Corporate struct {
	// The unique identifier of the Corporate Identity.
	Id IdentityId `json:"id"`
	// The profile Id which a specific identity, instrument or transaction type is linked to.  Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.  You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.  Profile Ids can be found in the Multi Portal, in the API Credentials page. 
	ProfileId interface{} `json:"profileId"`
	// The tag field is a custom field that can be used to search and filter.
	Tag interface{} `json:"tag,omitempty"`
	// The root user of the Corporate Identity.
	RootUser CorporateRootUser `json:"rootUser"`
	Company CorporateCompany `json:"company"`
	// Deprecated
	Industry *Industry `json:"industry,omitempty"`
	// Deprecated
	SourceOfFunds *CorporateSourceOfFunds `json:"sourceOfFunds,omitempty"`
	// Description of source of funds in case `OTHER` was chosen.
	// Deprecated
	SourceOfFundsOther interface{} `json:"sourceOfFundsOther,omitempty"`
	// Must be set to *true* to indicate that the root user has accepted the terms and conditions.
	AcceptedTerms interface{} `json:"acceptedTerms"`
	// The IP address of the user doing the registration.
	IpAddress interface{} `json:"ipAddress"`
	// The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.
	BaseCurrency interface{} `json:"baseCurrency"`
	// Fee groups allow the possibility to charge different fees to users under the same profile. If fee groups are not required, ignore this field.
	FeeGroup interface{} `json:"feeGroup,omitempty"`
	// The time when the Corporate was created, expressed in Epoch timestamp using millisecond precision.
	CreationTimestamp interface{} `json:"creationTimestamp"`
}

// NewCorporate instantiates a new Corporate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorporate(id IdentityId, profileId interface{}, rootUser CorporateRootUser, company CorporateCompany, acceptedTerms interface{}, ipAddress interface{}, baseCurrency interface{}, creationTimestamp interface{}) *Corporate {
	this := Corporate{}
	this.Id = id
	this.ProfileId = profileId
	this.RootUser = rootUser
	this.Company = company
	this.AcceptedTerms = acceptedTerms
	this.IpAddress = ipAddress
	this.BaseCurrency = baseCurrency
	this.CreationTimestamp = creationTimestamp
	return &this
}

// NewCorporateWithDefaults instantiates a new Corporate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorporateWithDefaults() *Corporate {
	this := Corporate{}
	return &this
}

// GetId returns the Id field value
func (o *Corporate) GetId() IdentityId {
	if o == nil {
		var ret IdentityId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Corporate) GetIdOk() (*IdentityId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Corporate) SetId(v IdentityId) {
	o.Id = v
}

// GetProfileId returns the ProfileId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Corporate) GetProfileId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetProfileIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *Corporate) SetProfileId(v interface{}) {
	o.ProfileId = v
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Corporate) GetTag() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetTagOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return &o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Corporate) HasTag() bool {
	if o != nil && IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given interface{} and assigns it to the Tag field.
func (o *Corporate) SetTag(v interface{}) {
	o.Tag = v
}

// GetRootUser returns the RootUser field value
func (o *Corporate) GetRootUser() CorporateRootUser {
	if o == nil {
		var ret CorporateRootUser
		return ret
	}

	return o.RootUser
}

// GetRootUserOk returns a tuple with the RootUser field value
// and a boolean to check if the value has been set.
func (o *Corporate) GetRootUserOk() (*CorporateRootUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootUser, true
}

// SetRootUser sets field value
func (o *Corporate) SetRootUser(v CorporateRootUser) {
	o.RootUser = v
}

// GetCompany returns the Company field value
func (o *Corporate) GetCompany() CorporateCompany {
	if o == nil {
		var ret CorporateCompany
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Corporate) GetCompanyOk() (*CorporateCompany, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Corporate) SetCompany(v CorporateCompany) {
	o.Company = v
}

// GetIndustry returns the Industry field value if set, zero value otherwise.
// Deprecated
func (o *Corporate) GetIndustry() Industry {
	if o == nil || IsNil(o.Industry) {
		var ret Industry
		return ret
	}
	return *o.Industry
}

// GetIndustryOk returns a tuple with the Industry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Corporate) GetIndustryOk() (*Industry, bool) {
	if o == nil || IsNil(o.Industry) {
		return nil, false
	}
	return o.Industry, true
}

// HasIndustry returns a boolean if a field has been set.
func (o *Corporate) HasIndustry() bool {
	if o != nil && !IsNil(o.Industry) {
		return true
	}

	return false
}

// SetIndustry gets a reference to the given Industry and assigns it to the Industry field.
// Deprecated
func (o *Corporate) SetIndustry(v Industry) {
	o.Industry = &v
}

// GetSourceOfFunds returns the SourceOfFunds field value if set, zero value otherwise.
// Deprecated
func (o *Corporate) GetSourceOfFunds() CorporateSourceOfFunds {
	if o == nil || IsNil(o.SourceOfFunds) {
		var ret CorporateSourceOfFunds
		return ret
	}
	return *o.SourceOfFunds
}

// GetSourceOfFundsOk returns a tuple with the SourceOfFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Corporate) GetSourceOfFundsOk() (*CorporateSourceOfFunds, bool) {
	if o == nil || IsNil(o.SourceOfFunds) {
		return nil, false
	}
	return o.SourceOfFunds, true
}

// HasSourceOfFunds returns a boolean if a field has been set.
func (o *Corporate) HasSourceOfFunds() bool {
	if o != nil && !IsNil(o.SourceOfFunds) {
		return true
	}

	return false
}

// SetSourceOfFunds gets a reference to the given CorporateSourceOfFunds and assigns it to the SourceOfFunds field.
// Deprecated
func (o *Corporate) SetSourceOfFunds(v CorporateSourceOfFunds) {
	o.SourceOfFunds = &v
}

// GetSourceOfFundsOther returns the SourceOfFundsOther field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Corporate) GetSourceOfFundsOther() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SourceOfFundsOther
}

// GetSourceOfFundsOtherOk returns a tuple with the SourceOfFundsOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Corporate) GetSourceOfFundsOtherOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SourceOfFundsOther) {
		return nil, false
	}
	return &o.SourceOfFundsOther, true
}

// HasSourceOfFundsOther returns a boolean if a field has been set.
func (o *Corporate) HasSourceOfFundsOther() bool {
	if o != nil && IsNil(o.SourceOfFundsOther) {
		return true
	}

	return false
}

// SetSourceOfFundsOther gets a reference to the given interface{} and assigns it to the SourceOfFundsOther field.
// Deprecated
func (o *Corporate) SetSourceOfFundsOther(v interface{}) {
	o.SourceOfFundsOther = v
}

// GetAcceptedTerms returns the AcceptedTerms field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Corporate) GetAcceptedTerms() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.AcceptedTerms
}

// GetAcceptedTermsOk returns a tuple with the AcceptedTerms field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetAcceptedTermsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AcceptedTerms) {
		return nil, false
	}
	return &o.AcceptedTerms, true
}

// SetAcceptedTerms sets field value
func (o *Corporate) SetAcceptedTerms(v interface{}) {
	o.AcceptedTerms = v
}

// GetIpAddress returns the IpAddress field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Corporate) GetIpAddress() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetIpAddressOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *Corporate) SetIpAddress(v interface{}) {
	o.IpAddress = v
}

// GetBaseCurrency returns the BaseCurrency field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Corporate) GetBaseCurrency() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetBaseCurrencyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BaseCurrency) {
		return nil, false
	}
	return &o.BaseCurrency, true
}

// SetBaseCurrency sets field value
func (o *Corporate) SetBaseCurrency(v interface{}) {
	o.BaseCurrency = v
}

// GetFeeGroup returns the FeeGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Corporate) GetFeeGroup() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FeeGroup
}

// GetFeeGroupOk returns a tuple with the FeeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetFeeGroupOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FeeGroup) {
		return nil, false
	}
	return &o.FeeGroup, true
}

// HasFeeGroup returns a boolean if a field has been set.
func (o *Corporate) HasFeeGroup() bool {
	if o != nil && IsNil(o.FeeGroup) {
		return true
	}

	return false
}

// SetFeeGroup gets a reference to the given interface{} and assigns it to the FeeGroup field.
func (o *Corporate) SetFeeGroup(v interface{}) {
	o.FeeGroup = v
}

// GetCreationTimestamp returns the CreationTimestamp field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Corporate) GetCreationTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Corporate) GetCreationTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return &o.CreationTimestamp, true
}

// SetCreationTimestamp sets field value
func (o *Corporate) SetCreationTimestamp(v interface{}) {
	o.CreationTimestamp = v
}

func (o Corporate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Corporate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.ProfileId != nil {
		toSerialize["profileId"] = o.ProfileId
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["rootUser"] = o.RootUser
	toSerialize["company"] = o.Company
	if !IsNil(o.Industry) {
		toSerialize["industry"] = o.Industry
	}
	if !IsNil(o.SourceOfFunds) {
		toSerialize["sourceOfFunds"] = o.SourceOfFunds
	}
	if o.SourceOfFundsOther != nil {
		toSerialize["sourceOfFundsOther"] = o.SourceOfFundsOther
	}
	if o.AcceptedTerms != nil {
		toSerialize["acceptedTerms"] = o.AcceptedTerms
	}
	if o.IpAddress != nil {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if o.BaseCurrency != nil {
		toSerialize["baseCurrency"] = o.BaseCurrency
	}
	if o.FeeGroup != nil {
		toSerialize["feeGroup"] = o.FeeGroup
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	return toSerialize, nil
}

type NullableCorporate struct {
	value *Corporate
	isSet bool
}

func (v NullableCorporate) Get() *Corporate {
	return v.value
}

func (v *NullableCorporate) Set(val *Corporate) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporate) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporate(val *Corporate) *NullableCorporate {
	return &NullableCorporate{value: val, isSet: true}
}

func (v NullableCorporate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


