/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SwiftBankDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwiftBankDetails{}

// SwiftBankDetails Bank details used in case the wire transfer is executed over SWIFT.
type SwiftBankDetails struct {
	// International Bank Account Number, required for wire transfer over SWIFT.
	Iban interface{} `json:"iban"`
	// SWIFT code, identifying a particular bank or branch, required for wire transfer over SWIFT.
	Code interface{} `json:"code"`
}

// NewSwiftBankDetails instantiates a new SwiftBankDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwiftBankDetails(iban interface{}, code interface{}) *SwiftBankDetails {
	this := SwiftBankDetails{}
	this.Iban = iban
	this.Code = code
	return &this
}

// NewSwiftBankDetailsWithDefaults instantiates a new SwiftBankDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwiftBankDetailsWithDefaults() *SwiftBankDetails {
	this := SwiftBankDetails{}
	return &this
}

// GetIban returns the Iban field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SwiftBankDetails) GetIban() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Iban
}

// GetIbanOk returns a tuple with the Iban field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwiftBankDetails) GetIbanOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Iban) {
		return nil, false
	}
	return &o.Iban, true
}

// SetIban sets field value
func (o *SwiftBankDetails) SetIban(v interface{}) {
	o.Iban = v
}

// GetCode returns the Code field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SwiftBankDetails) GetCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwiftBankDetails) GetCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *SwiftBankDetails) SetCode(v interface{}) {
	o.Code = v
}

func (o SwiftBankDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwiftBankDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Iban != nil {
		toSerialize["iban"] = o.Iban
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableSwiftBankDetails struct {
	value *SwiftBankDetails
	isSet bool
}

func (v NullableSwiftBankDetails) Get() *SwiftBankDetails {
	return v.value
}

func (v *NullableSwiftBankDetails) Set(val *SwiftBankDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSwiftBankDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSwiftBankDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwiftBankDetails(val *SwiftBankDetails) *NullableSwiftBankDetails {
	return &NullableSwiftBankDetails{value: val, isSet: true}
}

func (v NullableSwiftBankDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwiftBankDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


