/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ScaledAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScaledAmount{}

// ScaledAmount A floating point number, represented as a value and its scale. Its actual value can be obtained using the equation: value * pow(10, -scale).
type ScaledAmount struct {
	Value interface{} `json:"value,omitempty"`
	Scale interface{} `json:"scale,omitempty"`
}

// NewScaledAmount instantiates a new ScaledAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScaledAmount() *ScaledAmount {
	this := ScaledAmount{}
	return &this
}

// NewScaledAmountWithDefaults instantiates a new ScaledAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScaledAmountWithDefaults() *ScaledAmount {
	this := ScaledAmount{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScaledAmount) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScaledAmount) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ScaledAmount) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *ScaledAmount) SetValue(v interface{}) {
	o.Value = v
}

// GetScale returns the Scale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScaledAmount) GetScale() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScaledAmount) GetScaleOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Scale) {
		return nil, false
	}
	return &o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *ScaledAmount) HasScale() bool {
	if o != nil && IsNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given interface{} and assigns it to the Scale field.
func (o *ScaledAmount) SetScale(v interface{}) {
	o.Scale = v
}

func (o ScaledAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScaledAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Scale != nil {
		toSerialize["scale"] = o.Scale
	}
	return toSerialize, nil
}

type NullableScaledAmount struct {
	value *ScaledAmount
	isSet bool
}

func (v NullableScaledAmount) Get() *ScaledAmount {
	return v.value
}

func (v *NullableScaledAmount) Set(val *ScaledAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableScaledAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableScaledAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScaledAmount(val *ScaledAmount) *NullableScaledAmount {
	return &NullableScaledAmount{value: val, isSet: true}
}

func (v NullableScaledAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScaledAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


