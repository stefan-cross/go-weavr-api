/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SpendLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendLimit{}

// SpendLimit struct for SpendLimit
type SpendLimit struct {
	// The spend limit, as amount and currency, (for the given interval).
	Value CurrencyAmount `json:"value"`
	Interval SpendLimitInterval `json:"interval"`
}

// NewSpendLimit instantiates a new SpendLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendLimit(value CurrencyAmount, interval SpendLimitInterval) *SpendLimit {
	this := SpendLimit{}
	this.Value = value
	this.Interval = interval
	return &this
}

// NewSpendLimitWithDefaults instantiates a new SpendLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendLimitWithDefaults() *SpendLimit {
	this := SpendLimit{}
	return &this
}

// GetValue returns the Value field value
func (o *SpendLimit) GetValue() CurrencyAmount {
	if o == nil {
		var ret CurrencyAmount
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SpendLimit) GetValueOk() (*CurrencyAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SpendLimit) SetValue(v CurrencyAmount) {
	o.Value = v
}

// GetInterval returns the Interval field value
func (o *SpendLimit) GetInterval() SpendLimitInterval {
	if o == nil {
		var ret SpendLimitInterval
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *SpendLimit) GetIntervalOk() (*SpendLimitInterval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *SpendLimit) SetInterval(v SpendLimitInterval) {
	o.Interval = v
}

func (o SpendLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["interval"] = o.Interval
	return toSerialize, nil
}

type NullableSpendLimit struct {
	value *SpendLimit
	isSet bool
}

func (v NullableSpendLimit) Get() *SpendLimit {
	return v.value
}

func (v *NullableSpendLimit) Set(val *SpendLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendLimit(val *SpendLimit) *NullableSpendLimit {
	return &NullableSpendLimit{value: val, isSet: true}
}

func (v NullableSpendLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


