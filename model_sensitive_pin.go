/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SensitivePin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensitivePin{}

// SensitivePin The PIN used for in-person transactions done with physical cards.  Unless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's PIN will be tokenised.  To show the PIN to your user, you need to embed the Display Card PIN UI Component in your application. This accepts the tokenised PIN and shows the plain text PIN to the user on screen. 
type SensitivePin struct {
	Value interface{} `json:"value"`
}

// NewSensitivePin instantiates a new SensitivePin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensitivePin(value interface{}) *SensitivePin {
	this := SensitivePin{}
	this.Value = value
	return &this
}

// NewSensitivePinWithDefaults instantiates a new SensitivePin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensitivePinWithDefaults() *SensitivePin {
	this := SensitivePin{}
	return &this
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SensitivePin) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SensitivePin) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SensitivePin) SetValue(v interface{}) {
	o.Value = v
}

func (o SensitivePin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensitivePin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSensitivePin struct {
	value *SensitivePin
	isSet bool
}

func (v NullableSensitivePin) Get() *SensitivePin {
	return v.value
}

func (v *NullableSensitivePin) Set(val *SensitivePin) {
	v.value = val
	v.isSet = true
}

func (v NullableSensitivePin) IsSet() bool {
	return v.isSet
}

func (v *NullableSensitivePin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensitivePin(val *SensitivePin) *NullableSensitivePin {
	return &NullableSensitivePin{value: val, isSet: true}
}

func (v NullableSensitivePin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensitivePin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


