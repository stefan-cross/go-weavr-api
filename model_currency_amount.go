/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the CurrencyAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyAmount{}

// CurrencyAmount The object representing a monetary amount in a particular currency.
type CurrencyAmount struct {
	// The currency expressed in ISO-4217 code. Example: GBP, EUR, USD.
	Currency interface{} `json:"currency"`
	// The monetary amount, scaled to the lowest denomination of the currency.  Example, an amount of 1000 for a EUR currency is actually 1000 Euro cents or EUR 10.00. 
	Amount interface{} `json:"amount"`
}

// NewCurrencyAmount instantiates a new CurrencyAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyAmount(currency interface{}, amount interface{}) *CurrencyAmount {
	this := CurrencyAmount{}
	this.Currency = currency
	this.Amount = amount
	return &this
}

// NewCurrencyAmountWithDefaults instantiates a new CurrencyAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyAmountWithDefaults() *CurrencyAmount {
	this := CurrencyAmount{}
	return &this
}

// GetCurrency returns the Currency field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CurrencyAmount) GetCurrency() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyAmount) GetCurrencyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CurrencyAmount) SetCurrency(v interface{}) {
	o.Currency = v
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CurrencyAmount) GetAmount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyAmount) GetAmountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CurrencyAmount) SetAmount(v interface{}) {
	o.Amount = v
}

func (o CurrencyAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return toSerialize, nil
}

type NullableCurrencyAmount struct {
	value *CurrencyAmount
	isSet bool
}

func (v NullableCurrencyAmount) Get() *CurrencyAmount {
	return v.value
}

func (v *NullableCurrencyAmount) Set(val *CurrencyAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyAmount(val *CurrencyAmount) *NullableCurrencyAmount {
	return &NullableCurrencyAmount{value: val, isSet: true}
}

func (v NullableCurrencyAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


