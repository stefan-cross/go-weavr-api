/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the Statement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Statement{}

// Statement The list of statement entries.
type Statement struct {
	Entry interface{} `json:"entry,omitempty"`
	// The total number of records (excluding the paging limit).
	Count interface{} `json:"count,omitempty"`
	// The total number of records returned in this response.
	ResponseCount interface{} `json:"responseCount,omitempty"`
}

// NewStatement instantiates a new Statement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatement() *Statement {
	this := Statement{}
	return &this
}

// NewStatementWithDefaults instantiates a new Statement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementWithDefaults() *Statement {
	this := Statement{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetEntry() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetEntryOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return &o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *Statement) HasEntry() bool {
	if o != nil && IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given interface{} and assigns it to the Entry field.
func (o *Statement) SetEntry(v interface{}) {
	o.Entry = v
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetCount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetCountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return &o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Statement) HasCount() bool {
	if o != nil && IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given interface{} and assigns it to the Count field.
func (o *Statement) SetCount(v interface{}) {
	o.Count = v
}

// GetResponseCount returns the ResponseCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetResponseCount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ResponseCount
}

// GetResponseCountOk returns a tuple with the ResponseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetResponseCountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ResponseCount) {
		return nil, false
	}
	return &o.ResponseCount, true
}

// HasResponseCount returns a boolean if a field has been set.
func (o *Statement) HasResponseCount() bool {
	if o != nil && IsNil(o.ResponseCount) {
		return true
	}

	return false
}

// SetResponseCount gets a reference to the given interface{} and assigns it to the ResponseCount field.
func (o *Statement) SetResponseCount(v interface{}) {
	o.ResponseCount = v
}

func (o Statement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Statement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Entry != nil {
		toSerialize["entry"] = o.Entry
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.ResponseCount != nil {
		toSerialize["responseCount"] = o.ResponseCount
	}
	return toSerialize, nil
}

type NullableStatement struct {
	value *Statement
	isSet bool
}

func (v NullableStatement) Get() *Statement {
	return v.value
}

func (v *NullableStatement) Set(val *Statement) {
	v.value = val
	v.isSet = true
}

func (v NullableStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatement(val *Statement) *NullableStatement {
	return &NullableStatement{value: val, isSet: true}
}

func (v NullableStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


