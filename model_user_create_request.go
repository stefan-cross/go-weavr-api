/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the UserCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCreateRequest{}

// UserCreateRequest struct for UserCreateRequest
type UserCreateRequest struct {
	// The first name of the user.
	Name interface{} `json:"name"`
	// The last name of the user.
	Surname interface{} `json:"surname"`
	// E-mail Address of the user
	Email interface{} `json:"email"`
	Mobile *Mobile `json:"mobile,omitempty"`
	// Date of birth of the authorised user.
	DateOfBirth *Date `json:"dateOfBirth,omitempty"`
}

// NewUserCreateRequest instantiates a new UserCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreateRequest(name interface{}, surname interface{}, email interface{}) *UserCreateRequest {
	this := UserCreateRequest{}
	this.Name = name
	this.Surname = surname
	this.Email = email
	return &this
}

// NewUserCreateRequestWithDefaults instantiates a new UserCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreateRequestWithDefaults() *UserCreateRequest {
	this := UserCreateRequest{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UserCreateRequest) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserCreateRequest) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserCreateRequest) SetName(v interface{}) {
	o.Name = v
}

// GetSurname returns the Surname field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UserCreateRequest) GetSurname() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserCreateRequest) GetSurnameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return &o.Surname, true
}

// SetSurname sets field value
func (o *UserCreateRequest) SetSurname(v interface{}) {
	o.Surname = v
}

// GetEmail returns the Email field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *UserCreateRequest) GetEmail() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserCreateRequest) GetEmailOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserCreateRequest) SetEmail(v interface{}) {
	o.Email = v
}

// GetMobile returns the Mobile field value if set, zero value otherwise.
func (o *UserCreateRequest) GetMobile() Mobile {
	if o == nil || IsNil(o.Mobile) {
		var ret Mobile
		return ret
	}
	return *o.Mobile
}

// GetMobileOk returns a tuple with the Mobile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateRequest) GetMobileOk() (*Mobile, bool) {
	if o == nil || IsNil(o.Mobile) {
		return nil, false
	}
	return o.Mobile, true
}

// HasMobile returns a boolean if a field has been set.
func (o *UserCreateRequest) HasMobile() bool {
	if o != nil && !IsNil(o.Mobile) {
		return true
	}

	return false
}

// SetMobile gets a reference to the given Mobile and assigns it to the Mobile field.
func (o *UserCreateRequest) SetMobile(v Mobile) {
	o.Mobile = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *UserCreateRequest) GetDateOfBirth() Date {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret Date
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreateRequest) GetDateOfBirthOk() (*Date, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *UserCreateRequest) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given Date and assigns it to the DateOfBirth field.
func (o *UserCreateRequest) SetDateOfBirth(v Date) {
	o.DateOfBirth = &v
}

func (o UserCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Surname != nil {
		toSerialize["surname"] = o.Surname
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Mobile) {
		toSerialize["mobile"] = o.Mobile
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	return toSerialize, nil
}

type NullableUserCreateRequest struct {
	value *UserCreateRequest
	isSet bool
}

func (v NullableUserCreateRequest) Get() *UserCreateRequest {
	return v.value
}

func (v *NullableUserCreateRequest) Set(val *UserCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreateRequest(val *UserCreateRequest) *NullableUserCreateRequest {
	return &NullableUserCreateRequest{value: val, isSet: true}
}

func (v NullableUserCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


