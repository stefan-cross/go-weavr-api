/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SyntaxError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyntaxError{}

// SyntaxError Is returned as part of an HTTP error response whenever a syntax error is detected. A list of the fields together with their syntax error will be provided.
type SyntaxError struct {
	InvalidFields interface{} `json:"invalidFields,omitempty"`
}

// NewSyntaxError instantiates a new SyntaxError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntaxError() *SyntaxError {
	this := SyntaxError{}
	return &this
}

// NewSyntaxErrorWithDefaults instantiates a new SyntaxError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntaxErrorWithDefaults() *SyntaxError {
	this := SyntaxError{}
	return &this
}

// GetInvalidFields returns the InvalidFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyntaxError) GetInvalidFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.InvalidFields
}

// GetInvalidFieldsOk returns a tuple with the InvalidFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyntaxError) GetInvalidFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.InvalidFields) {
		return nil, false
	}
	return &o.InvalidFields, true
}

// HasInvalidFields returns a boolean if a field has been set.
func (o *SyntaxError) HasInvalidFields() bool {
	if o != nil && IsNil(o.InvalidFields) {
		return true
	}

	return false
}

// SetInvalidFields gets a reference to the given interface{} and assigns it to the InvalidFields field.
func (o *SyntaxError) SetInvalidFields(v interface{}) {
	o.InvalidFields = v
}

func (o SyntaxError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyntaxError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InvalidFields != nil {
		toSerialize["invalidFields"] = o.InvalidFields
	}
	return toSerialize, nil
}

type NullableSyntaxError struct {
	value *SyntaxError
	isSet bool
}

func (v NullableSyntaxError) Get() *SyntaxError {
	return v.value
}

func (v *NullableSyntaxError) Set(val *SyntaxError) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntaxError) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntaxError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntaxError(val *SyntaxError) *NullableSyntaxError {
	return &NullableSyntaxError{value: val, isSet: true}
}

func (v NullableSyntaxError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntaxError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


