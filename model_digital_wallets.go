/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the DigitalWallets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DigitalWallets{}

// DigitalWallets struct for DigitalWallets
type DigitalWallets struct {
	// Indicates whether the card is enabled for push provisioning in a digital wallet.
	PushProvisioningEnabled interface{} `json:"pushProvisioningEnabled,omitempty"`
	// Indicates whether the card is enabled for tokenisation in a digital wallet.
	WalletsEnabled interface{} `json:"walletsEnabled,omitempty"`
	// The artwork reference that will be used if the card is enabled for tokenisation in a digital wallet.
	ArtworkReference interface{} `json:"artworkReference,omitempty"`
}

// NewDigitalWallets instantiates a new DigitalWallets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWallets() *DigitalWallets {
	this := DigitalWallets{}
	return &this
}

// NewDigitalWalletsWithDefaults instantiates a new DigitalWallets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletsWithDefaults() *DigitalWallets {
	this := DigitalWallets{}
	return &this
}

// GetPushProvisioningEnabled returns the PushProvisioningEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWallets) GetPushProvisioningEnabled() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PushProvisioningEnabled
}

// GetPushProvisioningEnabledOk returns a tuple with the PushProvisioningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWallets) GetPushProvisioningEnabledOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PushProvisioningEnabled) {
		return nil, false
	}
	return &o.PushProvisioningEnabled, true
}

// HasPushProvisioningEnabled returns a boolean if a field has been set.
func (o *DigitalWallets) HasPushProvisioningEnabled() bool {
	if o != nil && IsNil(o.PushProvisioningEnabled) {
		return true
	}

	return false
}

// SetPushProvisioningEnabled gets a reference to the given interface{} and assigns it to the PushProvisioningEnabled field.
func (o *DigitalWallets) SetPushProvisioningEnabled(v interface{}) {
	o.PushProvisioningEnabled = v
}

// GetWalletsEnabled returns the WalletsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWallets) GetWalletsEnabled() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.WalletsEnabled
}

// GetWalletsEnabledOk returns a tuple with the WalletsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWallets) GetWalletsEnabledOk() (*interface{}, bool) {
	if o == nil || IsNil(o.WalletsEnabled) {
		return nil, false
	}
	return &o.WalletsEnabled, true
}

// HasWalletsEnabled returns a boolean if a field has been set.
func (o *DigitalWallets) HasWalletsEnabled() bool {
	if o != nil && IsNil(o.WalletsEnabled) {
		return true
	}

	return false
}

// SetWalletsEnabled gets a reference to the given interface{} and assigns it to the WalletsEnabled field.
func (o *DigitalWallets) SetWalletsEnabled(v interface{}) {
	o.WalletsEnabled = v
}

// GetArtworkReference returns the ArtworkReference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWallets) GetArtworkReference() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ArtworkReference
}

// GetArtworkReferenceOk returns a tuple with the ArtworkReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWallets) GetArtworkReferenceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ArtworkReference) {
		return nil, false
	}
	return &o.ArtworkReference, true
}

// HasArtworkReference returns a boolean if a field has been set.
func (o *DigitalWallets) HasArtworkReference() bool {
	if o != nil && IsNil(o.ArtworkReference) {
		return true
	}

	return false
}

// SetArtworkReference gets a reference to the given interface{} and assigns it to the ArtworkReference field.
func (o *DigitalWallets) SetArtworkReference(v interface{}) {
	o.ArtworkReference = v
}

func (o DigitalWallets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DigitalWallets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PushProvisioningEnabled != nil {
		toSerialize["pushProvisioningEnabled"] = o.PushProvisioningEnabled
	}
	if o.WalletsEnabled != nil {
		toSerialize["walletsEnabled"] = o.WalletsEnabled
	}
	if o.ArtworkReference != nil {
		toSerialize["artworkReference"] = o.ArtworkReference
	}
	return toSerialize, nil
}

type NullableDigitalWallets struct {
	value *DigitalWallets
	isSet bool
}

func (v NullableDigitalWallets) Get() *DigitalWallets {
	return v.value
}

func (v *NullableDigitalWallets) Set(val *DigitalWallets) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWallets) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWallets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWallets(val *DigitalWallets) *NullableDigitalWallets {
	return &NullableDigitalWallets{value: val, isSet: true}
}

func (v NullableDigitalWallets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWallets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


