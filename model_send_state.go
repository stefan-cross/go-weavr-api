/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SendState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendState{}

// SendState The state of the send transaction, as follows:  - INITIALISED: The initial state of a send transaction when SCA is not required.  - PENDING_CHALLENGE: The send transaction requires verification before it can be initialised. Use the /sends/{id}/challenges/otp/{channel} API endpoint to start the verification process.  - PENDING:  The transaction has exceeded the destination limit and is pending treasury approval.  - APPROVED: The send transaction was approved.  - COMPLETED: The send transaction has been completed.  - REJECTED: The send transaction was rejected.  - FAILED: There was an issue with the send transaction, and the transaction has failed. 
type SendState struct {
}

// NewSendState instantiates a new SendState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendState() *SendState {
	this := SendState{}
	return &this
}

// NewSendStateWithDefaults instantiates a new SendState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendStateWithDefaults() *SendState {
	this := SendState{}
	return &this
}

func (o SendState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableSendState struct {
	value *SendState
	isSet bool
}

func (v NullableSendState) Get() *SendState {
	return v.value
}

func (v *NullableSendState) Set(val *SendState) {
	v.value = val
	v.isSet = true
}

func (v NullableSendState) IsSet() bool {
	return v.isSet
}

func (v *NullableSendState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendState(val *SendState) *NullableSendState {
	return &NullableSendState{value: val, isSet: true}
}

func (v NullableSendState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


