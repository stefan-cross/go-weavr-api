/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SensitivePassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensitivePassword{}

// SensitivePassword The user's password or passcode used to log in a user. Passwords must be:   - between 8 and 30 characters   - include a lowercase character   - include an uppercase character   - include a digit and a special character   - different from any of the 5 last such passwords used.  For non-PCI compliant integrations, the password submitted must be **tokenised**. 
type SensitivePassword struct {
	Value interface{} `json:"value"`
}

// NewSensitivePassword instantiates a new SensitivePassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensitivePassword(value interface{}) *SensitivePassword {
	this := SensitivePassword{}
	this.Value = value
	return &this
}

// NewSensitivePasswordWithDefaults instantiates a new SensitivePassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensitivePasswordWithDefaults() *SensitivePassword {
	this := SensitivePassword{}
	return &this
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *SensitivePassword) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SensitivePassword) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SensitivePassword) SetValue(v interface{}) {
	o.Value = v
}

func (o SensitivePassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensitivePassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSensitivePassword struct {
	value *SensitivePassword
	isSet bool
}

func (v NullableSensitivePassword) Get() *SensitivePassword {
	return v.value
}

func (v *NullableSensitivePassword) Set(val *SensitivePassword) {
	v.value = val
	v.isSet = true
}

func (v NullableSensitivePassword) IsSet() bool {
	return v.isSet
}

func (v *NullableSensitivePassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensitivePassword(val *SensitivePassword) *NullableSensitivePassword {
	return &NullableSensitivePassword{value: val, isSet: true}
}

func (v NullableSensitivePassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensitivePassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


