/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the AllLevelSpendRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllLevelSpendRules{}

// AllLevelSpendRules struct for AllLevelSpendRules
type AllLevelSpendRules struct {
	// Whitelist MCC: A list of allowed merchant category codes (MCCs). If the MCC does not match, then the transaction will be declined. If an MCC is also in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCategories\" instead.
	AllowedMerchantCategories interface{} `json:"allowedMerchantCategories,omitempty"`
	// Blacklist MCC: A list of disallowed merchant category codes (MCCs). If the MCC matches, then the transaction will be declined. If an MCC is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCategories\" instead.
	BlockedMerchantCategories interface{} `json:"blockedMerchantCategories,omitempty"`
	// Whitelist Merchant Id: A list of allowed merchant IDs. If the Merchant Id does not match, then the transaction will be declined. If a Merchant Id is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantIds\" instead.
	AllowedMerchantIds interface{} `json:"allowedMerchantIds,omitempty"`
	// Blacklist Merchant Id: A list of disallowed merchant IDs. If the Merchant Id matches, then the transaction will be declined. If a Merchant Id is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantIds\" instead.
	BlockedMerchantIds interface{} `json:"blockedMerchantIds,omitempty"`
	// Whitelist Merchant Country: A list of allowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country does not match, then the transaction will be declined. If a Merchant Country is also provided in the blocked list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCountries\" instead.
	AllowedMerchantCountries interface{} `json:"allowedMerchantCountries,omitempty"`
	// Blacklist Merchant Country: A list of disallowed merchant countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches, then the transaction will be declined. If a Merchant Country is also in the allowed list, the blocked list will take precedence. This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCountries\" instead.
	BlockedMerchantCountries interface{} `json:"blockedMerchantCountries,omitempty"`
	// Indicates if a contactless transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowContactless\" instead.
	AllowContactless interface{} `json:"allowContactless,omitempty"`
	// Indicates if an ATM Withdrawal transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowAtm\" instead.
	AllowAtm interface{} `json:"allowAtm,omitempty"`
	// Indicates if an online transaction is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowECommerce\" instead.
	AllowECommerce interface{} `json:"allowECommerce,omitempty"`
	// Indicates if a cashback transaction at a physical terminal is allowed on the card. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead.
	AllowCashback interface{} `json:"allowCashback,omitempty"`
	// Indicates if a the card can receive a credit transaction. This field is deprecated - use \"cardLevelSpendRules\".\"allowCashback\" instead.
	AllowCreditAuthorisations interface{} `json:"allowCreditAuthorisations,omitempty"`
	// The minimum transaction amount, in card currency, that is allowed. If the transaction amount is less than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"minTransactionAmount\" instead.
	MinTransactionAmount interface{} `json:"minTransactionAmount,omitempty"`
	// The maximum transaction amount, in card currency, that is allowed. If the transaction amount is greater than this value, then the transaction will be declined. Omit this, or set to 0 if no maximum transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\".\"maxTransactionAmount\" instead.
	MaxTransactionAmount interface{} `json:"maxTransactionAmount,omitempty"`
	// The total amount of funds that can be spent using this card, in a given time interval. This field is deprecated - use \"cardLevelSpendRules\".\"spendLimit\" instead.
	SpendLimit interface{} `json:"spendLimit,omitempty"`
	CardLevelSpendRules interface{} `json:"cardLevelSpendRules,omitempty"`
	ProfileLevelSpendRules interface{} `json:"profileLevelSpendRules,omitempty"`
	IdentityLevelSpendRules interface{} `json:"identityLevelSpendRules,omitempty"`
}

// NewAllLevelSpendRules instantiates a new AllLevelSpendRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllLevelSpendRules() *AllLevelSpendRules {
	this := AllLevelSpendRules{}
	return &this
}

// NewAllLevelSpendRulesWithDefaults instantiates a new AllLevelSpendRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllLevelSpendRulesWithDefaults() *AllLevelSpendRules {
	this := AllLevelSpendRules{}
	return &this
}

// GetAllowedMerchantCategories returns the AllowedMerchantCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowedMerchantCategories() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowedMerchantCategories
}

// GetAllowedMerchantCategoriesOk returns a tuple with the AllowedMerchantCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowedMerchantCategoriesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowedMerchantCategories) {
		return nil, false
	}
	return &o.AllowedMerchantCategories, true
}

// HasAllowedMerchantCategories returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowedMerchantCategories() bool {
	if o != nil && IsNil(o.AllowedMerchantCategories) {
		return true
	}

	return false
}

// SetAllowedMerchantCategories gets a reference to the given interface{} and assigns it to the AllowedMerchantCategories field.
func (o *AllLevelSpendRules) SetAllowedMerchantCategories(v interface{}) {
	o.AllowedMerchantCategories = v
}

// GetBlockedMerchantCategories returns the BlockedMerchantCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetBlockedMerchantCategories() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BlockedMerchantCategories
}

// GetBlockedMerchantCategoriesOk returns a tuple with the BlockedMerchantCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetBlockedMerchantCategoriesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BlockedMerchantCategories) {
		return nil, false
	}
	return &o.BlockedMerchantCategories, true
}

// HasBlockedMerchantCategories returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasBlockedMerchantCategories() bool {
	if o != nil && IsNil(o.BlockedMerchantCategories) {
		return true
	}

	return false
}

// SetBlockedMerchantCategories gets a reference to the given interface{} and assigns it to the BlockedMerchantCategories field.
func (o *AllLevelSpendRules) SetBlockedMerchantCategories(v interface{}) {
	o.BlockedMerchantCategories = v
}

// GetAllowedMerchantIds returns the AllowedMerchantIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowedMerchantIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowedMerchantIds
}

// GetAllowedMerchantIdsOk returns a tuple with the AllowedMerchantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowedMerchantIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowedMerchantIds) {
		return nil, false
	}
	return &o.AllowedMerchantIds, true
}

// HasAllowedMerchantIds returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowedMerchantIds() bool {
	if o != nil && IsNil(o.AllowedMerchantIds) {
		return true
	}

	return false
}

// SetAllowedMerchantIds gets a reference to the given interface{} and assigns it to the AllowedMerchantIds field.
func (o *AllLevelSpendRules) SetAllowedMerchantIds(v interface{}) {
	o.AllowedMerchantIds = v
}

// GetBlockedMerchantIds returns the BlockedMerchantIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetBlockedMerchantIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BlockedMerchantIds
}

// GetBlockedMerchantIdsOk returns a tuple with the BlockedMerchantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetBlockedMerchantIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BlockedMerchantIds) {
		return nil, false
	}
	return &o.BlockedMerchantIds, true
}

// HasBlockedMerchantIds returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasBlockedMerchantIds() bool {
	if o != nil && IsNil(o.BlockedMerchantIds) {
		return true
	}

	return false
}

// SetBlockedMerchantIds gets a reference to the given interface{} and assigns it to the BlockedMerchantIds field.
func (o *AllLevelSpendRules) SetBlockedMerchantIds(v interface{}) {
	o.BlockedMerchantIds = v
}

// GetAllowedMerchantCountries returns the AllowedMerchantCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowedMerchantCountries() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowedMerchantCountries
}

// GetAllowedMerchantCountriesOk returns a tuple with the AllowedMerchantCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowedMerchantCountriesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowedMerchantCountries) {
		return nil, false
	}
	return &o.AllowedMerchantCountries, true
}

// HasAllowedMerchantCountries returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowedMerchantCountries() bool {
	if o != nil && IsNil(o.AllowedMerchantCountries) {
		return true
	}

	return false
}

// SetAllowedMerchantCountries gets a reference to the given interface{} and assigns it to the AllowedMerchantCountries field.
func (o *AllLevelSpendRules) SetAllowedMerchantCountries(v interface{}) {
	o.AllowedMerchantCountries = v
}

// GetBlockedMerchantCountries returns the BlockedMerchantCountries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetBlockedMerchantCountries() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BlockedMerchantCountries
}

// GetBlockedMerchantCountriesOk returns a tuple with the BlockedMerchantCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetBlockedMerchantCountriesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BlockedMerchantCountries) {
		return nil, false
	}
	return &o.BlockedMerchantCountries, true
}

// HasBlockedMerchantCountries returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasBlockedMerchantCountries() bool {
	if o != nil && IsNil(o.BlockedMerchantCountries) {
		return true
	}

	return false
}

// SetBlockedMerchantCountries gets a reference to the given interface{} and assigns it to the BlockedMerchantCountries field.
func (o *AllLevelSpendRules) SetBlockedMerchantCountries(v interface{}) {
	o.BlockedMerchantCountries = v
}

// GetAllowContactless returns the AllowContactless field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowContactless() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowContactless
}

// GetAllowContactlessOk returns a tuple with the AllowContactless field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowContactlessOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowContactless) {
		return nil, false
	}
	return &o.AllowContactless, true
}

// HasAllowContactless returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowContactless() bool {
	if o != nil && IsNil(o.AllowContactless) {
		return true
	}

	return false
}

// SetAllowContactless gets a reference to the given interface{} and assigns it to the AllowContactless field.
func (o *AllLevelSpendRules) SetAllowContactless(v interface{}) {
	o.AllowContactless = v
}

// GetAllowAtm returns the AllowAtm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowAtm() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowAtm
}

// GetAllowAtmOk returns a tuple with the AllowAtm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowAtmOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowAtm) {
		return nil, false
	}
	return &o.AllowAtm, true
}

// HasAllowAtm returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowAtm() bool {
	if o != nil && IsNil(o.AllowAtm) {
		return true
	}

	return false
}

// SetAllowAtm gets a reference to the given interface{} and assigns it to the AllowAtm field.
func (o *AllLevelSpendRules) SetAllowAtm(v interface{}) {
	o.AllowAtm = v
}

// GetAllowECommerce returns the AllowECommerce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowECommerce() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowECommerce
}

// GetAllowECommerceOk returns a tuple with the AllowECommerce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowECommerceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowECommerce) {
		return nil, false
	}
	return &o.AllowECommerce, true
}

// HasAllowECommerce returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowECommerce() bool {
	if o != nil && IsNil(o.AllowECommerce) {
		return true
	}

	return false
}

// SetAllowECommerce gets a reference to the given interface{} and assigns it to the AllowECommerce field.
func (o *AllLevelSpendRules) SetAllowECommerce(v interface{}) {
	o.AllowECommerce = v
}

// GetAllowCashback returns the AllowCashback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowCashback() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowCashback
}

// GetAllowCashbackOk returns a tuple with the AllowCashback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowCashbackOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowCashback) {
		return nil, false
	}
	return &o.AllowCashback, true
}

// HasAllowCashback returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowCashback() bool {
	if o != nil && IsNil(o.AllowCashback) {
		return true
	}

	return false
}

// SetAllowCashback gets a reference to the given interface{} and assigns it to the AllowCashback field.
func (o *AllLevelSpendRules) SetAllowCashback(v interface{}) {
	o.AllowCashback = v
}

// GetAllowCreditAuthorisations returns the AllowCreditAuthorisations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetAllowCreditAuthorisations() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AllowCreditAuthorisations
}

// GetAllowCreditAuthorisationsOk returns a tuple with the AllowCreditAuthorisations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetAllowCreditAuthorisationsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AllowCreditAuthorisations) {
		return nil, false
	}
	return &o.AllowCreditAuthorisations, true
}

// HasAllowCreditAuthorisations returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasAllowCreditAuthorisations() bool {
	if o != nil && IsNil(o.AllowCreditAuthorisations) {
		return true
	}

	return false
}

// SetAllowCreditAuthorisations gets a reference to the given interface{} and assigns it to the AllowCreditAuthorisations field.
func (o *AllLevelSpendRules) SetAllowCreditAuthorisations(v interface{}) {
	o.AllowCreditAuthorisations = v
}

// GetMinTransactionAmount returns the MinTransactionAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetMinTransactionAmount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MinTransactionAmount
}

// GetMinTransactionAmountOk returns a tuple with the MinTransactionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetMinTransactionAmountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MinTransactionAmount) {
		return nil, false
	}
	return &o.MinTransactionAmount, true
}

// HasMinTransactionAmount returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasMinTransactionAmount() bool {
	if o != nil && IsNil(o.MinTransactionAmount) {
		return true
	}

	return false
}

// SetMinTransactionAmount gets a reference to the given interface{} and assigns it to the MinTransactionAmount field.
func (o *AllLevelSpendRules) SetMinTransactionAmount(v interface{}) {
	o.MinTransactionAmount = v
}

// GetMaxTransactionAmount returns the MaxTransactionAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetMaxTransactionAmount() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MaxTransactionAmount
}

// GetMaxTransactionAmountOk returns a tuple with the MaxTransactionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetMaxTransactionAmountOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MaxTransactionAmount) {
		return nil, false
	}
	return &o.MaxTransactionAmount, true
}

// HasMaxTransactionAmount returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasMaxTransactionAmount() bool {
	if o != nil && IsNil(o.MaxTransactionAmount) {
		return true
	}

	return false
}

// SetMaxTransactionAmount gets a reference to the given interface{} and assigns it to the MaxTransactionAmount field.
func (o *AllLevelSpendRules) SetMaxTransactionAmount(v interface{}) {
	o.MaxTransactionAmount = v
}

// GetSpendLimit returns the SpendLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetSpendLimit() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpendLimit
}

// GetSpendLimitOk returns a tuple with the SpendLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetSpendLimitOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpendLimit) {
		return nil, false
	}
	return &o.SpendLimit, true
}

// HasSpendLimit returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasSpendLimit() bool {
	if o != nil && IsNil(o.SpendLimit) {
		return true
	}

	return false
}

// SetSpendLimit gets a reference to the given interface{} and assigns it to the SpendLimit field.
func (o *AllLevelSpendRules) SetSpendLimit(v interface{}) {
	o.SpendLimit = v
}

// GetCardLevelSpendRules returns the CardLevelSpendRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetCardLevelSpendRules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CardLevelSpendRules
}

// GetCardLevelSpendRulesOk returns a tuple with the CardLevelSpendRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetCardLevelSpendRulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardLevelSpendRules) {
		return nil, false
	}
	return &o.CardLevelSpendRules, true
}

// HasCardLevelSpendRules returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasCardLevelSpendRules() bool {
	if o != nil && IsNil(o.CardLevelSpendRules) {
		return true
	}

	return false
}

// SetCardLevelSpendRules gets a reference to the given interface{} and assigns it to the CardLevelSpendRules field.
func (o *AllLevelSpendRules) SetCardLevelSpendRules(v interface{}) {
	o.CardLevelSpendRules = v
}

// GetProfileLevelSpendRules returns the ProfileLevelSpendRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetProfileLevelSpendRules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProfileLevelSpendRules
}

// GetProfileLevelSpendRulesOk returns a tuple with the ProfileLevelSpendRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetProfileLevelSpendRulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProfileLevelSpendRules) {
		return nil, false
	}
	return &o.ProfileLevelSpendRules, true
}

// HasProfileLevelSpendRules returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasProfileLevelSpendRules() bool {
	if o != nil && IsNil(o.ProfileLevelSpendRules) {
		return true
	}

	return false
}

// SetProfileLevelSpendRules gets a reference to the given interface{} and assigns it to the ProfileLevelSpendRules field.
func (o *AllLevelSpendRules) SetProfileLevelSpendRules(v interface{}) {
	o.ProfileLevelSpendRules = v
}

// GetIdentityLevelSpendRules returns the IdentityLevelSpendRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllLevelSpendRules) GetIdentityLevelSpendRules() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IdentityLevelSpendRules
}

// GetIdentityLevelSpendRulesOk returns a tuple with the IdentityLevelSpendRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllLevelSpendRules) GetIdentityLevelSpendRulesOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IdentityLevelSpendRules) {
		return nil, false
	}
	return &o.IdentityLevelSpendRules, true
}

// HasIdentityLevelSpendRules returns a boolean if a field has been set.
func (o *AllLevelSpendRules) HasIdentityLevelSpendRules() bool {
	if o != nil && IsNil(o.IdentityLevelSpendRules) {
		return true
	}

	return false
}

// SetIdentityLevelSpendRules gets a reference to the given interface{} and assigns it to the IdentityLevelSpendRules field.
func (o *AllLevelSpendRules) SetIdentityLevelSpendRules(v interface{}) {
	o.IdentityLevelSpendRules = v
}

func (o AllLevelSpendRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllLevelSpendRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedMerchantCategories != nil {
		toSerialize["allowedMerchantCategories"] = o.AllowedMerchantCategories
	}
	if o.BlockedMerchantCategories != nil {
		toSerialize["blockedMerchantCategories"] = o.BlockedMerchantCategories
	}
	if o.AllowedMerchantIds != nil {
		toSerialize["allowedMerchantIds"] = o.AllowedMerchantIds
	}
	if o.BlockedMerchantIds != nil {
		toSerialize["blockedMerchantIds"] = o.BlockedMerchantIds
	}
	if o.AllowedMerchantCountries != nil {
		toSerialize["allowedMerchantCountries"] = o.AllowedMerchantCountries
	}
	if o.BlockedMerchantCountries != nil {
		toSerialize["blockedMerchantCountries"] = o.BlockedMerchantCountries
	}
	if o.AllowContactless != nil {
		toSerialize["allowContactless"] = o.AllowContactless
	}
	if o.AllowAtm != nil {
		toSerialize["allowAtm"] = o.AllowAtm
	}
	if o.AllowECommerce != nil {
		toSerialize["allowECommerce"] = o.AllowECommerce
	}
	if o.AllowCashback != nil {
		toSerialize["allowCashback"] = o.AllowCashback
	}
	if o.AllowCreditAuthorisations != nil {
		toSerialize["allowCreditAuthorisations"] = o.AllowCreditAuthorisations
	}
	if o.MinTransactionAmount != nil {
		toSerialize["minTransactionAmount"] = o.MinTransactionAmount
	}
	if o.MaxTransactionAmount != nil {
		toSerialize["maxTransactionAmount"] = o.MaxTransactionAmount
	}
	if o.SpendLimit != nil {
		toSerialize["spendLimit"] = o.SpendLimit
	}
	if o.CardLevelSpendRules != nil {
		toSerialize["cardLevelSpendRules"] = o.CardLevelSpendRules
	}
	if o.ProfileLevelSpendRules != nil {
		toSerialize["profileLevelSpendRules"] = o.ProfileLevelSpendRules
	}
	if o.IdentityLevelSpendRules != nil {
		toSerialize["identityLevelSpendRules"] = o.IdentityLevelSpendRules
	}
	return toSerialize, nil
}

type NullableAllLevelSpendRules struct {
	value *AllLevelSpendRules
	isSet bool
}

func (v NullableAllLevelSpendRules) Get() *AllLevelSpendRules {
	return v.value
}

func (v *NullableAllLevelSpendRules) Set(val *AllLevelSpendRules) {
	v.value = val
	v.isSet = true
}

func (v NullableAllLevelSpendRules) IsSet() bool {
	return v.isSet
}

func (v *NullableAllLevelSpendRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllLevelSpendRules(val *AllLevelSpendRules) *NullableAllLevelSpendRules {
	return &NullableAllLevelSpendRules{value: val, isSet: true}
}

func (v NullableAllLevelSpendRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllLevelSpendRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


