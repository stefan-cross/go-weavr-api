openapi: 3.1.0
info:
  contact:
    name: Weavr
    url: https://weavr.io
  description: |
    Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.

    By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.

    # Authentication
    Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).

    Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed.
  title: Weavr Multi Product API
  version: 3.32.1
  x-logo:
    url: https://storage.googleapis.com/weavr-cdn/weavr_logo-new.png
    backgroundColor: '#FFFFFF'
    altText: Weavr
servers:
- description: Weavr Sandbox Environment
  url: https://sandbox.weavr.io/multi
tags:
- description: Manage authentication for your users.
  name: Access
- description: Manage your users' passwords.
  name: Passwords
- description: "Manage additional strong customer authentication factors for your\
    \ users.  \n"
  name: Additional Factors
- description: |
    Corporate and Consumer identities can invite authorised users to access their account. Once on-boarded, authorised users can create and manage instruments and transactions on behalf of the identity they are on-boarded with.

    In case of **Corporate Identities**, authorised users are typically employees who have access to company's banking products such as cards and bank accounts.

    In case of **Consumer Identities**, authorised users are typically children/teens whose parents want them to have access to banking products such as cards and bank accounts.

    Note that `/users` endpoints are to be used only for performing operations related to authorised users - getting or updating the details of _root_ users is to be done via the respective `/consumers` or `/corporates` endpoints.
  name: Authorised Users
- description: "Corporates are identities representing companies. Once on-boarded,\
    \ Corporates can create and manage their own instruments via your application."
  name: Corporates
- description: "Consumers are identities representing individuals. Once on-boarded,\
    \ Consumers can create and manage their own instruments via your application."
  name: Consumers
- description: |
    Managed Accounts are a type of financial instrument offered by Weavr.

    They hold funds for their owner, and can be upgraded to IBANs so as to receive and send funds to instruments outside of the Weavr Platform, via Wire Transfers.

    Managed accounts can also be used as source and destination instruments in the `transfer` and `send` transactions.
  name: Managed Accounts
- description: |
    Managed Cards are a type of financial instrument offered by Weavr.

    You can create virtual or physical cards that are issued to the consumer or corporate identity.

    A card created in prepaid mode has its own balance, whereas a card created in debit mode does not have its own balance but taps into the balance of its parent managed account.
  name: Managed Cards
- description: "The Send transaction is used to send funds between managed accounts\
    \ and managed cards belonging to different identities. \n"
  name: Sends
- description: |
    The Transfer transaction is used to transfer funds between managed accounts and managed cards belonging to same identity.
  name: Transfers
- description: |
    The Outgoing Wire Transfer transaction is used to transfer funds from managed accounts to an external bank account.
  name: Outgoing Wire Transfers
paths:
  /login_with_password:
    post:
      description: |
        Authenticate a user with the `email` and `password` that they provided when registering.

        Given that the user credentials are correct, this returns a `token` that can then be used to authorise
        other secured operations. In case the password is expired, a temporary `token` is returned, which can be used
        solely for updating the password.

        The token returned is valid for 5 minutes from last activity.
      operationId: loginWithPassword
      requestBody:
        $ref: '#/components/requestBodies/LoginWithPasswordRequest'
      responses:
        "200":
          $ref: '#/components/responses/LoginWithPasswordResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: The authentication credentials are not found or are incorrect.
        "409":
          $ref: '#/components/responses/LoginWithPasswordConflict'
        "423":
          $ref: '#/components/responses/Locked'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Login with password
      tags:
      - Access
  /identities:
    get:
      description: Retrieves a list of identities available to the holder of the token.
      operationId: userIdentities
      responses:
        "200":
          $ref: '#/components/responses/UserIdentitiesGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UserIdentitiesConflict'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get user identities
      tags:
      - Access
  /stepup/challenges/otp/{channel}:
    post:
      description: |
        Initiates the step-up token process by sending an SMS with an one-time-password to a device belonging to the logged-in user that was previously enrolled through `/authentication_factors/otp/{channel}` endpoint.

        This process is required for endpoints that require a step-up token to complete the call.

        _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \"123456\"._
      operationId: stepupSCAChallenge
      parameters:
      - $ref: '#/components/parameters/channel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "409":
          $ref: '#/components/responses/StepUpSCAChallengeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Issue a one-time password that can be used to step-up a token
      tags:
      - Access
  /stepup/challenges/otp/{channel}/verify:
    post:
      description: |
        Completes the verification process for a step up token.

        _Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \"123456\"._
      operationId: stepupSCAVerify
      parameters:
      - $ref: '#/components/parameters/channel'
      requestBody:
        $ref: '#/components/requestBodies/SCAVerifyRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/StepUpSCAVerifyConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Verify a step-up token using a one-time password
      tags:
      - Access
  /stepup/challenges/push/{channel}:
    post:
      description: |
        Initiates the step-up token process by submitting a push notification to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.

        You should only start this process if the token step-up isn't already in flight.
      operationId: stepupSCAChallengePush
      parameters:
      - $ref: '#/components/parameters/scaPushChannel'
      responses:
        "200":
          $ref: '#/components/responses/StepUpSCAChallengePushResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "409":
          $ref: '#/components/responses/StepUpSCAChallengePushConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Issue a push notification that can be used to step-up a token
      tags:
      - Access
  /logout:
    post:
      description: Logs out the user and terminates the session identified by the
        `auth_token` in the Authorization Header.
      operationId: logout
      responses:
        "200":
          $ref: '#/components/responses/LogoutResponse'
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Logout
      tags:
      - Access
  /passwords/{user_id}/create:
    post:
      description: Create a new password for the user identified by the `user_id`
        path parameter.
      operationId: passwordCreate
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/PasswordCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/PasswordResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/CreatePasswordConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Create a password
      tags:
      - Passwords
  /passwords/update:
    post:
      description: Update the password for the logged-in user.
      operationId: passwordUpdate
      requestBody:
        $ref: '#/components/requestBodies/PasswordUpdateRequest'
      responses:
        "200":
          $ref: '#/components/responses/PasswordResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/PasswordUpdateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update a password
      tags:
      - Passwords
  /passwords/validate:
    post:
      description: Check that a password adheres to all complexity checks.
      operationId: passwordValidate
      requestBody:
        $ref: '#/components/requestBodies/PasswordValidateRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/PasswordValidateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Validate a password
      tags:
      - Passwords
  /passwords/lost_password/start:
    post:
      description: |
        Initiate the lost password process.

        If the email address provided is associated with an active user, an email will be sent, containing a URL that redirects the user to change their password.
        The URL contains request parameters for all of the parameters required to change the password for the user via the `/passwords/lost_password/resume` POST endpoint.
      operationId: lostPasswordInitiate
      requestBody:
        $ref: '#/components/requestBodies/EmailRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/LostPasswordInitiateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Initiate lost password process
      tags:
      - Passwords
  /passwords/lost_password/resume:
    post:
      description: This is the second and final step in updating the password of a
        user who forgot their password.
      operationId: lostPasswordResume
      requestBody:
        $ref: '#/components/requestBodies/LostPasswordResumeRequest'
      responses:
        "200":
          $ref: '#/components/responses/TokenResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/LostPasswordResumeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Resume lost password process
      tags:
      - Passwords
  /authentication_factors:
    get:
      description: Retrieves the list of authentication factors that can be used to
        verify the logged-in user.
      operationId: authFactorsGet
      responses:
        "200":
          $ref: '#/components/responses/AuthFactorsGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get user authentication factors
      tags:
      - Additional Factors
  /authentication_factors/otp/{channel}:
    post:
      description: |
        This is the first step in enrolling the logged-in user's mobile device, where a one-time password is sent to the device.

        _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \"123456\"._
      operationId: enrolDeviceUsingOtpStepOne
      parameters:
      - $ref: '#/components/parameters/channel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/EnrolDeviceUsingOtpStepOneConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
        auth_token: []
      summary: Enrol a user device for authentication using one-time passwords
      tags:
      - Additional Factors
  /authentication_factors/otp/{channel}/verify:
    post:
      description: |
        The second step in enrolling the logged-in user (root or authorised user) to use one-time-passwords to enable verification of transactions.

        _Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always set to \"123456\"._
      operationId: enrolDeviceUsingOtpStepTwo
      parameters:
      - $ref: '#/components/parameters/channel'
      requestBody:
        $ref: '#/components/requestBodies/SCAVerifyRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/EnrolDeviceUsingOtpStepTwoConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
        auth_token: []
      summary: Verify enrolment of a user device for authentication using one-time
        passwords
      tags:
      - Additional Factors
  /authentication_factors/push/{channel}:
    delete:
      description: Unlink a user device for authentication using push notifications
      operationId: unlinkDeviceUsingPush
      parameters:
      - $ref: '#/components/parameters/scaPushChannel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UnlinkDeviceUsingPushConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
        auth_token: []
      summary: Unlink a user device for authentication using push notifications
      tags:
      - Additional Factors
    post:
      description: |
        This is the first step in enrolling the logged-in user's mobile device, where a push notification is sent to the device.
      operationId: enrolDeviceUsingPush
      parameters:
      - $ref: '#/components/parameters/scaPushChannel'
      responses:
        "200":
          $ref: '#/components/responses/EnrolDeviceUsingPushResponse'
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/EnrolDeviceUsingPushConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
        auth_token: []
      summary: Enrol a user device for authentication using push notifications
      tags:
      - Additional Factors
  /access_token:
    post:
      description: |
        This API endpoint accepts a POST request with an auth_token parameter and returns an access_token that grants authorized access to additional resources within the API, with a different expiration time and unique signature.
      operationId: requestAccessToken
      requestBody:
        $ref: '#/components/requestBodies/AccessTokenRequest'
      responses:
        "200":
          $ref: '#/components/responses/AccessTokenResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          description: The auth token is not specified or is incorrect.
        "423":
          $ref: '#/components/responses/Locked'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
        auth_token: []
      summary: Acquire a new access token
      tags:
      - Access
  /users:
    get:
      description: Fetches all authorised users associated with the corporate or consumer
        identity the logged-in user belongs to.
      operationId: usersGet
      parameters:
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/active'
      - $ref: '#/components/parameters/email'
      responses:
        "200":
          $ref: '#/components/responses/UsersGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get all users
      tags:
      - Authorised Users
    post:
      description: |
        Creates a user linked to the logged-in corporate or consumer identity.

        Once on-boarded, users have access to all instruments (cards and accounts) of the identity.

        Application-specific permissions to limit what each user can view and do need to be implemented in your application.
      operationId: userCreate
      requestBody:
        $ref: '#/components/requestBodies/UserCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/UserResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UserCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create a user
      tags:
      - Authorised Users
  /users/{user_id}:
    get:
      description: Retrieves the user identified by the `user_id` path parameter.
      operationId: userGetById
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        "200":
          $ref: '#/components/responses/UserResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a user
      tags:
      - Authorised Users
    patch:
      description: |
        Update the details of a user identified by the `user_id` in the the path parameter.

        Only the fields that are specified in the request body will be updated. All other fields will remain unchanged.
      operationId: userUpdate
      parameters:
      - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/UserPatchRequest'
      responses:
        "200":
          $ref: '#/components/responses/UserResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UserPatchConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update a user
      tags:
      - Authorised Users
  /users/{user_id}/activate:
    post:
      description: |
        Activate the user identified by the `user_id` path parameter.

        By default, any new users created will be automatically activated. This operation needs to be used only if the user was previously de-activated using the _userDeactivate_ operation, or if the user was de-activated automatically after multiple incorrect login attempts.
      operationId: userActivate
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Activate a user
      tags:
      - Authorised Users
  /users/{user_id}/deactivate:
    post:
      description: |
        De-activate the user identified by the `user_id` path parameter.

        Deactivated users cannot log in or execute any operations with their credentials.

        This operations is not final and a user can be re-activated using the userActivate operation. Note that another active user would need to log in so as to re-activate the de-activated user.
      operationId: userDeactivate
      parameters:
      - $ref: '#/components/parameters/userId'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Deactivate a user
      tags:
      - Authorised Users
  /users/{user_id}/invite:
    post:
      description: |
        Once a user is created using the _userCreate_ operation, the user needs to setup his/her password.

        An invitation needs to be sent to the user in order to be able to set up the password for the first time. The invitation email, which remains valid for 1 month, will contain a URL having all information required to setup the password via the _userInviteConsume_.
      operationId: userInviteSend
      parameters:
      - $ref: '#/components/parameters/userIdExplode'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UserInviteSendConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Send a user invite
      tags:
      - Authorised Users
  /users/{user_id}/invite/validate:
    post:
      description: Check if a user's invite is still valid. This operation is useful
        to avoid having the user fill in a form only to be held by a validation issue
        (eg. expired invite).
      operationId: userInviteValidate
      parameters:
      - $ref: '#/components/parameters/userIdExplode'
      requestBody:
        $ref: '#/components/requestBodies/UserInviteValidateRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UserInviteValidateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Validate a user invite
      tags:
      - Authorised Users
  /users/{user_id}/invite/consume:
    post:
      description: |
        Consumes an invitation perviously sent to the user via _userInviteSend_. This is needed so that the invited user sets up the password.

        _Note that on the Sandbox Environment, the `inviteCode` is always set to \"123456\"._
      operationId: userInviteConsume
      parameters:
      - $ref: '#/components/parameters/userIdExplode'
      requestBody:
        $ref: '#/components/requestBodies/UserInviteConsumeRequest'
      responses:
        "200":
          $ref: '#/components/responses/TokenResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/UserInviteConsumeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Consume a user invite
      tags:
      - Authorised Users
  /users/verification/email/send:
    post:
      description: |
        The first step in verifying an authorised user's email. The authorised user whose email address is to be verified is sent an email containing a randomly generated code.

        This code must then be provided in the _authorisedUserEmailVerify_ operation to verify the authorised user's email address.

        _Note that on the Sandbox Environment, the `verificationCode` is always set to \"123456\"._
      operationId: authorisedUserEmailVerificationCodeSend
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lostPasswordInitiate_request'
        required: true
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorisedUserEmailVerificationCodeSend_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Send an email verification code to the authorised user
      tags:
      - Authorised Users
  /users/verification/email/verify:
    post:
      description: |
        The second step in verifying the authorised user's email. The randomly generated code sent to the authorised user via
        email, using the _authorisedUserEmailVerificationCodeSend_ operation, is submitted here to verify the authorised user's email.

        This is needed as part of the verification process for basic due diligence.

        _Note that on the Sandbox Environment, the `verificationCode` is always set to \"123456\"._
      operationId: authorisedUserEmailVerify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authorisedUserEmailVerify_request'
        required: true
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authorisedUserEmailVerify_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security:
      - api_key: []
      summary: Verify email of the authorised user
      tags:
      - Authorised Users
  /users/kyc:
    post:
      description: |
        Perform the kyc for a corporate user.
      operationId: userKyc
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userKyc_200_response'
          description: Success
          headers:
            request-ref:
              $ref: '#/components/headers/request-ref'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userKyc_409_response'
          description: Conflict
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error
      security:
      - api_key: []
      summary: Start KYC for the user
      tags:
      - Authorised Users
  /corporates:
    get:
      description: Retrieve the details of the logged-in corporate.
      operationId: corporateGet
      responses:
        "200":
          $ref: '#/components/responses/CorporateResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a corporate
      tags:
      - Corporates
    patch:
      description: |
        Update the details of the logged-in corporate identity.

        The following Corporate details are verified during due diligence (KYB) and cannot be updated via the API once the Corporate has been verified:
          - Root User Name
          - Root User Surname
          - Root User Email
          - Root User Mobile Country Code
          - Root User Mobile Number

        *If these details need to be changed after due diligence is completed, please contact Customer Support to restart the Due Diligence process.*
      operationId: corporateUpdate
      requestBody:
        $ref: '#/components/requestBodies/CorporateUpdateRequest'
      responses:
        "200":
          $ref: '#/components/responses/CorporateResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/CorporateUpdateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update a corporate
      tags:
      - Corporates
    post:
      description: Create a corporate identity for a business customer.  The information
        provided must be accurate and will be passed on for KYB verification with
        our partner.
      operationId: corporateCreate
      requestBody:
        $ref: '#/components/requestBodies/CorporateCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/CreateCorporateResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/CorporateCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Create a corporate
      tags:
      - Corporates
  /corporates/verification/email/send:
    post:
      description: |
        The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.

        This code must then be provided in the _corporateRootUserEmailVerify_ operation to verify the root user's email address.

        _Note that on the Sandbox Environment, the `verificationCode` is always set to \"123456\"._
      operationId: corporateRootUserEmailVerificationCodeSend
      requestBody:
        $ref: '#/components/requestBodies/EmailRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/EmailVerificationConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Send an email verification code to the root user
      tags:
      - Corporates
  /corporates/verification/email/verify:
    post:
      description: |
        The second step in verifying the root user's email. The randomly generated code sent to the root user via
        email, using the _corporateRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.

        This is needed as part of the verification process for basic due diligence.

        _Note that on the Sandbox Environment, the `verificationCode` is always set to \"123456\"._
      operationId: corporateRootUserEmailVerify
      requestBody:
        $ref: '#/components/requestBodies/EmailVerifyRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/VerifyConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Verify email of the root user
      tags:
      - Corporates
  /corporates/kyb:
    get:
      description: Returns the KYB status for the logged-in corporate.
      operationId: corporateKybGet
      responses:
        "200":
          $ref: '#/components/responses/CorporateKybGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get KYB for a corporate
      tags:
      - Corporates
    post:
      description: |
        Corporates need to complete due diligence (KYB) before they can create instruments and perform transactions.

        This operation initiates the due diligence process for the logged-in corporate.

        Due Diligence is handled by a KYB provider - you will need to embed the KYB UI Component in your application so that the Corporate will be able to perform the KYB process.

        To initialise the KYB UI Component, you need a `reference` that is given you in the response of this operation.
      operationId: corporateKybStart
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userKyc_200_response'
          description: Success
          headers:
            request-ref:
              $ref: '#/components/headers/request-ref'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/corporateKybStart_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Start KYB for a corporate
      tags:
      - Corporates
  /corporates/fees/charge:
    post:
      description: |
        Charge a fee to the corporate identified by the auth token, based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.

        The fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.
      operationId: corporateChargeFee
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/ChargeFeeRequest'
      responses:
        "200":
          $ref: '#/components/responses/ChargeFeeResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ChargeFeeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Charge fee to a corporate
      tags:
      - Corporates
  /consumers:
    get:
      description: Retrieve the details of the logged-in Consumer.
      operationId: consumerGet
      responses:
        "200":
          $ref: '#/components/responses/ConsumerResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a consumer
      tags:
      - Consumers
    patch:
      description: |
        Update the details of the logged-in consumer identity.

        If the Consumer root user has already completed KYC, the following details cannot be updated:
          - name
          - surname
          - email
          - mobile Country Code
          - mobile Number
          - date of Birth
          - address
      operationId: consumerUpdate
      requestBody:
        $ref: '#/components/requestBodies/ConsumerUpdateRequest'
      responses:
        "200":
          $ref: '#/components/responses/ConsumerResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/ConsumerUpdateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update a consumer
      tags:
      - Consumers
    post:
      description: |
        Create a Consumer Identity to represent an Individual.

        The information provided must be accurate as it will be passed on for KYC verification with our partner.

        *Incorrect information may incur a re-processing fee.*
      operationId: consumerCreate
      requestBody:
        $ref: '#/components/requestBodies/ConsumerCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/ConsumerResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/ConsumerCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Create a consumer
      tags:
      - Consumers
  /consumers/verification/email/send:
    post:
      description: |
        The first step in verifying a root user's email. The root user whose email address is to be verified is sent an email containing a randomly generated code.

        This code must then be provided in the _consumerRootUserEmailVerify_ operation to verify the root user's email address.

        Note that on the Sandbox Environment, the `verificationCode` is always set to \"123456\".
      operationId: consumerRootUserEmailVerificationCodeSend
      requestBody:
        $ref: '#/components/requestBodies/EmailRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/EmailVerificationConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Send an email verification code to the root user
      tags:
      - Consumers
  /consumers/verification/email/verify:
    post:
      description: |
        The second step in verifying the root user's email. The randomly generated code sent to the root user via
        email, using the _consumerRootUserEmailVerificationCodeSend_ operation, is submitted here to verify the root user's email.

        This is needed as part of the verification process for basic due diligence.

        Note that on the Sandbox Environment, emails are not sent and the verification code is always set to \"123456\".
      operationId: consumerRootUserEmailVerify
      requestBody:
        $ref: '#/components/requestBodies/EmailVerifyRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/VerifyConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Verify email of the root user
      tags:
      - Consumers
  /consumers/kyc:
    get:
      description: Returns the KYC status for the logged-in consumer.
      operationId: consumerKycGet
      responses:
        "200":
          $ref: '#/components/responses/ConsumerKycGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get KYC for a consumer
      tags:
      - Consumers
    post:
      description: "Consumers need to complete due diligence (KYC) before they can\
        \ create instruments and fund transaction.\n\nThis operation initiates the\
        \ due diligence process for the logged-in consumer. \n\nThe level of KYC that\
        \ will be required from the user can be provided as an optional parameter\
        \ - if this is not provided, `KYC_LEVEL_2` will be assumed. \n\nDue Diligence\
        \ is handled by a KYC provider, you will need to embed the KYC UI Component\
        \ in your application to show the KYC screens to your users.\n\nTo initialise\
        \ the KYC UI Component, you need a `reference` that is given to you in the\
        \ response of this operation.\n"
      operationId: consumerKycStart
      requestBody:
        $ref: '#/components/requestBodies/ConsumerKycLevelRequest'
      responses:
        "200":
          $ref: '#/components/responses/ConsumerKycStartResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/ConsumerKycStartConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Start KYC for a consumer
      tags:
      - Consumers
  /consumers/kyc_mobile_sumsub:
    post:
      description: "Consumers need to complete due diligence (KYC) before they can\
        \ create instruments and perform transactions.\nUse this call instead of `/consumers/kyc`\
        \ only in case where the KYC is to be performed using a mobile device.\nThe\
        \ level of KYC that will be required from the user can be provided as an optional\
        \ parameter - if this is not \nprovided, `KYC_LEVEL_2` will be assumed. \n\
        The information returned in the response is to be used to integrate directly\
        \ with Sumsub Mobile SDK.\n"
      operationId: consumerKycStartSumsubMobile
      requestBody:
        $ref: '#/components/requestBodies/ConsumerKycLevelRequest'
      responses:
        "200":
          $ref: '#/components/responses/ConsumerKycStartSumsubMobileResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/ConsumerKycStartSumsubMobileConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Start consumer KYC on mobile
      tags:
      - Consumers
  /consumers/fees/charge:
    post:
      description: |
        Charge a fee to the logged-in consumer based on a pre-defined custom fee. Custom fees can be configured in the Multi Portal.

        The fees collected will be deposited into your Revenue Account. The balance and transaction history of your revenue account can be viewed in the Multi Portal.
      operationId: consumerChargeFee
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/ChargeFeeRequest'
      responses:
        "200":
          $ref: '#/components/responses/ChargeFeeResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/ChargeFeeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Charge fee to a consumer
      tags:
      - Consumers
  /managed_accounts:
    get:
      description: Retrieves all managed accounts belonging to the logged-in identity.
      operationId: managedAccountsGet
      parameters:
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/profileId'
      - $ref: '#/components/parameters/friendlyName'
      - $ref: '#/components/parameters/state'
      - $ref: '#/components/parameters/state_blockedReason'
      - $ref: '#/components/parameters/state_destroyedReason'
      - $ref: '#/components/parameters/currency'
      - $ref: '#/components/parameters/createdFrom'
      - $ref: '#/components/parameters/createdTo'
      - $ref: '#/components/parameters/tag'
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountsGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get all managed accounts
      tags:
      - Managed Accounts
    post:
      description: |
        Creates a managed account for the consumer or corporate identity.
        The Managed Account Profile (configured in the Multi Portal) specified determines the behavior and restrictions that the managed account will have."
      operationId: managedAccountCreate
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/ManagedAccountCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "409":
          $ref: '#/components/responses/ManagedAccountCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create a managed account
      tags:
      - Managed Accounts
  /managed_accounts/{id}:
    get:
      description: Fetch the managed account identified by the `id` in path.
      operationId: managedAccountGet
      parameters:
      - description: The unique identifier of the Managed Account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a managed account
      tags:
      - Managed Accounts
    patch:
      description: Update the details for the managed account identified by the `id`
        in the path.
      operationId: managedAccountUpdate
      parameters:
      - description: The unique identifier of the managed account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedAccountUpdateRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update a managed account
      tags:
      - Managed Accounts
  /managed_accounts/{id}/iban:
    get:
      description: Fetch the IBAN details associated with the Managed Account identified
        by the `id` in the path.
      operationId: managedAccountIBANGet
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountIBANResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a managed account IBAN
      tags:
      - Managed Accounts
    post:
      description: |
        Assign an IBAN to a Managed Account.

        IBANs enable managed accounts to receive and send funds via wire transfers.

        Assigning an IBAN to a Managed Account may be done asynchronously, in which case the `ManagedAccountIBAN.state` will be set to `PENDING_ALLOCATION` until bank details are ready to use.
      operationId: managedAccountsIBANUpgrade
      parameters:
      - description: The unique identifier of the Managed Account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountIBANResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedAccountsIBANUpgradeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Upgrade a managed account with IBAN
      tags:
      - Managed Accounts
  /managed_accounts/{id}/block:
    post:
      description: Temporarily blocks a managed account.
      operationId: managedAccountBlock
      parameters:
      - description: The unique identifier of the managed account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedAccountBlockConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Block a managed account
      tags:
      - Managed Accounts
  /managed_accounts/{id}/unblock:
    post:
      description: |
        Unblocks the managed account identified by the `id` path parameter.
        The managed account must have `state.blockedReason` as `USER` so that it can be unblocked.
        If the managed account was blocked by `SYSTEM`, users cannot unblock it.
      operationId: managedAccountUnblock
      parameters:
      - description: The unique identifier of the managed account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedAccountUnblockConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Unblock a managed account
      tags:
      - Managed Accounts
  /managed_accounts/{id}/statement:
    get:
      description: "Returns a list of transactions against the managed account identified\
        \ by the `id` path parameter, matching the criteria provided in the request."
      operationId: managedAccountStatement
      parameters:
      - description: The unique identifier of the managed account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/accept'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/orderByTimestamp'
      - $ref: '#/components/parameters/fromTimestamp'
      - $ref: '#/components/parameters/toTimestamp'
      - $ref: '#/components/parameters/showFundMovementsOnly'
      responses:
        "200":
          $ref: '#/components/responses/ManagedAccountStatementResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a managed account statement
      tags:
      - Managed Accounts
  /managed_accounts/{id}/remove:
    post:
      description: |
        Destroys the managed account identified by the `id` path parameter. Unlike block, this action is not reversible.

        A managed account must be emptied from any remaining funds before it can be destroyed.
      operationId: managedAccountRemove
      parameters:
      - description: The unique identifier of the managed account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedAccountRemoveConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Remove a managed account
      tags:
      - Managed Accounts
  /managed_cards:
    get:
      description: Fetch cards matching the search criteria provided.
      operationId: managedCardsGet
      parameters:
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/profileId'
      - $ref: '#/components/parameters/friendlyName'
      - $ref: '#/components/parameters/state'
      - $ref: '#/components/parameters/state_blockedReason'
      - $ref: '#/components/parameters/state_destroyedReason'
      - $ref: '#/components/parameters/currency'
      - $ref: '#/components/parameters/card_type'
      - description: Search by the card's `externalHandle`.
        explode: true
        in: query
        name: externalHandle
        required: false
        schema: {}
        style: form
      - description: Filter by first six digits of the card.
        explode: true
        in: query
        name: cardNumberFirstSix
        required: false
        schema:
          maxLength: 6
          minLength: 6
          pattern: "^[0-9]*$"
        style: form
      - description: Filter by last four digits of the card.
        explode: true
        in: query
        name: cardNumberLastFour
        required: false
        schema:
          maxLength: 4
          minLength: 4
          pattern: "^[0-9]*$"
        style: form
      - $ref: '#/components/parameters/createdFrom'
      - $ref: '#/components/parameters/createdTo'
      - description: Filter by card mode (prepaid mode or debit mode).
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - DEBIT_MODE
          - PREPAID_MODE
        style: form
      - $ref: '#/components/parameters/tag'
      - description: Filter by the Id of the parent managed account associated with
          the card. This is applicable only for debit mode cards.
        explode: true
        in: query
        name: parentManagedAccountId
        required: false
        schema:
          pattern: "^[0-9]+$"
        style: form
      - explode: true
        in: query
        name: manufacturingState
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ManufacturingState'
          uniqueItems: true
        style: form
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardPageResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get all managed cards
      tags:
      - Managed Cards
    post:
      description: |
        Creates a managed card for the consumer or corporate identity.
        The Managed Card Profile (configured in the Multi Portal) specified determines the behaviour and restrictions that the managed card will have.
      operationId: managedCardCreate
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "409":
          $ref: '#/components/responses/ManagedCardConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}:
    get:
      description: Returns all details of the managed card identified by the `id`
        path parameter.
      operationId: managedCardGet
      parameters:
      - description: The unique identifier of a card.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a managed card
      tags:
      - Managed Cards
    patch:
      description: Update the details of the managed card identified by the `id` path
        parameter.
      operationId: managedCardUpdate
      parameters:
      - description: The unique identifier of a card.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardUpdateRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardUpdateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}/block:
    post:
      description: Blocks the managed card identified by the `id` path parameter.
        This is a reversible action and the card can be unblocked using the _managedCardUnblock_
        operation.
      operationId: managedCardBlock
      parameters:
      - description: The unique identifier of a managed card.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardBlockConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Block a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}/unblock:
    post:
      description: |
        Unblocks the managed card identified by the `id` path parameter.
        The managed card must have `state.blockedReason` as `USER` so that it can be unblocked.
        If the managed card was blocked by `SYSTEM`, users cannot unblock it.
      operationId: managedCardUnblock
      parameters:
      - description: The unique identifier of the managed card.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardUnblockConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Unblock a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}/remove:
    post:
      description: |
        Destroys the managed card identified by the `id` path parameter. Unlike block, this action is not reversible.

        A managed card must be empty before it can be destroyed using this operation.
      operationId: managedCardRemove
      parameters:
      - description: The unique identifier of a managed card.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardRemoveConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Remove a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}/statement:
    get:
      description: "Returns a list of transactions against the managed card identified\
        \ by the `id` path parameter, matching the criteria provided in the request."
      operationId: managedCardStatement
      parameters:
      - description: The unique identifier of a managed card.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/accept'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - description: |
          Orders the result in ascending or descending order.
            - ASC: Ascending order, oldest transactions first.
            - DESC: Descending order, most recent transactions first.

          If not specified, the transactions will be returned in descending order.
        explode: true
        in: query
        name: orderByTimestamp
        required: false
        schema:
          enum:
          - ASC
          - DESC
        style: form
      - description: Filter for transactions having transaction timestamp after `fromTimestamp`.
          Timestamp is expressed in Epoch timestamp using millisecond precision.
        explode: true
        in: query
        name: fromTimestamp
        required: false
        schema:
          format: int64
        style: form
      - description: Filter for transactions having transaction timestamp before the
          `toTimestamp`. Timestamp is expressed in Epoch timestamp using millisecond
          precision.
        explode: true
        in: query
        name: toTimestamp
        required: false
        schema:
          format: int64
        style: form
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardStatementResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a managed card statement
      tags:
      - Managed Cards
  /managed_cards/assign:
    post:
      description: |
        If your application requires anonymous cards, Weavr will create a pool of cards that are initially not assigned to any identity.
        This operation assigns one such previously created managed card from the card pool to the logged-in consumer or corporate identity.
      operationId: managedCardAssign
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardAssignRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "409":
          $ref: '#/components/responses/ManagedCardAssignConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Assign a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}/spend_rules:
    delete:
      description: Remove all spend rules associated with the managed card identified
        by the `id` path parameter.
      operationId: managedCardSpendRulesDelete
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Delete all spend rules for a managed card
      tags:
      - Managed Cards
    get:
      description: Fetch the list of spend rules associated with the managed card
        identified by the `id` path parameter.
      operationId: managedCardSpendRulesGet
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardSpendRulesGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get all spend rules for a managed card
      tags:
      - Managed Cards
    patch:
      description: "Must be user after a POST, to update individual spend rules associated\
        \ with the managed card identified by the `id` path parameter."
      operationId: managedCardSpendRulesUpdate
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CardLevelSpendRulesRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardSpendRulesUpdateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Update spend rules for a managed card
      tags:
      - Managed Cards
    post:
      description: Create the spend rules associated with the managed card identified
        by the `id` path parameter.
      operationId: managedCardSpendRulesCreate
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/CardLevelSpendRulesRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardSpendRulesCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create spend rules for a managed card
      tags:
      - Managed Cards
    put:
      deprecated: true
      description: Set the spend rules associated with the managed card identified
        by the `id` path parameter.
      operationId: managedCardSpendRulesSet
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardSpendRulesRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardSpendRulesSetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardSpendRulesSetConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Set spend rules for a managed card
      tags:
      - Managed Cards
  /managed_cards/{id}/physical:
    post:
      description: |
        Upgrades the virtual card identified by the `id` path parameter to physical.

        Before cards can be upgraded, a physcial card programme must be set up and the card profile configuration updated accordingly.
      operationId: managedCardPhysicalUpgrade
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardPhysicalUpgradeRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalUpgradeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Upgrade a card to physical
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/activate:
    post:
      description: Activates the physical card identified by the `id` path paramter.
      operationId: managedCardPhysicalActivate
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardPhysicalActivateRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalActivateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Activate a physical card
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/pin:
    get:
      description: Retrieves the PIN of the physical card identified by the `id` path
        parameter.
      operationId: managedCardPhysicalPinGet
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardPhysicalPinGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalPinGetConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get PIN for a physical card
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/pin/unblock:
    patch:
      description: |
        Physical cards can be marked as `pinBlocked` if there are too many failed PIN attempts.

        Use this operation to unblock a PIN so that the card can be used again.
      operationId: managedCardPhysicalPinUnBlock
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalPinUnBlockConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Unblock PIN for a physical card
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/replace_damaged:
    post:
      description: "Report as damaged, and replace the physical card identified by\
        \ the `id` path parameter."
      operationId: managedCardPhysicalReplaceDamaged
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardPhysicalReplaceDamagedRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalReplaceDamagedConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Replace a damaged physical card
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/report_lost:
    post:
      description: Report the physical card identified by the `id` path parameter
        as lost. This will deactivate the instrument and a new card will need to be
        requested.
      operationId: managedCardPhysicalReportLost
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalReportLostConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Report a physical card as lost
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/report_stolen:
    post:
      description: |
        Report the physical card identified by the `id` path parameter as stolen. This will destroy the instrument and a new replacement card will need to be requested.

        Once a replacement is requested, any funds remaining on this destroyed card will be transferred to the replacement card."
      operationId: managedCardPhysicalReportStolen
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalReportStolenConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Report a physical card as stolen
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/replace_lost_stolen:
    post:
      description: |
        Issue a replacement for the physical card, identified by the `id` path parameter, that has already been reported as lost or stolen.

        Any funds (that are not blocked pending a purchase for a previous authorisation) remaining on the card will be automatically transferred to the new replacement card.
      operationId: managedCardPhysicalReplaceLostOrStolen
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ManagedCardPhysicalReplaceLostOrStolenRequest'
      responses:
        "200":
          $ref: '#/components/responses/ManagedCardGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalReplaceLostOrStolenConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - api_key: []
      summary: Replace a lost or stolen physical card
      tags:
      - Managed Cards
  /managed_cards/{id}/physical/contactless_limit/reset:
    post:
      description: |
        For security purposes, the cardholder needs to provide the PIN after a number of contactless purchases. Use this operation to reset the physical card's contactless limit.
        The contactless limit can only be reset for physical cards having the wearable form factor.
      operationId: managedCardPhysicalContactlessLimitReset
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "409":
          $ref: '#/components/responses/ManagedCardPhysicalContactlessLimitResetConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Reset contactless limit for a physical card
      tags:
      - Managed Cards
  /transfers:
    get:
      description: Retrieves all the transfer transactions performed by the logged-in
        identity.
      operationId: transfersGet
      parameters:
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/transferProfileId'
      - $ref: '#/components/parameters/instrumentId'
      - $ref: '#/components/parameters/transactionState'
      - $ref: '#/components/parameters/transferCreatedFrom'
      - $ref: '#/components/parameters/transferCreatedTo'
      - $ref: '#/components/parameters/transferTag'
      responses:
        "200":
          $ref: '#/components/responses/TransfersGetResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get all transfer transactions
      tags:
      - Transfers
    post:
      description: |
        Transfers funds between managed accounts and managed cards belonging to the same corporate or consumer identity.

        The Transfer Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).
      operationId: transferCreate
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/CreateTransferRequest'
      responses:
        "200":
          $ref: '#/components/responses/TransferResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/TransferConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create a transfer transaction
      tags:
      - Transfers
  /transfers/{id}:
    get:
      description: Retrieve the transfer transaction identified by the `id` path parameter.
      operationId: transferGet
      parameters:
      - description: The unique identifier of the Transfer transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/TransferResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a transfer transaction
      tags:
      - Transfers
  /sends:
    get:
      description: Retrieves all the send transactions performed by the logged-in
        identity.
      operationId: sendsGet
      parameters:
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/sendProfileId'
      - $ref: '#/components/parameters/instrumentId'
      - $ref: '#/components/parameters/sourceId'
      - $ref: '#/components/parameters/sourceType'
      - $ref: '#/components/parameters/sendState'
      - $ref: '#/components/parameters/sendCreatedFrom'
      - $ref: '#/components/parameters/sendCreatedTo'
      - $ref: '#/components/parameters/sendTag'
      responses:
        "200":
          $ref: '#/components/responses/SendsGetPageResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get all send transactions
      tags:
      - Sends
    post:
      description: |
        Sends funds between managed accounts and managed cards belonging to *different* corporate or consumer identities.

        The Send Profile (configured in the Multi Portal) specified determines the behaviour and restrictions of the transaction (for example, fees).
      operationId: sendCreate
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/SendCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/SendResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/SendCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create a send transaction
      tags:
      - Sends
  /sends/{id}:
    get:
      description: Retrieve the send transaction identified by the `id` path parameter.
      operationId: sendGet
      parameters:
      - description: The unique identifier of the Send transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/SendResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Get a send transaction
      tags:
      - Sends
  /sends/{id}/challenges/otp/{channel}:
    post:
      description: |
        Starts the verification process for a send in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.

        You should only start this process if the send `state` is `PENDING_CHALLENGE`.

        _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \"123456\"._
      operationId: sendSCAChallenge
      parameters:
      - description: The unique identifier of the send transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/channel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "409":
          $ref: '#/components/responses/SendSCAChallengeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Issue a one-time password that can be used to verify a send
      tags:
      - Sends
  /sends/{id}/challenges/otp/{channel}/verify:
    post:
      description: |
        Completes the verification process for a Send.

        If the outcome of the verification is successful, the send is executed.

        _Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \"123456\"._
      operationId: sendSCAVerify
      parameters:
      - description: The unique identifier of the send transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/channel'
      requestBody:
        $ref: '#/components/requestBodies/SCAVerifyRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/SendSCAVerifyConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Verify a send using a one-time password
      tags:
      - Sends
  /sends/{id}/challenges/push/{channel}:
    post:
      description: |
        Starts the verification process for a Send in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.

        You should only start this process if the Send transaction `state` is `PENDING_CHALLENGE`.
      operationId: sendSCAChallengePush
      parameters:
      - description: The unique identifier of the send transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/scaPushChannel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "409":
          $ref: '#/components/responses/SendSCAChallengePushConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Issue a push notification that can be used to verify Send transaction
      tags:
      - Sends
  /outgoing_wire_transfers:
    get:
      description: Retrieves all the outgoing wire transfer transactions performed
        by the logged-in identity.
      operationId: outgoingWireTransfersGet
      parameters:
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/profileId'
      - $ref: '#/components/parameters/owtInstrument'
      - $ref: '#/components/parameters/sourceInstrument_id'
      - $ref: '#/components/parameters/sourceInstrument_type'
      - $ref: '#/components/parameters/owtState'
      - description: "Filter for outgoing wire transfer transactions created after\
          \ `createdFrom` timestamp, expressed in Epoch timestamp using millisecond\
          \ precision. Leave out to fetch all outgoing wire transfer transactions."
        explode: true
        in: query
        name: createdFrom
        required: false
        schema:
          format: int64
        style: form
      - description: "Filter for Outgoing Wire Transfer transactions created before\
          \ `createdTo` timestamp, expressed in Epoch timestamp using millisecond\
          \ precision. Leave out to fetch all outgoing wire transfer transactions."
        explode: true
        in: query
        name: createdTo
        required: false
        schema:
          format: int64
        style: form
      - description: "Filter by the outgoing wire transfer tag. The exact tag must\
          \ be provided, as wildcards are not supported. Leave out to fetch all entries."
        explode: true
        in: query
        name: tag
        required: false
        schema: {}
        style: form
      responses:
        "200":
          $ref: '#/components/responses/OutgoingWireTransfersGetPageResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
      security:
      - auth_token: []
        api_key: []
      summary: Get all outgoing wire transfer transactions
      tags:
      - Outgoing Wire Transfers
    post:
      description: "Transfers funds from managed accounts to an external bank account.\n\
        \nThe Outgoing Wire Transfer Profile (configured in the Multi Portal) specified\
        \ determines the behaviour and restrictions of the transaction (for example,\
        \ fees).\n\nNote that even if the transaction is created successfully, you\
        \ still need to check its state in order to determine if it is pending completion\
        \ of an authentication challenge by the user. \n"
      operationId: outgoingWireTransferCreate
      parameters:
      - $ref: '#/components/parameters/idempotency-ref'
      requestBody:
        $ref: '#/components/requestBodies/OutgoingWireTransferCreateRequest'
      responses:
        "200":
          $ref: '#/components/responses/OutgoingWireTransferResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/OutgoingWireTransferCreateConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Create an outgoing wire transfer transaction
      tags:
      - Outgoing Wire Transfers
  /outgoing_wire_transfers/{id}:
    get:
      description: Retrieves the outgoing wire transfer identified by the `id` path
        parameter.
      operationId: outgoingWireTransferGet
      parameters:
      - description: The unique identifier of the Outgoing Wire Transfer transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      responses:
        "200":
          $ref: '#/components/responses/OutgoingWireTransferResponse'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/InstrumentForbidden'
        "404":
          $ref: '#/components/responses/NotFound'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
      security:
      - auth_token: []
        api_key: []
      summary: Get an outgoing wire transfer transaction
      tags:
      - Outgoing Wire Transfers
  /outgoing_wire_transfers/{id}/challenges/otp/{channel}:
    post:
      description: |
        Starts the verification process for an outgoing wire transfer in which a one-time password is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/otp/{channel}` endpoint.

        You should only start this process if the outgoing wire transfer `state` is `PENDING_CHALLENGE`.

        _Note that on the Sandbox Environment, text messages are not sent and the one-time-password is always \"123456\"._
      operationId: outgoingWireTransferSCAChallenge
      parameters:
      - description: The unique identifier of the Outgoing Wire Transfer transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/channel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "409":
          $ref: '#/components/responses/OutgoingWireTransferSCAChallengeConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Issue a one-time password that can be used to verify an outgoing wire
        transfer
      tags:
      - Outgoing Wire Transfers
  /outgoing_wire_transfers/{id}/challenges/otp/{channel}/verify:
    post:
      description: |
        Completes the verification process for an outgoing wire transfer.

        If the outcome of the verification is successful, the outgoing wire transfer transaction is executed.

        _Note that on the Sandbox Environment, text messages are not sent and the `verificationCode` is always \"123456\"._
      operationId: outgoingWireTransferSCAVerify
      parameters:
      - description: The unique identifier of the Outgoing Wire Transfer transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/channel'
      requestBody:
        $ref: '#/components/requestBodies/SCAVerifyRequest'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "409":
          $ref: '#/components/responses/OutgoingWireTransferSCAVerifyConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Verify an outgoing wire transfer using a one-time password
      tags:
      - Outgoing Wire Transfers
  /outgoing_wire_transfers/{id}/challenges/push/{channel}:
    post:
      description: |
        Starts the verification process for an outgoing wire transfer in which a push notification is sent to a device belonging to the logged-in user that was previously enrolled through the `/authentication_factors/push/{channel}` endpoint.

        You should only start this process if the outgoing wire transfer `state` is `PENDING_CHALLENGE`.
      operationId: outgoingWireTransferSCAChallengePush
      parameters:
      - description: The unique identifier of the Outgoing Wire Transfer transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          pattern: "^[0-9]+$"
        style: simple
      - $ref: '#/components/parameters/scaPushChannel'
      responses:
        "204":
          $ref: '#/components/responses/NoContent'
        "400":
          $ref: '#/components/responses/BadRequestError'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "409":
          $ref: '#/components/responses/OutgoingWireTransferSCAChallengePushConflict'
        "429":
          $ref: '#/components/responses/TooManyRequests'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "503":
          $ref: '#/components/responses/ServiceUnavailable'
        default:
          $ref: '#/components/responses/Error'
      security:
      - auth_token: []
        api_key: []
      summary: Issue a push notification that can be used to verify an outgoing wire
        transfer
      tags:
      - Outgoing Wire Transfers
components:
  headers:
    request-ref:
      description: A request identifier. Providing this reference when contacting
        our support team will help us investigate your query.
      explode: false
      required: true
      schema: {}
      style: simple
    x-ratelimit-limit:
      description: |
        Example: `20, 10;w=60, 20;w=3600, 200;w=86400`
        The first number (20) is the limit that has been exceeded.
        The remaining numbers are the limits that are in force, with 'w' meaning 'window in seconds'. In this example `20;w=3600` was exceeded. 20 calls in 3600secs (1hr)
      explode: false
      required: true
      schema: {}
      style: simple
    x-ratelimit-reset:
      description: The number of seconds until the window is reset.
      explode: false
      required: true
      schema:
        format: int32
        minimum: 0
      style: simple
  parameters:
    request-ref:
      description: "A unique call reference included in every call, that enables the\
        \ receiver to avoid duplicate handling of a webhook request (e.g. webhook\
        \ was resent)."
      explode: false
      in: header
      name: request-ref
      required: false
      schema: {}
      style: simple
    published-timestamp:
      description: "The timestamp, expressed in Epoch timestamp using millisecond\
        \ precision, when this event was published."
      explode: false
      in: header
      name: published-timestamp
      required: true
      schema:
        format: int64
      style: simple
    signature:
      description: The signature to verify the authenticity of this request.  This
        is the base64 hash (HmacSHA256) of the `published-timestamp` using your API
        key.
      explode: false
      in: header
      name: signature
      required: true
      schema: {}
      style: simple
    channel:
      description: The unique identifier for the channel.
      explode: false
      in: path
      name: channel
      required: true
      schema:
        $ref: '#/components/schemas/SCAOtpChannel'
      style: simple
    scaPushChannel:
      explode: false
      in: path
      name: channel
      required: true
      schema:
        $ref: '#/components/schemas/SCAPushChannel'
      style: simple
    userId:
      description: The user id for which this password is created.
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
      style: simple
    offset:
      description: "The offset value for paging, indicating the initial item number\
        \ to be returned from the data set satisfying the given criteria. Leave out\
        \ to fetch the first page of results."
      explode: true
      in: query
      name: offset
      required: false
      schema:
        format: int32
        minimum: 0
      style: form
    limit:
      description: "The limit of the results for paging, starting at the offset. Limit\
        \ is always capped at 100."
      explode: true
      in: query
      name: limit
      required: false
      schema:
        format: int32
        maximum: 100
        minimum: 1
      style: form
    active:
      description: Filter for active or deactivated users. Leave out to fetch all
        users.
      explode: true
      in: query
      name: active
      required: false
      schema: {}
      style: form
    email:
      description: Filter by the email address of the user.
      explode: true
      in: query
      name: email
      required: false
      schema:
        $ref: '#/components/schemas/Email'
      style: form
    userIdExplode:
      description: The unique identifier for the user.
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
      style: simple
    idempotency-ref:
      description: "A unique call reference generated by the caller that, taking into\
        \ consideration the payload as well as the operation itself, helps avoid duplicate\
        \ operations. Idempotency reference uniqueness is maintained for at least\
        \ 24 hours."
      explode: false
      in: header
      name: idempotency-ref
      required: false
      schema: {}
      style: simple
    profileId:
      description: Filter by the managed account/card profile. Leave out to fetch
        all managed accounts/card.
      explode: true
      in: query
      name: profileId
      required: false
      schema:
        $ref: '#/components/schemas/ProfileId'
      style: form
    friendlyName:
      description: |
        Filter by the managed account/card friendly name. Leave out to fetch all managed accounts/card.

        The exact name must be provided, as wildcards are not supported.
      explode: true
      in: query
      name: friendlyName
      required: false
      schema:
        maxLength: 50
        minLength: 1
      style: form
    state:
      explode: true
      in: query
      name: state
      required: false
      schema:
        items:
          $ref: '#/components/schemas/InstrumentState'
        uniqueItems: true
      style: form
    state_blockedReason:
      explode: true
      in: query
      name: state.blockedReason
      required: false
      schema:
        items:
          $ref: '#/components/schemas/BlockedReason'
        uniqueItems: true
      style: form
    state_destroyedReason:
      explode: true
      in: query
      name: state.destroyedReason
      required: false
      schema:
        items:
          $ref: '#/components/schemas/DestroyedReason'
        uniqueItems: true
      style: form
    currency:
      description: |
        Filter by the managed account/card currency.

        Currencies are expressed as an ISO 4217 code. Leave out to fetch all managed accounts/card.
      explode: true
      in: query
      name: currency
      required: false
      schema:
        $ref: '#/components/schemas/Currency'
      style: form
    createdFrom:
      description: Filter for managed accounts/cards created after `createdFrom` timestamp.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all managed accounts/cards.
      explode: true
      in: query
      name: createdFrom
      required: false
      schema:
        format: int64
      style: form
    createdTo:
      description: Filter for managed accounts/cards created before `createdTo` timestamp.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all managed accounts/cards.
      explode: true
      in: query
      name: createdTo
      required: false
      schema:
        format: int64
      style: form
    tag:
      description: "Filter by the managed account/card tag. The exact tag must be\
        \ provided, as wildcards are not supported. Leave out to fetch all managed\
        \ accounts/card."
      explode: true
      in: query
      name: tag
      required: false
      schema: {}
      style: form
    accept:
      description: |
        A request parameter specifying the type of response the client would like. Must be one of `application/json`, `application/pdf` or `text/csv`.

        The default response type (`application/json`) will be returned if specified incorrectly or not specified.
      explode: false
      in: header
      name: accept
      required: false
      schema: {}
      style: simple
    orderByTimestamp:
      description: |
        Orders the result in ascending or descending order.
          - ASC: Ascending order, oldest transactions first.
          - DESC: Descending order, most recent transactions first.

        If not specified, the transactions will be returned in descending order.
      explode: true
      in: query
      name: orderByTimestamp
      required: false
      schema:
        enum:
        - ASC
        - DESC
      style: form
    fromTimestamp:
      description: Filter for transactions having transaction timestamp after `fromTimestamp`.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all managed accounts.
      explode: true
      in: query
      name: fromTimestamp
      required: false
      schema:
        format: int64
      style: form
    toTimestamp:
      description: Filter for transactions having transaction timestamp before `toTimestamp`.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all managed accounts.
      explode: true
      in: query
      name: toTimestamp
      required: false
      schema:
        format: int64
      style: form
    showFundMovementsOnly:
      description: Returns only the entries which contain fund movements.
      explode: true
      in: query
      name: showFundMovementsOnly
      required: false
      schema: {}
      style: form
    card_type:
      description: Filter by the type of the card.
      explode: true
      in: query
      name: type
      required: false
      schema:
        enum:
        - VIRTUAL
        - PHYSICAL
      style: form
    transferProfileId:
      description: Filter by the transfer profile. Leave out to fetch all transfer
        transactions.
      explode: true
      in: query
      name: profileId
      required: false
      schema:
        $ref: '#/components/schemas/ProfileId'
      style: form
    instrumentId:
      description: Filter by the source instrument id.
      explode: true
      in: query
      name: instrumentId
      required: false
      schema:
        $ref: '#/components/schemas/InstrumentId'
      style: form
    transactionState:
      description: Filter by the transfer transaction state. Leave out to fetch all
        states.
      explode: true
      in: query
      name: state
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionState'
        uniqueItems: true
      style: form
    transferCreatedFrom:
      description: Filter for transfer transactions created after `createdFrom` timestamp.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all transfers.
      explode: true
      in: query
      name: createdFrom
      required: false
      schema:
        format: int64
      style: form
    transferCreatedTo:
      description: Filter for transfer transactions created before `createdTo` timestamp.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all transfers.
      explode: true
      in: query
      name: createdTo
      required: false
      schema:
        format: int64
      style: form
    transferTag:
      description: "Filter by the transfer tag. The exact tag must be provided, as\
        \ wildcards are not supported. Leave out to fetch all entries."
      explode: true
      in: query
      name: tag
      required: false
      schema: {}
      style: form
    sendProfileId:
      description: Filter by the Send profile. Leave out to fetch all entries.
      explode: true
      in: query
      name: profileId
      required: false
      schema:
        $ref: '#/components/schemas/ProfileId'
      style: form
    sourceId:
      description: Filter by the source instrument id. Must be specified when `source.type`
        is provided.
      explode: true
      in: query
      name: source.id
      required: false
      schema:
        $ref: '#/components/schemas/Id'
      style: form
    sourceType:
      description: Filter by the source instrument type. Must be specified when `source.id`
        is provided.
      explode: true
      in: query
      name: source.type
      required: false
      schema:
        $ref: '#/components/schemas/InstrumentType'
      style: form
    sendState:
      description: Filter by the Send transaction state. Leave out to fetch all states.
      explode: true
      in: query
      name: state
      required: false
      schema:
        items:
          $ref: '#/components/schemas/SendState'
        uniqueItems: true
      style: form
    sendCreatedFrom:
      description: Filter for send transactions created after `createdFrom` timestamp.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all Send transactions.
      explode: true
      in: query
      name: createdFrom
      required: false
      schema:
        format: int64
      style: form
    sendCreatedTo:
      description: Filter for send transactions created before `createdTo` timestamp.
        Timestamp is expressed in Epoch timestamp using millisecond precision. Leave
        out to fetch all Send transactions.
      explode: true
      in: query
      name: createdTo
      required: false
      schema:
        format: int64
      style: form
    sendTag:
      description: "Filter by the send tag. The exact tag must be provided, as wildcards\
        \ are not supported. Leave out to fetch all entries."
      explode: true
      in: query
      name: tag
      required: false
      schema: {}
      style: form
    owtInstrument:
      description: Filter by the source instrument id (which must be a managed account).
      explode: true
      in: query
      name: instrument
      required: false
      schema:
        properties:
          type:
            $ref: '#/components/schemas/SourceInstrumentType'
          id:
            $ref: '#/components/schemas/Id'
      style: form
    sourceInstrument_id:
      description: Filter by the source instrument id. Must be specified when `source.type`
        is provided.
      explode: true
      in: query
      name: sourceInstrument.id
      required: false
      schema:
        $ref: '#/components/schemas/Id'
      style: form
    sourceInstrument_type:
      description: Filter by the source instrument type. Must be specified when `source.id`
        is provided.
      explode: true
      in: query
      name: sourceInstrument.type
      required: false
      schema:
        $ref: '#/components/schemas/SourceInstrumentType'
      style: form
    owtState:
      description: Filter by the outgoing wire transfer state. Leave out to fetch
        all states.
      explode: true
      in: query
      name: state
      required: false
      schema:
        items:
          $ref: '#/components/schemas/OutgoingWireTransferState'
        uniqueItems: true
      style: form
  requestBodies:
    LoginWithPasswordRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/loginWithPassword_request'
      required: true
    SCAVerifyRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/stepupSCAVerify_request'
      required: true
    PasswordCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/passwordCreate_request'
      required: true
    PasswordUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/passwordUpdate_request'
      required: true
    PasswordValidateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/passwordCreate_request'
      required: true
    EmailRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lostPasswordInitiate_request'
      required: true
    LostPasswordResumeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/lostPasswordResume_request'
      required: true
    AccessTokenRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestAccessToken_request'
      required: true
    UserCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userCreate_request'
      required: true
    UserPatchRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userUpdate_request'
      required: true
    UserInviteValidateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userInviteValidate_request'
      required: true
    UserInviteConsumeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/userInviteConsume_request'
      required: true
    CorporateCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/corporateCreate_request'
      required: true
    CorporateUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/corporateUpdate_request'
      required: true
    EmailVerifyRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/authorisedUserEmailVerify_request'
      required: true
    ChargeFeeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fee'
      required: true
    ConsumerCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumerCreate_request'
      required: true
    ConsumerUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumerUpdate_request'
      required: true
    ConsumerKycLevelRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/consumerKycStart_request'
    ManagedAccountCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedAccountCreate_request'
      required: true
    ManagedAccountUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedAccountUpdate_request'
      required: true
    ManagedCardRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedCardRequest'
      required: true
    ManagedCardUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedCardUpdate_request'
      required: true
    ManagedCardAssignRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedCardAssign_request'
      required: true
    ManagedCardSpendRulesRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedCardsSpendRules'
      required: true
    CardLevelSpendRulesRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CardLevelSpendRules'
      required: true
    ManagedCardPhysicalUpgradeRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedCardPhysicalUpgrade_request'
      required: true
    ManagedCardPhysicalActivateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedCardPhysicalActivate_request'
      required: true
    ManagedCardPhysicalReplaceDamagedRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedCardPhysicalReplaceDamaged_request'
      required: true
    ManagedCardPhysicalReplaceLostOrStolenRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/managedCardPhysicalReplaceLostOrStolen_request'
      required: true
    CreateTransferRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transferCreate_request'
      required: true
    SendCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transferCreate_request'
      required: true
    OutgoingWireTransferCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/outgoingWireTransferCreate_request'
      required: true
  responses:
    LoginWithPasswordResponse:
      content:
        application/json:
          schema:
            properties:
              token:
                description: An authorisation token (valid for 5 minutes from last
                  activity) identifying the user to be used in the `auth_token` authorization
                  header for secured operations.
              tokenType:
                $ref: '#/components/schemas/TokenType'
              identity:
                $ref: '#/components/schemas/IdentityId'
              credentials:
                $ref: '#/components/schemas/TypeId'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    BadRequestError:
      content:
        application/json:
          schema:
            properties:
              message:
                description: When present helps to identify and fix the problem.
                maxLength: 255
              syntaxErrors:
                $ref: '#/components/schemas/SyntaxError'
      description: Bad Request Error - Your request is invalid.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    Unauthorized:
      description: Unauthorized - Your credentials or access token are invalid.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    LoginWithPasswordConflict:
      content:
        application/json:
          schema:
            properties:
              token:
                description: Temporary authorisation token required to initiate the
                  _passwordUpdate_ operation.
      description: The user's password has expired. Use the returned temporary token
        to update their password via the  '_/passwords/update_' endpoint.
    Locked:
      description: Locked - Account is temporarily locked due to failed consecutive
        login attempts. Try again in 30 minutes.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    TooManyRequests:
      description: Too many requests.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
        x-ratelimit-limit:
          $ref: '#/components/headers/x-ratelimit-limit'
        x-ratelimit-reset:
          $ref: '#/components/headers/x-ratelimit-reset'
    InternalServerError:
      description: Internal Server Error - There is a problem with the server. Please
        try again later.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ServiceUnavailable:
      description: Service Unavailable - We're temporarily offline for maintenance.
        Please try again later.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Error
    UserIdentitiesGetResponse:
      content:
        application/json:
          schema:
            description: The list of identities available to user.
            items:
              $ref: '#/components/schemas/UserIdentity'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    Forbidden:
      description: Forbidden - Access to the requested resource or action is forbidden.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found - The requested resource couldn't be found.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    UserIdentitiesConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - IDENTITY_TYPE_NOT_SUPPORTED
      description: Conflict
    LoginWithIamResponse:
      content:
        application/json:
          schema:
            properties:
              url: {}
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    NoContent:
      description: Success - No Content.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    MethodNotAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Method Not Allowed - The request was received but has been rejected
        for the requested resource.
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    StepUpSCAChallengeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
      description: Conflict
    StepUpSCAVerifyConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - VERIFICATION_CODE_EXPIRED
                - VERIFICATION_CODE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
      description: Conflict
    StepUpSCAChallengePushResponse:
      content:
        application/json:
          schema:
            properties:
              id:
                description: The challenge id.
                pattern: "^[0-9]+$"
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    StepUpSCAChallengePushConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - CHALLENGE_LIMIT_EXCEEDED
      description: Conflict
    LogoutResponse:
      content:
        application/json:
          schema:
            properties:
              url:
                description: The logout url for third party auth providers.
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    PasswordResponse:
      content:
        application/json:
          schema:
            properties:
              passwordInfo:
                $ref: '#/components/schemas/PasswordInfo'
              token:
                description: The authorisation token to be used in the Authorization
                  header for secured operations.
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    CreatePasswordConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - UNRESOLVED_IDENTITY
                - PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE
                - PASSWORD_TOO_SHORT
                - PASSWORD_TOO_LONG
                - PASSWORD_TOO_SIMPLE
                - PASSWORD_KEY_ALREADY_IN_USE
                - PASSWORD_ALREADY_CREATED
      description: Conflict
    PasswordUpdateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PASSWORD_ALREADY_USED
                - PASSWORD_TOO_SHORT
                - PASSWORD_TOO_LONG
                - PASSWORD_TOO_SIMPLE
                - PASSWORD_INCORRECT
      description: Conflict
    PasswordValidateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - UNRESOLVED_IDENTITY
                - PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE
                - PASSWORD_TOO_SHORT
                - PASSWORD_TOO_LONG
                - PASSWORD_TOO_SIMPLE
      description: Conflict
    LostPasswordInitiateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - MULTIPLE_ACCOUNTS_FOUND
                - ACCOUNT_NOT_FOUND
      description: Conflict
    TokenResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    LostPasswordResumeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INVALID_NONCE_OR_EMAIL
                - PASSWORD_ALREADY_USED
                - PASSWORD_TOO_SHORT
                - PASSWORD_TOO_LONG
                - PASSWORD_TOO_SIMPLE
                - PASSWORD_INCORRECT
      description: Conflict
    AuthFactorsGetResponse:
      content:
        application/json:
          schema:
            properties:
              factors:
                description: The list of challenge types the logged-in user is enrolled
                  on.
                items:
                  $ref: '#/components/schemas/SCAFactor'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    EnrolDeviceUsingOtpStepOneConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_ALREADY_REGISTERED
                - MOBILE_NUMBER_NOT_AVAILABLE
                - MOBILE_NUMBER_INVALID
                - MOBILE_COUNTRY_NOT_SUPPORTED
                - CREDENTIALS_INACTIVE
      description: Conflict
    EnrolDeviceUsingOtpStepTwoConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_ALREADY_REGISTERED
                - VERIFICATION_CODE_EXPIRED
                - VERIFICATION_CODE_INVALID
                - CREDENTIALS_INACTIVE
      description: Conflict
    EnrolDeviceUsingPushResponse:
      content:
        application/json:
          schema:
            properties:
              linkingCode:
                description: The code to link the device.
      description: Success
    InstrumentForbidden:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STEP_UP_REQUIRED
      description: Forbidden - Access to the requested resource or action is forbidden.
    EnrolDeviceUsingPushConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_READY
                - CHANNEL_ALREADY_REGISTERED
                - MOBILE_NUMBER_NOT_AVAILABLE
                - CHALLENGE_LIMIT_EXCEEDED
                - PASSCODE_NOT_SET
                - ENROLMENT_LIMIT_EXCEEDED
                - MOBILE_COUNTRY_NOT_SUPPORTED
      description: Conflict
    UnlinkDeviceUsingPushConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - CHANNEL_NOT_REGISTERED
      description: Conflict
    AccessTokenResponse:
      content:
        application/json:
          schema:
            properties:
              token: {}
              identity:
                $ref: '#/components/schemas/IdentityId'
              credentials:
                $ref: '#/components/schemas/TypeId'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    UserResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    UserCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - EMAIL_NOT_UNIQUE
                - MOBILE_NOT_UNIQUE
                - MOBILE_OR_COUNTRY_CODE_INVALID
      description: Conflict
    UsersGetResponse:
      content:
        application/json:
          schema:
            properties:
              users:
                description: The list of users matching the criteria specified.
                items:
                  $ref: '#/components/schemas/User'
              count:
                description: The total number of records (excluding the paging limit).
                format: int32
              responseCount:
                description: The total number of records returned in this response
                  (always capped at 100).
                format: int32
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    UserPatchConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - EMAIL_NOT_UNIQUE
                - MOBILE_NOT_UNIQUE
                - MOBILE_OR_COUNTRY_CODE_INVALID
                - MOBILE_NO_CHANGE_LIMIT_EXCEEDED
      description: Conflict
    UserInviteSendConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INVITE_ALREADY_CONSUMED
      description: Conflict
    UserInviteValidateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INVITE_OR_INVITE_CODE_INVALID
      description: Conflict
    UserInviteConsumeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INVITE_OR_INVITE_CODE_INVALID
                - UNRESOLVED_IDENTITY
                - PASSWORD_ALREADY_USED
                - PASSWORD_PROFILE_NOT_CONFIGURED_FOR_CREDENTIAL_TYPE
                - PASSWORD_TOO_SHORT
                - PASSWORD_TOO_LONG
                - PASSWORD_TOO_SIMPLE
                - PASSWORD_KEY_ALREADY_IN_USE
                - PASSWORD_ALREADY_CREATED
      description: Conflict
    CreateCorporateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedCorporate'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    CorporateCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PAYMENT_MODEL_CONSTRAINTS_VIOLATED
                - PROFILE_NOT_FOUND
                - PROFILE_INACTIVE
                - ROOT_EMAIL_NOT_UNIQUE
                - CURRENCY_UNSUPPORTED
                - FEE_GROUP_INVALID
                - COUNTRY_INVALID
                - TERMS_NOT_ACCEPTED
                - MOBILE_OR_COUNTRY_CODE_INVALID
                - COUNTRY_UNSUPPORTED
                - ROOT_USER_INACTIVE
                - ROOT_EMAIL_NOT_VERIFIED
                - KYC_APPROVAL_MISSING
                - PROFILE_MISMATCH
      description: Conflict
    CorporateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Corporate'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    CorporateUpdateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - FEE_GROUP_INVALID
                - COUNTRY_INVALID
                - EMAIL_NOT_UNIQUE
                - MOBILE_NOT_UNIQUE
                - ROOT_USER_ALREADY_VERIFIED
                - COUNTRY_UNSUPPORTED
                - MOBILE_OR_COUNTRY_CODE_INVALID
                - MOBILE_NO_CHANGE_LIMIT_EXCEEDED
      description: Conflict
    EmailVerificationConflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/authorisedUserEmailVerificationCodeSend_409_response'
      description: Conflict
    VerifyConflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/authorisedUserEmailVerify_409_response'
      description: Conflict
    CorporateKybGetResponse:
      content:
        application/json:
          schema:
            properties:
              kybStatus:
                $ref: '#/components/schemas/KyiStatus'
              ongoingKybStatus:
                $ref: '#/components/schemas/KyiStatus'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ChargeFeeResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargeFee'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ChargeFeeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - UNRESOLVED_FEE_TYPE
                - UNRESOLVED_CURRENCY
                - UNRESOLVED_INSTRUMENT
                - FUNDS_INSUFFICIENT
                - IDENTITY_NOT_OWNER_OF_INSTRUMENT
      description: Conflict
    ConsumerResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Consumer'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ConsumerCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PAYMENT_MODEL_CONSTRAINTS_VIOLATED
                - PROFILE_NOT_FOUND
                - PROFILE_INACTIVE
                - ROOT_EMAIL_NOT_UNIQUE
                - CURRENCY_UNSUPPORTED
                - FEE_GROUP_INVALID
                - COUNTRY_INVALID
                - TERMS_NOT_ACCEPTED
                - MOBILE_OR_COUNTRY_CODE_INVALID
                - COUNTRY_UNSUPPORTED
      description: Conflict
    ConsumerUpdateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - FEE_GROUP_INVALID
                - COUNTRY_INVALID
                - CONSUMER_VERIFIED
                - EMAIL_NOT_UNIQUE
                - MOBILE_OR_COUNTRY_CODE_INVALID
                - COUNTRY_UNSUPPORTED
                - MOBILE_NO_CHANGE_LIMIT_EXCEEDED
      description: Conflict
    ConsumerKycStartResponse:
      content:
        application/json:
          schema:
            properties:
              reference:
                description: The reference used to initialise the KYC UI Component.
                pattern: "^[0-9]+$"
              kycLevel:
                $ref: '#/components/schemas/KycLevel'
            required:
            - kycLevel
            - reference
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ConsumerKycStartConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - KYC_ALREADY_APPROVED
                - KYC_PENDING_REVIEW
                - KYC_REJECTED
                - KYC_LEVEL_NOT_ALLOWED
      description: Conflict
    ConsumerKycGetResponse:
      content:
        application/json:
          schema:
            properties:
              fullDueDiligence:
                $ref: '#/components/schemas/KyiStatus'
              kycLevel:
                $ref: '#/components/schemas/KycLevel'
              ongoingFullDueDiligence:
                $ref: '#/components/schemas/KyiStatus'
              ongoingKycLevel:
                $ref: '#/components/schemas/KycLevel'
            required:
            - fullDueDiligence
            - ongoingFullDueDiligence
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ConsumerKycStartSumsubMobileResponse:
      content:
        application/json:
          schema:
            properties:
              verificationFlow:
                description: "Name of verification flow, to be provided to Sumsub\
                  \ Mobile SDK."
              accessToken:
                description: "The access token, to be provided to Sumsub Mobile SDK."
                pattern: "^[0-9]+$"
              identityType:
                description: "Type of identity, to be provided to Sumsub Mobile SDK."
              externalUserId:
                description: The application user identifier.
              kycProviderKey:
                description: Sumsub key.
              kycLevel:
                $ref: '#/components/schemas/KycLevel'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ConsumerKycStartSumsubMobileConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - KYC_ALREADY_APPROVED
                - KYC_PENDING_REVIEW
                - KYC_ALREADY_REJECTED
                - SOURCE_OF_FUNDS_MISSING
                - KYC_LEVEL_NOT_ALLOWED
      description: Conflict
    ManagedAccountsGetResponse:
      content:
        application/json:
          schema:
            properties:
              accounts:
                description: The filtered managed accounts list.
                items:
                  $ref: '#/components/schemas/ManagedAccount'
              count:
                description: The total number of records (excluding the paging limit).
                format: int32
              responseCount:
                description: The total number of records returned in this response
                  (always capped at 100).
                format: int32
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedAccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedAccount'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedAccountCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PROFILE_NOT_FOUND
                - PROFILE_INACTIVE
                - MODEL_CONSTRAINTS_VIOLATED
                - CURRENCY_NOT_SUPPORTED_BY_PROFILE
                - PROVIDER_NOT_SUPPORTED_BY_PROFILE
                - INSTRUMENT_NOT_FOUND
                - OWNER_IDENTITY_NOT_VERIFIED
                - IDENTITY_LIMITS_EXCEEDED
                - PROGRAMME_LIMITS_EXCEEDED
                - INNOVATOR_LIMITS_EXCEEDED
                - SYSTEM_LIMITS_EXCEEDED
      description: Conflict
    ManagedAccountIBANResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedAccountIBAN'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedAccountsIBANUpgradeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_ALREADY_UPGRADED_TO_IBAN
                - INSTRUMENT_IS_NOT_ACTIVE
                - IBAN_ALLOCATION_EXCEEDED
                - IBAN_NOT_SUPPORTED
                - IBAN_ALREADY_REQUESTED
                - OWNER_NOT_VERIFIED
      description: Conflict
    ManagedAccountBlockConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_INACTIVE
                - INSTRUMENT_ALREADY_BLOCKED
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedAccountUnblockConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_INACTIVE
                - INSTRUMENT_NOT_BLOCKED
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedAccountStatementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Statement'
        application/pdf:
          schema:
            format: binary
        text/csv:
          schema:
            items:
              $ref: '#/components/schemas/StatementEntry'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedAccountRemoveConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - BALANCE_NOT_ZERO
                - INSTRUMENT_ALREADY_REMOVED
                - INSTRUMENT_HAS_PENDING_ACTIONS
                - INSTRUMENT_HAS_LINKED_CARDS
      description: Conflict
    ManagedCardResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedCard'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PAYMENT_MODEL_CONSTRAINTS_VIOLATED
                - PROFILE_NOT_FOUND
                - PROFILE_INACTIVE
                - CURRENCY_NOT_SUPPORTED_BY_PROFILE
                - PROVIDER_NOT_SUPPORTED_BY_PROFILE
                - INSTRUMENT_NOT_FOUND
                - COUNTRY_INVALID
                - OWNER_IDENTITY_NOT_VERIFIED
                - IDENTITY_LIMITS_EXCEEDED
                - PROGRAMME_LIMITS_EXCEEDED
                - INNOVATOR_LIMITS_EXCEEDED
                - SYSTEM_LIMITS_EXCEEDED
                - PARENT_MANAGED_ACCOUNT_NOT_ACTIVE
                - PARENT_MANAGED_ACCOUNT_NOT_FOUND
                - WALLETS_NOT_ENABLED
                - WALLET_ARTWORK_NOT_SPECIFIED
                - WALLET_ARTWORK_INVALID
                - IDENTITY_KYC_LEVEL_STEPUP_REQUIRED
                - PUSHPROVISIONING_NOT_ENABLED
                - AUTH_FORWARDING_NOT_ENABLED
      description: Conflict
    ManagedCardPageResponse:
      content:
        application/json:
          schema:
            properties:
              cards:
                items:
                  $ref: '#/components/schemas/ManagedCard'
              count:
                description: The total number of records (excluding the paging limit).
                format: int32
              responseCount:
                description: The total number of records returned in this response
                  (always capped at 100).
                format: int32
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardUpdateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_DESTROYED
                - INSTRUMENT_NOT_PHYSICAL
                - COUNTRY_INVALID
                - WALLETS_NOT_ENABLED
                - WALLET_ARTWORK_NOT_SPECIFIED
                - WALLET_ARTWORK_INVALID
                - PUSHPROVISIONING_NOT_ENABLED
                - AUTH_FORWARDING_NOT_ENABLED
      description: Conflict
    ManagedCardBlockConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_ALREADY_BLOCKED
                - INSTRUMENT_DESTROYED
                - INSTRUMENT_MARKED_LOST_STOLEN
      description: Conflict
    ManagedCardUnblockConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_BLOCKED
                - INSTRUMENT_DESTROYED
                - INSTRUMENT_MARKED_LOST_STOLEN
      description: Conflict
    ManagedCardRemoveConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - BALANCE_NOT_ZERO
                - INSTRUMENT_ALREADY_REMOVED
      description: Conflict
    ManagedCardStatementResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Statement'
        text/csv:
          schema:
            items:
              $ref: '#/components/schemas/StatementEntry'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardGetResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedCard'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardAssignConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - IDENTITY_NOT_VERIFIED
                - IDENTITY_NOT_ACTIVE
                - CARD_ALREADY_ASSIGNED
                - ACTIVATION_CODE_INVALID
                - INSTRUMENT_NOT_FOUND
                - PROFILE_NOT_FOUND
                - MODEL_CONSTRAINTS_VIOLATED
                - IDENTITY_KYC_LEVEL_STEPUP_REQUIRED
                - AUTH_FORWARDING_NOT_ENABLED
      description: Conflict
    ManagedCardSpendRulesGetResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllLevelSpendRules'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardSpendRulesSetResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ManagedCardsSpendRules'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardSpendRulesSetConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY
                - SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD
                - SPEND_LIMIT_DUPLICATE_INTERVAL
                - SPEND_LIMIT_AMOUNT_INVALID
      description: Conflict
    ManagedCardSpendRulesCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY
                - SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD
                - SPEND_LIMIT_DUPLICATE_INTERVAL
                - SPEND_LIMIT_AMOUNT_INVALID
                - SPEND_RULE_ALREADY_SET
      description: Conflict
    ManagedCardSpendRulesUpdateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - SPEND_LIMIT_CURRENCY_DIFFERENT_FROM_CARD_CURRENCY
                - SPEND_LIMIT_NOT_SUPPORTED_FOR_PREPAID_MODE_CARD
                - SPEND_LIMIT_DUPLICATE_INTERVAL
                - SPEND_LIMIT_AMOUNT_INVALID
      description: Conflict
    ManagedCardPhysicalUpgradeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_ALREADY_UPGRADED_TO_PHYSICAL
                - CONFIG_ERROR_PRODUCT_REFERENCE
                - PRODUCT_REFERENCE_NOT_SPECIFIED
                - PRODUCT_REFERENCE_INVALID
                - CONFIG_ERROR_CARRIER_TYPE
                - CARRIER_TYPE_NOT_SPECIFIED
                - CARRIER_TYPE_INVALID
                - CONFIG_ERROR_CARD_BUREAU
                - INSTRUMENT_BLOCKED
                - INSTRUMENT_DESTROYED
                - PIN_INVALID_FORMAT
                - PARENT_MANAGED_ACCOUNT_BLOCKED
                - MAX_PRINT_CHARACTERS_EXCEEDED
      description: Conflict
    ManagedCardPhysicalActivateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - INSTRUMENT_ALREADY_ACTIVATED
                - ACTIVATION_CODE_INVALID
                - INSTRUMENT_BLOCKED
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedCardPhysicalPinGetResponse:
      content:
        application/json:
          schema:
            properties:
              pin:
                $ref: '#/components/schemas/SensitivePin'
            required:
            - pin
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    ManagedCardPhysicalPinGetConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - PHYSICAL_CARD_NOT_ACTIVATED
                - PIN_NOT_SET
                - PIN_TRIES_EXCEEDED
                - INSTRUMENT_BLOCKED
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedCardPhysicalPinUnBlockConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - PHYSICAL_CARD_NOT_ACTIVATED
                - INSTRUMENT_BLOCKED
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedCardPhysicalReplaceDamagedConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - PHYSICAL_CARD_NOT_ACTIVATED
                - INSTRUMENT_ALREADY_DESTROYED
                - INSTRUMENT_ALREADY_PENDING_REPLACEMENT
                - INSTRUMENT_MARKED_AS_LOST
                - MAX_PRINT_CHARACTERS_EXCEEDED
      description: Conflict
    ManagedCardPhysicalReportLostConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - INSTRUMENT_ALREADY_MARKED_LOST
                - INSTRUMENT_ALREADY_MARKED_STOLEN
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedCardPhysicalReportStolenConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - PHYSICAL_CARD_NOT_ACTIVATED
                - INSTRUMENT_ALREADY_MARKED_STOLEN
                - INSTRUMENT_ALREADY_MARKED_LOST
                - INSTRUMENT_DESTROYED
      description: Conflict
    ManagedCardPhysicalReplaceLostOrStolenConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - INSTRUMENT_NOT_MARKED_LOST_OR_STOLEN
                - INSTRUMENT_DESTROYED
                - INSTRUMENT_ALREADY_REPLACED
                - PARENT_MANAGED_ACCOUNT_NOT_ACTIVE
                - MAX_PRINT_CHARACTERS_EXCEEDED
      description: Conflict
    ManagedCardPhysicalContactlessLimitResetConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - INSTRUMENT_NOT_PHYSICAL
                - PHYSICAL_CARD_NOT_ACTIVATED
                - INSTRUMENT_BLOCKED
                - INSTRUMENT_DESTROYED
                - PHYSICAL_CARD_TYPE_NOT_SUPPORTED
      description: Conflict
    TransferResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    TransferConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PROFILE_INACTIVE
                - MODEL_CONSTRAINTS_VIOLATED
                - INTERCEPTOR_DENIED_TRANSACTION
                - INSTRUMENT_DENIED_TRANSACTION
                - SOURCE_INSTRUMENT_DESTROYED
                - DESTINATION_INSTRUMENT_DESTROYED
                - FOREX_TRADE_DENIED_TRANSACTION
                - CURRENCY_MISMATCH
                - SOURCE_INSTRUMENT_BLOCKED
                - DESTINATION_INSTRUMENT_BLOCKED
                - FUNDS_INSUFFICIENT
                - AMOUNT_INVALID
                - SOURCE_NOT_FOUND
                - DESTINATION_NOT_FOUND
                - FEE_NOT_CONFIGURED_FOR_CURRENCY
                - DESTINATION_LIMIT_EXCEEDED
                - SOURCE_CANNOT_BE_DEBIT_MODE_CARD
                - DESTINATION_CANNOT_BE_DEBIT_MODE_CARD
                - TRANSFER_BETWEEN_INSTRUMENTS_UNSUPPORTED
                - SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT
      description: Conflict
    TransfersGetResponse:
      content:
        application/json:
          schema:
            properties:
              transfer:
                items:
                  $ref: '#/components/schemas/Transfer'
              count:
                description: Total number of records (excluding the paging limit).
                format: int32
              responseCount:
                description: Total number of records returned in this response.
                format: int32
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    SendResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Send'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    SendCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PROFILE_INACTIVE
                - MODEL_CONSTRAINTS_VIOLATED
                - INTERCEPTOR_DENIED_TRANSACTION
                - INSTRUMENT_DENIED_TRANSACTION
                - FOREX_TRADE_DENIED_TRANSACTION
                - CURRENCY_MISMATCH
                - SOURCE_INSTRUMENT_BLOCKED
                - DESTINATION_INSTRUMENT_BLOCKED
                - SOURCE_NOT_FOUND
                - DESTINATION_NOT_FOUND
                - FEE_NOT_CONFIGURED_FOR_CURRENCY
                - DESTINATION_LIMIT_EXCEEDED
                - FUNDS_INSUFFICIENT
                - AMOUNT_INVALID
                - SOURCE_CANNOT_BE_DEBIT_MODE_CARD
                - DESTINATION_CANNOT_BE_DEBIT_MODE_CARD
                - SEND_TO_INSTRUMENT_UNSUPPORTED
                - SOURCE_INSTRUMENT_DESTROYED
                - DESTINATION_INSTRUMENT_DESTROYED
                - SOURCE_AND_DESTINATION_MUST_BE_DIFFERENT
                - IDENTITY_KYC_LEVEL_STEPUP_REQUIRED
                - DESTINATION_BELONGS_TO_SAME_IDENTITY
                - SOURCE_AND_DESTINATION_MUST_BE_IN_SAME_PROGRAMME
            required:
            - errorCode
      description: Conflict
    SendsGetPageResponse:
      content:
        application/json:
          schema:
            properties:
              send:
                items:
                  $ref: '#/components/schemas/Send'
              count:
                description: Total number of records (excluding the paging limit).
                format: int32
              responseCount:
                description: Total number of records returned in this response.
                format: int32
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    SendSCAChallengeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - SCA_EXEMPTION_APPLIED
      description: Conflict
    SendSCAVerifyConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - VERIFICATION_CODE_EXPIRED
                - VERIFICATION_CODE_INVALID
                - SCA_EXEMPTION_APPLIED
      description: Conflict
    SendSCAChallengePushConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - CHALLENGE_LIMIT_EXCEEDED
                - SCA_EXEMPTION_APPLIED
      description: Conflict
    OutgoingWireTransferResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OutgoingWireTransfer'
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    OutgoingWireTransferCreateConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - PROFILE_INACTIVE
                - MODEL_CONSTRAINTS_VIOLATED
                - INTERCEPTOR_DENIED_TRANSACTION
                - INSTRUMENT_DENIED_TRANSACTION
                - CURRENCY_MISMATCH
                - SOURCE_INSTRUMENT_BLOCKED
                - SOURCE_INSTRUMENT_DESTROYED
                - AMOUNT_INVALID
                - FUNDS_INSUFFICIENT
                - SOURCE_NOT_FOUND
                - FEE_NOT_CONFIGURED_FOR_CURRENCY
                - TYPE_NOT_SUPPORTED_BY_PROFILE
                - IDENTITY_KYC_LEVEL_STEPUP_REQUIRED
      description: Conflict
    OutgoingWireTransfersGetPageResponse:
      content:
        application/json:
          schema:
            properties:
              transfer:
                items:
                  $ref: '#/components/schemas/OutgoingWireTransfer'
              count:
                description: Total number of records (excluding the paging limit)
                format: int32
              responseCount:
                description: Total number of records returned in this response (always
                  capped at 100).
                format: int32
      description: Success
      headers:
        request-ref:
          $ref: '#/components/headers/request-ref'
    OutgoingWireTransferSCAChallengeConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                description: |
                  Error codes:
                    * `STATE_INVALID` - The transaction no longer requires additional verification, it was either cancelled or completed.
                    * `CHANNEL_NOT_SUPPORTED` - The channel selected cannot be used to verify this type of transaction.
                    * `CHANNEL_NOT_REGISTERED` - The channel selected must be enrolled to receive one-time passwords before it can be used to verify this type of transaction.
                    * `SCA_EXEMPTION_APPLIED` - The transaction no longer requires additional verification, it was proceeded via PSD2 Regulation low value SCA exemption, it is either cancelled or completed.
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - SCA_EXEMPTION_APPLIED
      description: Conflict
    OutgoingWireTransferSCAVerifyConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - VERIFICATION_CODE_EXPIRED
                - VERIFICATION_CODE_INVALID
                - SCA_EXEMPTION_APPLIED
      description: Conflict
    OutgoingWireTransferSCAChallengePushConflict:
      content:
        application/json:
          schema:
            properties:
              errorCode:
                enum:
                - STATE_INVALID
                - CHANNEL_NOT_SUPPORTED
                - CHANNEL_NOT_REGISTERED
                - CHALLENGE_LIMIT_EXCEEDED
                - SCA_EXEMPTION_APPLIED
      description: Conflict
  schemas:
    Email:
      description: E-mail Address of the user
      format: email
    VerificationCode:
      description: A randomly generated one-time use code used to verify the user's
        email address or mobile number.
      maxLength: 6
      minLength: 6
      pattern: "^[0-9]+$"
    Error:
      properties:
        code: {}
        message: {}
    ManufacturingState:
      description: |
        Information on the manufacturing of the physical card, as follows:
          - REQUESTED: The upgrade of the card to physical has been requested.
          - SENT_FOR_FULFILLMENT - The card has been sent for printing.
          - DISPATCHED: The card has been manufactured and dispatched.
          - DELIVERED: The card has been received and activated by the recipient.
      enum:
      - REQUESTED
      - SENT_FOR_FULFILLMENT
      - DISPATCHED
      - DELIVERED
    CardAuthorisationEvent:
      discriminator:
        mapping:
          PREPAID_MODE: '#/components/schemas/PrepaidModeCardAuthorisationEvent'
          DEBIT_MODE: '#/components/schemas/DebitModeCardAuthorisationEvent'
        propertyName: mode
      properties:
        cardId:
          description: The unique identifier of the card on which an authorisation
            is being performed
          pattern: "^[0-9]+$"
        transactionId:
          description: "The id of this transaction, for reference."
          pattern: "^[0-9]+$"
        authorisationType:
          $ref: '#/components/schemas/CardAuthorisationDetailsAuthorisationType'
        sourceAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        transactionAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        totalTransactionCost:
          $ref: '#/components/schemas/CurrencyAmount'
        transactionTimestamp:
          description: "The timestamp of the transaction, using epoch timestamp with\
            \ millisecond precision."
          format: int64
        merchantData:
          $ref: '#/components/schemas/MerchantData'
        owner:
          $ref: '#/components/schemas/IdentityId'
        cardholderPresent:
          $ref: '#/components/schemas/CardHolderPresent'
        cardPresent:
          description: Optional detail indicating if the card was present when the
            authorisation occurred.
        authCode:
          description: The authorisation code associated with this authorisation.
          maxLength: 6
          minLength: 1
        forexPadding:
          $ref: '#/components/schemas/CurrencyAmount'
        forexFee:
          $ref: '#/components/schemas/CurrencyAmount'
        mode:
          description: |
            The card can be created in prepaid mode or debit mode.

            - A prepaid mode card has its own balance and can have funds transferred to or from it.
            - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.
      required:
      - authorisationType
      - cardId
      - merchantData
      - owner
      - sourceAmount
      - totalTransactionCost
      - transactionAmount
      - transactionId
      - transactionTimestamp
    SCAOtpChannel:
      description: |
        - "SMS": The one-time-password is sent as a text message
      enum:
      - SMS
    SCAPushChannel:
      description: |
        - "AUTHY": The push notification is sent on the user's device using [Twilio Authy](https://www.twilio.com/authy)
        - "BIOMETRIC": The push notification is sent to the user's device
      enum:
      - AUTHY
      - BIOMETRIC
    UserId:
      pattern: "^[0-9]+$"
    ProfileId:
      description: |
        The profile Id which a specific identity, instrument or transaction type is linked to.

        Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

        You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

        Profile Ids can be found in the Multi Portal, in the API Credentials page.
      pattern: "^[0-9]+$"
    InstrumentState:
      description: |
        The state of the instrument indicating what it can and cannot do as follows:
          - ACTIVE: The instrument is in an active state and can be used in transactions.
          - BLOCKED: The instrument is temporarily blocked and cannot be used. Any funds on the instrument are also frozen. The `blockedReason` provides more information as to why it was blocked.
          - DESTROYED: The instrument has been permanently destroyed. The `destroyReason` provides more information as to why it was destroyed.
      enum:
      - ACTIVE
      - BLOCKED
      - DESTROYED
    BlockedReason:
      description: |
        The reason why the instrument has been blocked:
          - USER: The root, or an authorised user, of the identity owning the instrument has temporarily blocked the instrument.
          - SYSTEM: The platform or an administrator of the platform has temporarily blocked the instrument.
          - LOST: The instrument has been blocked because it was marked as lost.
      enum:
      - USER
      - SYSTEM
      - LOST
    DestroyedReason:
      description: |
        The reason why the instrument has been destroyed:
          - SYSTEM: The platform or an administrator of the platform has destroyed the instrument.
          - USER: The root, or an authorised user, of the identity owning the instrument has destroyed the instrument.
          - LOST: The instrument was automatically destroyed as it was marked as lost.
          - STOLEN: The instrument was automatically destroyed as it was marked as stolen.
          - EXPIRED: The instrument was automatically destroyed as it expired.
      enum:
      - SYSTEM
      - USER
      - LOST
      - STOLEN
      - EXPIRED
    Currency:
      description: "The currency expressed in ISO-4217 code. Example: GBP, EUR, USD."
      maxLength: 3
      minLength: 3
      pattern: "^[A-Z]*$"
    InstrumentId:
      example:
        id: ""
        type: null
      properties:
        id:
          pattern: "^[0-9]+$"
        type:
          $ref: '#/components/schemas/InstrumentType'
      required:
      - id
      - type
    TransactionState:
      description: Status of the transaction.
      enum:
      - INITIALISED
      - COMPLETED
      - REJECTED
      - FAILED
      - PENDING
    Id:
      pattern: "^[0-9]+$"
    InstrumentType:
      enum:
      - managed_cards
      - managed_accounts
    SendState:
      description: |
        The state of the send transaction, as follows:
         - INITIALISED: The initial state of a send transaction when SCA is not required.
         - PENDING_CHALLENGE: The send transaction requires verification before it can be initialised. Use the /sends/{id}/challenges/otp/{channel} API endpoint to start the verification process.
         - PENDING:  The transaction has exceeded the destination limit and is pending treasury approval.
         - APPROVED: The send transaction was approved.
         - COMPLETED: The send transaction has been completed.
         - REJECTED: The send transaction was rejected.
         - FAILED: There was an issue with the send transaction, and the transaction has failed.
      enum:
      - INITIALISED
      - COMPLETED
      - REJECTED
      - FAILED
      - PENDING
      - PENDING_CHALLENGE
      - APPROVED
    SourceInstrumentType:
      enum:
      - managed_accounts
    OutgoingWireTransferState:
      description: |
        The state of the Outgoing wire transfer transaction, as follows:
          - PENDING_CHALLENGE: The wire transfer requires verification before it can be submitted. _Use the `/outgoing_wire_transfers/{id}/challenges/otp/{channel}` API endpoint to start the verification process._
          - SUBMITTED: The wire transfer has been initiated over the selected route.
          - REJECTED: The wire transfer submitted was rejected.
          - APPROVED: The wire transfer submission was approved.
          - FAILED: There was an issue with the wire transfer, and the transaction has failed.
          - COMPLETED: The requested funds have been sent from the source instrument.
      enum:
      - PENDING_CHALLENGE
      - SUBMITTED
      - REJECTED
      - APPROVED
      - FAILED
      - COMPLETED
    SensitivePassword:
      description: |
        The user's password or passcode used to log in a user.
        Passwords must be:
          - between 8 and 30 characters
          - include a lowercase character
          - include an uppercase character
          - include a digit and a special character
          - different from any of the 5 last such passwords used.

        For non-PCI compliant integrations, the password submitted must be **tokenised**.
      properties:
        value:
          format: password
          maxLength: 100
      required:
      - value
    Nonce:
      description: A randomly generated one-time use code.
      maxLength: 50
      pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:.[a-zA-Z0-9_-]+)*$"
    IdentityId:
      properties:
        type:
          description: Indicates the identity type.
          enum:
          - CONSUMER
          - CORPORATE
        id:
          description: The identifier for the identity.
          pattern: "^[0-9]+$"
      required:
      - id
      - type
    Mobile:
      properties:
        countryCode:
          description: The country code of the Corporate's root user mobile number
            (e.g. +44).
          maxLength: 6
          minLength: 1
        number:
          description: The mobile number of the Corporate's root user - excluding
            country code.
          maxLength: 15
          minLength: 1
          pattern: "^[0-9]+$"
      required:
      - countryCode
      - number
    Date:
      properties:
        year:
          format: int32
          maximum: 2100
          minimum: 1900
        month:
          format: int32
          maximum: 12
          minimum: 1
        day:
          format: int32
          maximum: 31
          minimum: 1
      required:
      - day
      - month
      - year
    Tag:
      description: The tag field is a custom field that can be used to search and
        filter.
      maxLength: 50
      pattern: "^[a-zA-Z0-9_-]+$"
    CompanyPosition:
      description: The company position of the Corporate Root User.
      enum:
      - DIRECTOR
      - AUTHORISED_REPRESENTATIVE
    CompanyType:
      description: "Supported company types - if company type is not listed, please\
        \ contact our support team to check if the company type can be supported."
      enum:
      - SOLE_TRADER
      - LLC
      - PUBLIC_LIMITED_COMPANY
      - LIMITED_LIABILITY_PARTNERSHIP
      - NON_PROFIT_ORGANISATION
    Address:
      example:
        country: ""
        city: ""
        addressLine1: ""
        addressLine2: ""
        postCode: ""
        state: ""
      properties:
        addressLine1:
          description: The first line of the address.
          maxLength: 150
        addressLine2:
          description: The second line of the address.
          maxLength: 150
        city:
          description: The city of the address.
          maxLength: 50
        postCode:
          description: The post cost associated with the address.
          maxLength: 10
          pattern: "^[A-Za-z0-9 -]*$"
        state:
          description: The state of the address.
          maxLength: 50
        country:
          description: The country of the address expressed in ISO 3166 alpha-2 format.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
      required:
      - addressLine1
      - city
      - country
      - postCode
    Industry:
      deprecated: true
      description: The industry of the identity.
      enum:
      - ACCOUNTING
      - AUDIT
      - FINANCE
      - PUBLIC_SECTOR_ADMINISTRATION
      - ART_ENTERTAINMENT
      - AUTO_AVIATION
      - BANKING_LENDING
      - BUSINESS_CONSULTANCY_LEGAL
      - CONSTRUCTION_REPAIR
      - EDUCATION_PROFESSIONAL_SERVICES
      - INFORMATIONAL_TECHNOLOGIES
      - TOBACCO_ALCOHOL
      - GAMING_GAMBLING
      - MEDICAL_SERVICES
      - MANUFACTURING
      - PR_MARKETING
      - PRECIOUS_GOODS_JEWELRY
      - NON_GOVERNMENTAL_ORGANIZATION
      - INSURANCE_SECURITY
      - RETAIL_WHOLESALE
      - TRAVEL_TOURISM
      - FREELANCER
    CorporateSourceOfFunds:
      deprecated: true
      description: The corporate's source of funds.
      enum:
      - LABOUR_CONTRACT
      - CIVIL_CONTRACT
      - RENT
      - FUNDS_FROM_OTHER_AUXILIARY_SOURCES
      - SALE_OF_MOVABLE_ASSETS
      - SALE_OF_REAL_ESTATE
      - ORDINARY_BUSINESS_ACTIVITY
      - DIVIDENDS
      - LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS
      - LOAN_FROM_THIRD_PARTIES
      - SALE_OF_COMPANY_SHARES_BUSINESS
      - OTHER
    Fee:
      example:
        source:
          id: ""
          type: null
        feeType: ""
      properties:
        feeType:
          description: The fee type as defined in the Multi Portal.
        source:
          $ref: '#/components/schemas/InstrumentId'
      required:
      - feeType
      - source
    Occupation:
      deprecated: true
      description: The industry of the identity.
      enum:
      - ACCOUNTING
      - AUDIT
      - FINANCE
      - PUBLIC_SECTOR_ADMINISTRATION
      - ART_ENTERTAINMENT
      - AUTO_AVIATION
      - BANKING_LENDING
      - BUSINESS_CONSULTANCY_LEGAL
      - CONSTRUCTION_REPAIR
      - EDUCATION_PROFESSIONAL_SERVICES
      - INFORMATIONAL_TECHNOLOGIES
      - TOBACCO_ALCOHOL
      - GAMING_GAMBLING
      - MEDICAL_SERVICES
      - MANUFACTURING
      - PR_MARKETING
      - PRECIOUS_GOODS_JEWELRY
      - NON_GOVERNMENTAL_ORGANIZATION
      - INSURANCE_SECURITY
      - RETAIL_WHOLESALE
      - TRAVEL_TOURISM
      - FREELANCER
      - STUDENT
      - UNEMPLOYED
      - RETIRED
      - OTHER
    AddressWithNoRequiredFields:
      description: "The address, with none of the separate fields being set as required."
      properties:
        addressLine1:
          description: The first line of the address.
        addressLine2:
          description: The second line of the address.
        city:
          description: The city of the address.
        postCode:
          description: The post cost associated with the address.
          maxLength: 10
          pattern: "^[A-Za-z0-9 -]*$"
        state:
          description: The state of the address.
          maxLength: 50
        country:
          description: The country of the address expressed in ISO 3166 alpha-2 format.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
    Nationality:
      description: Nationality of the user - using ISO 3166 alpha-2.
      maxLength: 2
      minLength: 2
      pattern: "^[A-Z]+$"
    ConsumerSourceOfFunds:
      deprecated: true
      description: The consumer's source of funds.
      enum:
      - PERSONAL_SAVINGS
      - FAMILY_SAVINGS
      - LABOUR_CONTRACT
      - CIVIL_CONTRACT
      - RENT
      - FUNDS_FROM_OTHER_AUXILIARY_SOURCES
      - SALE_OF_MOVABLE_ASSETS
      - SALE_OF_REAL_ESTATE
      - ORDINARY_BUSINESS_ACTIVITY
      - DIVIDENDS
      - LOAN_FROM_FINANCIAL_INSTITUTIONS_CREDIT_UNIONS
      - LOAN_FROM_THIRD_PARTIES
      - INHERITANCE
      - SALE_OF_COMPANY_SHARES_BUSINESS
      - OTHER
    KycLevel:
      description: "The KYC level, which determines what KYC information will be requested\
        \ from the consumer:\n  - KYC_LEVEL_1: The most basic level of KYC required.\
        \ \n  - KYC_LEVEL_2: Full due diligence level 2\n"
      enum:
      - KYC_LEVEL_1
      - KYC_LEVEL_2
    ManagedCardRequest:
      discriminator:
        mapping:
          PREPAID_MODE: '#/components/schemas/PrepaidModeCardRequest'
          DEBIT_MODE: '#/components/schemas/DebitModeCardRequest'
        propertyName: mode
      example:
        mode: ""
        authForwardingDefaultTimeoutDecision: ""
        nameOnCard: ""
        profileId: ""
        digitalWallets:
          walletsEnabled: ""
          artworkReference: ""
          pushProvisioningEnabled: ""
        tag: ""
        billingAddress:
          country: ""
          city: ""
          addressLine1: ""
          addressLine2: ""
          postCode: ""
          state: ""
        nameOnCardLine2: ""
        friendlyName: ""
        cardholderMobileNumber: ""
      properties:
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        friendlyName:
          description: The friendly name for the card.
          maxLength: 50
          minLength: 1
        nameOnCard:
          description: |
            The card holder's name for the card.

            This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card.
            The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.
          maxLength: 27
          minLength: 1
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        nameOnCardLine2:
          description: "Line 2 of the 'name on card' field. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        cardholderMobileNumber:
          description: |
            The mobile number including country code of the card holder.

            For transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase.
          maxLength: 20
          minLength: 5
          pattern: "^\\\\+[0-9]+$"
        billingAddress:
          $ref: '#/components/schemas/Address'
        digitalWallets:
          $ref: '#/components/schemas/DigitalWallets'
        authForwardingDefaultTimeoutDecision:
          description: Default decision for auth forwarding on timeout
          enum:
          - APPROVE
          - DECLINE
        mode:
          description: |
            The card can be created in prepaid mode or debit mode.

            - A prepaid mode card has its own balance and can have funds transferred to or from it.
            - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.
      required:
      - billingAddress
      - cardholderMobileNumber
      - friendlyName
      - mode
      - nameOnCard
      - profileId
    DeliveryAddress:
      description: The delivery address where the physical card is delivered.
      properties:
        name:
          maxLength: 100
        surname:
          maxLength: 100
        addressLine1:
          maxLength: 50
          minLength: 1
        addressLine2:
          maxLength: 50
          minLength: 1
        city:
          maxLength: 20
        postCode:
          maxLength: 10
          pattern: "^[A-Za-z0-9 -]*$"
        state:
          maxLength: 50
        country:
          description: Country of the identity in ISO 3166 alpha-2 format.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
      required:
      - addressLine1
      - city
      - country
      - name
      - postCode
      - surname
    DeliveryMethod:
      description: |
        The delivery methods supported for delivering printed physical cards. If not specified, the STANDARD_DELIVERY method will be used.
      enum:
      - STANDARD_DELIVERY
      - REGISTERED_MAIL
      - COURIER
      - FIRST_CLASS_MAIL
    DigitalWallets:
      example:
        walletsEnabled: ""
        artworkReference: ""
        pushProvisioningEnabled: ""
      properties:
        pushProvisioningEnabled:
          description: Indicates whether the card is enabled for push provisioning
            in a digital wallet.
        walletsEnabled:
          description: Indicates whether the card is enabled for tokenisation in a
            digital wallet.
        artworkReference:
          description: The artwork reference that will be used if the card is enabled
            for tokenisation in a digital wallet.
    ManagedCardsSpendRules:
      allOf:
      - $ref: '#/components/schemas/BaseCardLevelSpendRules'
      - properties:
          minTransactionAmount:
            description: "The minimum transaction amount, in card currency, that is\
              \ allowed. If the transaction amount is less than this value, then the\
              \ transaction will be declined. Omit this, or set to 0 if no minimum\
              \ transaction amount is to be set."
            format: int64
            minimum: 0
          maxTransactionAmount:
            description: "The maximum transaction amount, in card currency, that is\
              \ allowed. If the transaction amount is greater than this value, then\
              \ the transaction will be declined. Omit this, or set to 0 if no maximum\
              \ transaction amount is to be set."
            format: int64
            minimum: 0
    CardLevelSpendRules:
      allOf:
      - $ref: '#/components/schemas/BaseCardLevelSpendRules'
      - properties:
          minTransactionAmount:
            description: "The minimum transaction amount, in card currency, that is\
              \ allowed. If the transaction amount is less than this value, then the\
              \ transaction will be declined."
            format: int64
            minimum: 0
          maxTransactionAmount:
            description: "The maximum transaction amount, in card currency, that is\
              \ allowed. If the transaction amount is greater than this value, then\
              \ the transaction will be declined."
            format: int64
            minimum: 0
    SensitivePin:
      description: |
        The PIN used for in-person transactions done with physical cards.

        Unless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's PIN will be tokenised.

        To show the PIN to your user, you need to embed the Display Card PIN UI Component in your application. This accepts the tokenised PIN and shows the plain text PIN to the user on screen.
      properties:
        value:
          maxLength: 24
          minLength: 4
      required:
      - value
    CurrencyAmount:
      description: The object representing a monetary amount in a particular currency.
      properties:
        currency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        amount:
          description: |
            The monetary amount, scaled to the lowest denomination of the currency.

            Example, an amount of 1000 for a EUR currency is actually 1000 Euro cents or EUR 10.00.
          format: int64
      required:
      - amount
      - currency
    OutgoingWireTransferBeneficiary:
      description: Details of the beneficiary of the outgoing wire transfer.
      properties:
        name:
          description: The beneficiary's full name.
          maxLength: 200
        address:
          description: The beneficiary's address.
          maxLength: 150
          minLength: 1
        bankName:
          description: The beneficiary's bank name.
        bankAddress:
          description: The beneficiary's bank address.
          maxLength: 150
          minLength: 1
        bankCountry:
          description: The beneficiary's bank country.
        bankAccountDetails:
          description: "Details of the beneficiary bank account, depending on the\
            \ type of transfer chosen."
          oneOf:
          - $ref: '#/components/schemas/SepaBankDetails'
          - $ref: '#/components/schemas/FasterPaymentsBankDetails'
      required:
      - bankAccountDetails
      - name
    TokenType:
      description: |
        The auth token received can only be used to access the following endpoints:
          - `/identities`
          - `/access_token`
      enum:
      - AUTH
      - ACCESS
    TypeId:
      properties:
        type:
          description: The type of user.
          enum:
          - ROOT
          - USER
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        id:
          description: The identifier of the user.
          pattern: "^[0-9]+$"
      required:
      - id
      - type
    SyntaxError:
      description: Is returned as part of an HTTP error response whenever a syntax
        error is detected. A list of the fields together with their syntax error will
        be provided.
      properties:
        invalidFields:
          items:
            properties:
              params:
                items: {}
              fieldName: {}
              error:
                enum:
                - REQUIRED
                - HAS_TEXT
                - REQUIRES
                - SIZE
                - RANGE
                - IN
                - NOT_IN
                - REGEX
                - EXACTLY
                - AT_LEAST
                - AT_MOST
                - ALL_OR_NONE
    UserIdentity:
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        name:
          description: The name of the company.
      required:
      - id
      - name
    PasswordInfo:
      description: Additional information related to the user's password.
      properties:
        identityId:
          $ref: '#/components/schemas/IdentityId'
        expiryDate:
          description: "The millisecond timestamp indicating when the password will\
            \ expire. If 0, then this password will not expire."
          format: int64
          minimum: 0
      required:
      - identityId
    TokenResponse:
      properties:
        token:
          description: An authorisation token to be used in the Authorization header
            for secured operations.
    SCAFactor:
      properties:
        type:
          $ref: '#/components/schemas/SCAChallengeType'
        status:
          $ref: '#/components/schemas/SCAFactorStatus'
        channel:
          $ref: '#/components/schemas/SCAChannel'
    User:
      properties:
        id:
          description: The unique identifier of the user.
          pattern: "^[0-9]+$"
        identity:
          $ref: '#/components/schemas/IdentityId'
        name:
          description: The first name of the user.
          maxLength: 100
        surname:
          description: The last name of the user.
          maxLength: 100
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        active:
          description: "The state of the user. If the `active` attribute is false,\
            \ then the user will not be able to log in."
        dateOfBirth:
          $ref: '#/components/schemas/Date'
      required:
      - active
      - email
      - id
      - identity
      - name
      - surname
    CreatedCorporate:
      allOf:
      - $ref: '#/components/schemas/Corporate'
      - properties:
          rootUser:
            $ref: '#/components/schemas/CreatedCorporateRootUser'
        required:
        - rootUser
    Corporate:
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        rootUser:
          $ref: '#/components/schemas/CorporateRootUser'
        company:
          $ref: '#/components/schemas/Corporate_company'
        industry:
          $ref: '#/components/schemas/Industry'
        sourceOfFunds:
          $ref: '#/components/schemas/CorporateSourceOfFunds'
        sourceOfFundsOther:
          deprecated: true
          description: Description of source of funds in case `OTHER` was chosen.
        acceptedTerms:
          description: Must be set to *true* to indicate that the root user has accepted
            the terms and conditions.
        ipAddress:
          description: The IP address of the user doing the registration.
          maxLength: 45
          minLength: 5
        baseCurrency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        feeGroup:
          description: "Fee groups allow the possibility to charge different fees\
            \ to users under the same profile. If fee groups are not required, ignore\
            \ this field."
        creationTimestamp:
          description: "The time when the Corporate was created, expressed in Epoch\
            \ timestamp using millisecond precision."
          format: int64
      required:
      - acceptedTerms
      - baseCurrency
      - company
      - creationTimestamp
      - id
      - ipAddress
      - profileId
      - rootUser
    KyiStatus:
      enum:
      - NOT_STARTED
      - INITIATED
      - PENDING_REVIEW
      - APPROVED
      - REJECTED
    ChargeFee:
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        profileId:
          description: "The profile Id which a specific identity, instrument or transaction\
            \ type is linked to."
        feeType:
          description: "The fee type as defined in the Multi Portal, and as sent in\
            \ the request."
        source:
          $ref: '#/components/schemas/InstrumentId'
        availableBalanceAdjustment:
          $ref: '#/components/schemas/CurrencyAmount'
        state:
          $ref: '#/components/schemas/TransactionState'
        creationTimestamp:
          format: int64
      required:
      - feeType
      - profileId
      - source
      - transactionId
    Consumer:
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        rootUser:
          $ref: '#/components/schemas/ConsumerRootUser'
        creationTimestamp:
          description: "The time when this consumer was created, expressed in Epoch\
            \ timestamp using millisecond precision."
          format: int64
        ipAddress:
          description: The IP address of the consumer user doing the registration.
          maxLength: 45
          minLength: 5
        acceptedTerms:
          description: Must be set to *true* to indicate that the consumer root user
            has accepted the terms and conditions.
        baseCurrency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        feeGroup:
          description: The fee group which the consumer is bound to.
        sourceOfFunds:
          $ref: '#/components/schemas/ConsumerSourceOfFunds'
        sourceOfFundsOther:
          deprecated: true
          description: Description of source of funds in case `OTHER` was chosen.
      required:
      - acceptedTerms
      - creationTimestamp
      - id
      - ipAddress
      - profileId
      - rootUser
    ManagedAccount:
      properties:
        id:
          description: The unique identifier of a Managed Account.
          pattern: "^[0-9]+$"
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        friendlyName:
          description: The friendly name given to the managed account.
          maxLength: 50
          minLength: 1
        currency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        balances:
          $ref: '#/components/schemas/ManagedInstrumentBalance'
        state:
          $ref: '#/components/schemas/ManagedInstrumentState'
        creationTimestamp:
          description: "The time when the managed account was created, expressed in\
            \ Epoch timestamp using millisecond precision."
          format: int64
      required:
      - balances
      - creationTimestamp
      - currency
      - friendlyName
      - id
      - profileId
      - state
    ManagedAccountIBAN:
      properties:
        state:
          description: |
            The state of the Managed Account's IBAN as follows:
              - UNALLOCATED: The Managed Account has never been assigned an IBAN. Use the _managedAccountsIBANUpgrade_ operation to assign an IBAN to a Managed Account.
              - PENDING_ALLOCATION: The IBAN is being allocated to the Managed Account.
              - ALLOCATED: An IBAN is allocated to the Managed Account.
          enum:
          - UNALLOCATED
          - PENDING_ALLOCATION
          - ALLOCATED
        bankAccountDetails:
          description: |-
            A list of bank account details associated with the IBAN.
            Multiple details can be provided if multiple IBAN providers are supported by your payment model.
          items:
            properties:
              beneficiaryNameAndSurname:
                description: The beneficiary name and surname details to be used when
                  initiating a deposit onto the IBAN.
              beneficiaryBank:
                description: The beneficiary bank name to be used when initiating
                  a deposit onto the IBAN.
              beneficiaryBankAddress:
                description: The beneficiary bank address to be used when initiating
                  a deposit onto the IBAN.
              paymentReference:
                description: |
                  A reference required by the partner bank to execute a deposit on the managed account.


                  If provided, make sure that this is included as part of the wire transfer details when initiating a deposit.
              details:
                anyOf:
                - $ref: '#/components/schemas/SepaBankDetails'
                - $ref: '#/components/schemas/FasterPaymentsBankDetails'
                - $ref: '#/components/schemas/SwiftBankDetails'
                description: |
                  The bank details required to initiate a deposit on the managed account.

                  The details required to deposit on the IBAN vary depending on the wire transfer channel that will be used.
            required:
            - beneficiaryBank
            - beneficiaryBankAddress
            - beneficiaryNameAndSurname
            - details
      required:
      - bankAccountDetails
      - state
    Statement:
      description: The list of statement entries.
      properties:
        entry:
          items:
            $ref: '#/components/schemas/StatementEntry'
        count:
          description: The total number of records (excluding the paging limit).
          format: int32
        responseCount:
          description: The total number of records returned in this response.
          format: int32
    StatementEntry:
      properties:
        transactionId:
          $ref: '#/components/schemas/TransactionId'
        entryState:
          $ref: '#/components/schemas/StatementEntryState'
        originalAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        forexRate:
          $ref: '#/components/schemas/ScaledAmount'
        transactionAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        availableBalanceAdjustment:
          $ref: '#/components/schemas/CurrencyAmount'
        actualBalanceAdjustment:
          $ref: '#/components/schemas/CurrencyAmount'
        balanceAfter:
          $ref: '#/components/schemas/CurrencyAmount'
        availableBalanceAfter:
          $ref: '#/components/schemas/CurrencyAmount'
        actualBalanceAfter:
          $ref: '#/components/schemas/CurrencyAmount'
        transactionFee:
          $ref: '#/components/schemas/CurrencyAmount'
        cardholderFee:
          $ref: '#/components/schemas/CurrencyAmount'
        processedTimestamp:
          description: "The timestamp when the transaction was processed by the system,\
            \ expressed in Epoch timestamp using millisecond precision."
          format: int64
        sourceAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        additionalFields:
          additionalProperties: {}
          description: "A Map of additional fields. Possible values include fee information.\
            \ The possible entries are `merchantName`, `merchantCategoryCode`, `merchantTerminalCountry`,\
            \ `sourceInstrumentType`, `sourceInstrumentId`, `destinationInstrumentType`,\
            \ `destinationInstrumentId`, `forexPaddingCurrency`, `forexPaddingAmount`,\
            \ `note`, `sourceInstrumentFriendlyName`, `destinationInstrumentFriendlyName`,\
            \ `sourceIdentityType`, `sourceIdentityId`, `sourceIdentityName`, `destinationIdentityType`,\
            \ `destinationIdentityId`, `destinationIdentityName`, `exchangeRate`,\
            \ `authorisationState`, `authorisationRelatedId`, `settlementRelatedId`,\
            \ `chargeFeeType`, `relatedTransactionId`, `relatedTransactionIdType`,\
            \ `beneficiaryName`, `beneficiaryAccount`, `beneficiaryBankCode`, `merchantId`,\
            \ `merchantTransactionType`, `systemTransactionType`, `authorisationCode`,\
            \ `relatedCardId`, `sender`, `forexFeeCurrency`, `forexFeeAmount`, `senderIban`,\
            \ `senderReference`, `mandateId`, `merchantReference`, `description`,\
            \ `declineReason` and `spendRuleFailedReason`."
      required:
      - entryState
      - processedTimestamp
      - transactionAmount
      - transactionId
    ManagedCard:
      discriminator:
        mapping:
          PREPAID_MODE: '#/components/schemas/PrepaidModeCard'
          DEBIT_MODE: '#/components/schemas/DebitModeCard'
        propertyName: mode
      properties:
        id:
          description: The unique identifier of the card.
          pattern: "^[0-9]+$"
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        externalHandle:
          description: |
            A uniquely generated code used to identify a card.

            This code is to be used instead of the sensitive card number in order to refer to a card when opening a support ticket.
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        friendlyName:
          description: The friendly name given to the card.
          maxLength: 50
          minLength: 1
        currency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        state:
          $ref: '#/components/schemas/ManagedInstrumentState'
        type:
          description: |
            The type of card:
              - VIRTUAL: Not a printed or embedded card. The card can be used online or added to digital wallets.
              - PHYSICAL: A physical card that can be printed and shipped to your customers or embedded in a Wearable device. It can be used at physical terminals.
          enum:
          - VIRTUAL
          - PHYSICAL
        cardBrand:
          description: "The card scheme, or brand of the card."
          enum:
          - MASTERCARD
          - VISA
        cardNumber:
          $ref: '#/components/schemas/SensitiveCardNumber'
        cvv:
          $ref: '#/components/schemas/SensitiveCvv'
        cardNumberFirstSix:
          description: The first six digits of the card number.
          maxLength: 6
          minLength: 6
          pattern: "^[0-9]*$"
        cardNumberLastFour:
          description: The last four digits of the card number.
          maxLength: 4
          minLength: 4
          pattern: "^[0-9]*$"
        nameOnCard:
          description: "The card holder’s name for the card. This may be verified\
            \ by merchants when the card is used online. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        nameOnCardLine2:
          description: "Line 2 of the 'name on card' field. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        startMmyy:
          description: "The start date of this card, in MMYY format."
          maxLength: 4
          minLength: 4
          pattern: "^[0-9]*$"
        expiryMmyy:
          description: "The end date of this card, in MMYY format."
          maxLength: 4
          minLength: 4
        cardLevelClassification:
          description: The card classification determines whether the card is from
            Consumer or Corporate BINs.
          enum:
          - CONSUMER
          - CORPORATE
        expiryPeriodMonths:
          description: "The validity timeframe of the card, in months."
          format: int32
          maximum: 120
          minimum: 1
        renewalType:
          description: |
            Indicates how card will be handled once it is close to expiring.
              - AUTO_RENEW: The card will be automatically renewed, keeping the same card number but with a new expiry date and CVV.
              - NO_RENEW: Once the expiry date is reached, the card is destroyed.
          enum:
          - AUTO_RENEW
          - NO_RENEW
        creationTimestamp:
          description: "The timestamp when the card was created, expressed in Epoch\
            \ timestamp using millisecond precision."
          format: int64
        cardholderMobileNumber:
          description: "The mobile number including country code of the card holder,\
            \ needed for 3DS challenge."
          maxLength: 20
          minLength: 5
          pattern: "^\\\\+[0-9]+$"
        billingAddress:
          $ref: '#/components/schemas/Address'
        physicalCardDetails:
          $ref: '#/components/schemas/PhysicalCardDetails'
        digitalWallets:
          $ref: '#/components/schemas/DigitalWallets'
        authForwardingDefaultTimeoutDecision:
          description: Default decision for auth forwarding on timeout
          enum:
          - APPROVE
          - DECLINE
        mode:
          description: |
            The mode with which this card was created:

            - A prepaid mode card has its own balance and can have funds transferred to or from it.
            - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit.
      required:
      - cardBrand
      - cardLevelClassification
      - cardholderMobileNumber
      - creationTimestamp
      - currency
      - expiryPeriodMonths
      - externalHandle
      - friendlyName
      - id
      - mode
      - nameOnCard
      - profileId
      - renewalType
      - state
      - type
    AllLevelSpendRules:
      properties:
        allowedMerchantCategories:
          description: "Whitelist MCC: A list of allowed merchant category codes (MCCs).\
            \ If the MCC does not match, then the transaction will be declined. If\
            \ an MCC is also in the blocked list, the blocked list will take precedence.\
            \ This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCategories\"\
            \ instead."
          items: {}
          maxItems: 50
        blockedMerchantCategories:
          description: "Blacklist MCC: A list of disallowed merchant category codes\
            \ (MCCs). If the MCC matches, then the transaction will be declined. If\
            \ an MCC is also in the allowed list, the blocked list will take precedence.\
            \ This field is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCategories\"\
            \ instead."
          items: {}
          maxItems: 50
        allowedMerchantIds:
          description: "Whitelist Merchant Id: A list of allowed merchant IDs. If\
            \ the Merchant Id does not match, then the transaction will be declined.\
            \ If a Merchant Id is also provided in the blocked list, the blocked list\
            \ will take precedence. This field is deprecated - use \"cardLevelSpendRules\"\
            .\"allowedMerchantIds\" instead."
          items: {}
          maxItems: 50
        blockedMerchantIds:
          description: "Blacklist Merchant Id: A list of disallowed merchant IDs.\
            \ If the Merchant Id matches, then the transaction will be declined. If\
            \ a Merchant Id is also in the allowed list, the blocked list will take\
            \ precedence. This field is deprecated - use \"cardLevelSpendRules\".\"\
            blockedMerchantIds\" instead."
          items: {}
          maxItems: 50
        allowedMerchantCountries:
          description: "Whitelist Merchant Country: A list of allowed merchant countries,\
            \ in ISO 3166-1 alpha-2 format. If the Merchant country does not match,\
            \ then the transaction will be declined. If a Merchant Country is also\
            \ provided in the blocked list, the blocked list will take precedence.\
            \ This field is deprecated - use \"cardLevelSpendRules\".\"allowedMerchantCountries\"\
            \ instead."
          items:
            maxLength: 2
            minLength: 2
            pattern: "^[A-Z]{2}$"
          maxItems: 50
        blockedMerchantCountries:
          description: "Blacklist Merchant Country: A list of disallowed merchant\
            \ countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches,\
            \ then the transaction will be declined. If a Merchant Country is also\
            \ in the allowed list, the blocked list will take precedence. This field\
            \ is deprecated - use \"cardLevelSpendRules\".\"blockedMerchantCountries\"\
            \ instead."
          items:
            maxLength: 2
            minLength: 2
            pattern: "^[A-Z]{2}$"
          maxItems: 50
        allowContactless:
          description: Indicates if a contactless transaction is allowed on the card.
            This field is deprecated - use "cardLevelSpendRules"."allowContactless"
            instead.
        allowAtm:
          description: Indicates if an ATM Withdrawal transaction is allowed on the
            card. This field is deprecated - use "cardLevelSpendRules"."allowAtm"
            instead.
        allowECommerce:
          description: Indicates if an online transaction is allowed on the card.
            This field is deprecated - use "cardLevelSpendRules"."allowECommerce"
            instead.
        allowCashback:
          description: Indicates if a cashback transaction at a physical terminal
            is allowed on the card. This field is deprecated - use "cardLevelSpendRules"."allowCashback"
            instead.
        allowCreditAuthorisations:
          description: Indicates if a the card can receive a credit transaction. This
            field is deprecated - use "cardLevelSpendRules"."allowCashback" instead.
        minTransactionAmount:
          description: "The minimum transaction amount, in card currency, that is\
            \ allowed. If the transaction amount is less than this value, then the\
            \ transaction will be declined. Omit this, or set to 0 if no maximum transaction\
            \ amount is to be set. This field is deprecated - use \"cardLevelSpendRules\"\
            .\"minTransactionAmount\" instead."
          format: int64
          minimum: 0
        maxTransactionAmount:
          description: "The maximum transaction amount, in card currency, that is\
            \ allowed. If the transaction amount is greater than this value, then\
            \ the transaction will be declined. Omit this, or set to 0 if no maximum\
            \ transaction amount is to be set. This field is deprecated - use \"cardLevelSpendRules\"\
            .\"maxTransactionAmount\" instead."
          format: int64
          minimum: 0
        spendLimit:
          description: "The total amount of funds that can be spent using this card,\
            \ in a given time interval. This field is deprecated - use \"cardLevelSpendRules\"\
            .\"spendLimit\" instead."
          items:
            $ref: '#/components/schemas/SpendLimit'
        cardLevelSpendRules:
          allOf:
          - $ref: '#/components/schemas/BaseCardLevelSpendRules'
          - properties:
              minTransactionAmount:
                description: "The minimum transaction amount, in card currency, that\
                  \ is allowed. If the transaction amount is less than this value,\
                  \ then the transaction will be declined."
                format: int64
                minimum: 0
              maxTransactionAmount:
                description: "The maximum transaction amount, in card currency, that\
                  \ is allowed. If the transaction amount is greater than this value,\
                  \ then the transaction will be declined."
                format: int64
                minimum: 0
        profileLevelSpendRules:
          allOf:
          - $ref: '#/components/schemas/CommonLevelSpendRules'
          - properties:
              authForwardingEnabled:
                description: Indicates if auth forwarding is enabled on profile level
        identityLevelSpendRules:
          allOf:
          - $ref: '#/components/schemas/CommonLevelSpendRules'
          - properties:
              minTransactionAmount:
                description: "The minimum transaction amount, in card currency, that\
                  \ is allowed. If the transaction amount is less than this value,\
                  \ then the transaction will be declined. Omit this, or set to 0\
                  \ if no maximum transaction amount is to be set."
                format: int64
                minimum: 0
              maxTransactionAmount:
                description: "The maximum transaction amount, in card currency, that\
                  \ is allowed. If the transaction amount is greater than this value,\
                  \ then the transaction will be declined."
                format: int64
                minimum: 0
    Transfer:
      properties:
        id:
          description: The unique identifier of a Transfer transaction.
          pattern: "^[0-9]+$"
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        source:
          $ref: '#/components/schemas/InstrumentId'
        destination:
          $ref: '#/components/schemas/InstrumentId'
        destinationAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        state:
          $ref: '#/components/schemas/TransactionState'
        creationTimestamp:
          description: "The time when the transaction was created, expressed in Epoch\
            \ timestamp using millisecond precision."
          format: int64
      required:
      - creationTimestamp
      - destination
      - destinationAmount
      - id
      - profileId
      - source
      - state
    Send:
      properties:
        id:
          description: The unique identifier of a send transaction.
          pattern: "^[0-9]+$"
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        source:
          $ref: '#/components/schemas/InstrumentId'
        destination:
          $ref: '#/components/schemas/InstrumentId'
        destinationAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        state:
          $ref: '#/components/schemas/SendState'
        creationTimestamp:
          description: "The time when the transaction was created, expressed in Epoch\
            \ timestamp using millisecond precision."
          format: int64
      required:
      - creationTimestamp
      - destination
      - destinationAmount
      - id
      - profileId
      - source
      - state
    OutgoingWireTransfer:
      properties:
        id:
          description: The unique identifier of an Outgoing Wire Transfer transaction.
          pattern: "^[0-9]+$"
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        sourceInstrument:
          $ref: '#/components/schemas/OutgoingWireTransfer_sourceInstrument'
        transferAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        description:
          description: ' Transaction description.'
          maxLength: 50
        type:
          description: "The wire transfer rails used, from SEPA, Faster Payments or\
            \ SWIFT."
          enum:
          - SEPA
          - FASTER_PAYMENTS
          - SWIFT
        destination:
          $ref: '#/components/schemas/OutgoingWireTransferBeneficiary'
        state:
          $ref: '#/components/schemas/OutgoingWireTransferState'
        rejectedInfo:
          $ref: '#/components/schemas/OutgoingWireTransferRejectedInfo'
        creationTimestamp:
          description: "The time when the transaction was created, expressed in Epoch\
            \ timestamp using millisecond precision."
          format: int64
      required:
      - creationTimestamp
      - destination
      - id
      - profileId
      - sourceInstrument
      - state
      - transferAmount
      - type
    CardAuthorisationDetailsAuthorisationType:
      enum:
      - AUTHORISED
      - AUTHORISED_CREDIT
    MerchantData:
      properties:
        merchantName:
          description: The name of the merchant where the authorisation has been made.
        merchantCategoryCode:
          description: The merchant category code.
        merchantId:
          description: The merchant ID.
        merchantDescription:
          description: The merchant description
        merchantStreet:
          description: The merchant street address (if available)
        merchantCity:
          description: The merchant city (if available)
        merchantState:
          description: The merchant state address (if available)
        merchantPostalCode:
          description: The merchant postal code (if available)
        merchantCountry:
          description: The merchant country address
        merchantTelephone:
          description: The merchant telephone number
        merchantURL:
          description: The merchant URL
        merchantNameOther:
          description: The alternative merchant name
        merchantNetworkId:
          description: The merchant's network id
        merchantContact:
          description: The merchant's contact (if available)
      required:
      - merchantCategoryCode
      - merchantName
    CardHolderPresent:
      enum:
      - PRESENT
      - NOT_PRESENT
      - PRESENCE_UNKNOWN
    PrepaidModeCardAuthorisationEvent:
      allOf:
      - $ref: '#/components/schemas/CardAuthorisationEvent'
      - properties:
          availableBalance:
            $ref: '#/components/schemas/CurrencyAmount'
        required:
        - currency
    DebitModeCardAuthorisationEvent:
      allOf:
      - $ref: '#/components/schemas/CardAuthorisationEvent'
      - properties:
          parentManagedAccountId:
            description: "Id of the managed account holding funds which the managed\
              \ card can access, up to a configurable spend limit."
          availableToSpend:
            description: "The amount of funds from the parent managed account that\
              \ are available to be spent through the card, in a given time interval,\
              \ _before_ this transaction is performed."
            items:
              $ref: '#/components/schemas/AvailableToSpend'
        required:
        - parentManagedAccountId
    PrepaidModeCardRequest:
      allOf:
      - $ref: '#/components/schemas/ManagedCardRequest'
      - properties:
          currency:
            $ref: '#/components/schemas/Currency'
        required:
        - currency
    DebitModeCardRequest:
      allOf:
      - $ref: '#/components/schemas/ManagedCardRequest'
      - properties:
          parentManagedAccountId:
            description: "Id of the managed account holding funds which the managed\
              \ card will access, up to a configurable spend limit."
            pattern: "^[0-9]+$"
        required:
        - parentManagedAccountId
    BaseCardLevelSpendRules:
      allOf:
      - $ref: '#/components/schemas/CommonLevelSpendRules'
      - properties:
          spendLimit:
            description: "The total amount of funds that can be spent using this card,\
              \ in a given time interval."
            items:
              $ref: '#/components/schemas/SpendLimit'
    SepaBankDetails:
      description: Bank details used in case the wire transfer is executed over SEPA.
      properties:
        iban:
          description: "International Bank Account Number, required for wire transfer\
            \ over SEPA."
          maxLength: 34
          minLength: 15
          pattern: "^[a-zA-Z]{2}[0-9]{2}[a-zA-Z0-9]{11,30}$"
        bankIdentifierCode:
          description: "BIC, required for wire transfer over SEPA."
          maxLength: 11
          minLength: 8
          pattern: "^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$"
      required:
      - bankIdentifierCode
      - iban
    FasterPaymentsBankDetails:
      description: Bank details used in case the wire transfer is executed over Faster
        Payments.
      properties:
        accountNumber:
          description: "Account number, required for wire transfer over Faster Payments."
          maxLength: 8
          minLength: 8
          pattern: "^[0-9]{8}$"
        sortCode:
          description: "Sort code, required for wire transfer over Faster Payments."
          maxLength: 6
          minLength: 6
          pattern: "^[0-9]{6}$"
      required:
      - accountNumber
      - sortCode
    SCAChallengeType:
      description: |
        - "OTP": The OTP is sent as a text message
        - "PUSH": The authorisation request is sent as a push notification
        - "BIOMETRIC": The push notification is sent via Firebase to a mobile application
      enum:
      - OTP
      - PUSH
      - BIOMETRIC
    SCAFactorStatus:
      description: |
        The state of the factor type.
        - `PENDING_VERIFICATION` : The user has started the enrolment process but still hasn't completed enrolment. Challenges cannot be used before they are verified.
        - `ACTIVE` : The user has successfully completed enrolment and the challenge can be used to verify transactions.
        - `INACTIVE` : The user has rejected the enrolment.
      enum:
      - PENDING_VERIFICATION
      - ACTIVE
      - INACTIVE
    SCAChannel:
      description: |
        - "SMS": The one-time-password is sent as a text message
        - "AUTHY": The push notification is sent to an Authy application
        - "BIOMETRIC": The push notification is sent to an innovator application
      enum:
      - SMS
      - AUTHY
      - BIOMETRIC
    CreatedCorporateRootUser:
      allOf:
      - $ref: '#/components/schemas/CorporateRootUser'
      - properties:
          passwordAlreadySet:
            description: "When the corporate root user is a single email multiple\
              \ identities user, this field returns true, indicating that there is\
              \ no need to call the `passwordCreate` operation for this user."
        required:
        - passwordAlreadySet
    CorporateRootUser:
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        name:
          description: First name of the root user.
          maxLength: 100
        surname:
          description: Last name of the root user.
          maxLength: 100
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        companyPosition:
          $ref: '#/components/schemas/CompanyPosition'
        active:
          description: "The state of the root user. If false, then the user will not\
            \ be able to log in."
        emailVerified:
          description: Indicates if the root user's email has been verified.
        mobileNumberVerified:
          description: Indicates if the root user's mobile number has been verified.
        dateOfBirth:
          $ref: '#/components/schemas/Date'
      required:
      - active
      - companyPosition
      - email
      - emailVerified
      - id
      - mobile
      - mobileNumberVerified
      - name
      - surname
    LegalAddress:
      description: The legal address of the company. This information is captured
        via the Due Diligence (KYB) process.
      properties:
        addressLine1: {}
        addressLine2: {}
        city: {}
        postCode:
          maxLength: 10
          pattern: "^[A-Za-z0-9 -]*$"
        state:
          maxLength: 50
        country:
          description: Country of the identity in ISO 3166 alpha-2 format.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
      required:
      - addressLine1
      - city
      - country
    TransactionId:
      properties:
        type:
          enum:
          - INSTRUMENT_CREATE
          - INSTRUMENT_BLOCK
          - INSTRUMENT_UNBLOCK
          - INSTRUMENT_DELETE
          - AUTHORISATION
          - SETTLEMENT
          - MANUAL_TRANSACTION
          - TRANSFER
          - SEND
          - DEPOSIT
          - AUTHORISATION_REVERSAL
          - AUTHORISATION_EXPIRY
          - AUTHORISATION_DECLINE
          - AUTHORISATION_MANUAL_CLOSE
          - MERCHANT_REFUND
          - MERCHANT_REFUND_REVERSAL
          - ORIGINAL_CREDIT_TRANSACTION
          - SETTLEMENT_REVERSAL
          - ADJUSTMENT
          - CHARGE_FEE
          - WITHDRAWAL_RESERVE
          - WITHDRAWAL_RELEASE
          - FEE_REVERSAL
          - CARD_UPGRADE_TO_PHYSICAL
          - ACTIVATE_PHYSICAL_CARD
          - INSTRUMENT_REPLACE
          - OUTGOING_WIRE_TRANSFER
          - AUTHORISATION_CANCELLATION
          - SYSTEM_TRANSACTION
          - OUTGOING_DIRECT_DEBIT_COLLECTION
          - OUTGOING_DIRECT_DEBIT_REFUND
        id:
          pattern: "^[0-9]+$"
      required:
      - id
      - type
    ConsumerRootUser:
      properties:
        id:
          $ref: '#/components/schemas/IdentityId'
        name:
          description: First name of the root user.
          maxLength: 100
        surname:
          description: Last name of the root user.
          maxLength: 100
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        occupation:
          $ref: '#/components/schemas/Occupation'
        active:
          description: "The state of the root user. If false, then the user will not\
            \ be able to log in."
        emailVerified:
          description: Indicates if the root user's email has been verified.
        mobileNumberVerified:
          description: Indicates if the root user's mobile number has been verified.
        dateOfBirth:
          $ref: '#/components/schemas/Date'
        address:
          $ref: '#/components/schemas/AddressWithNoRequiredFields'
        nationality:
          description: Nationality of the user - using ISO 3166 alpha-2.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
        placeOfBirth:
          description: The place of birth of the consumer root user.
      required:
      - active
      - email
      - emailVerified
      - id
      - mobile
      - mobileNumberVerified
      - name
      - surname
    ManagedInstrumentBalance:
      description: "Instruments with funds have 2 balances, the `availableBalance`\
        \ indicating the funds that are available for transactions such as purchases,\
        \ and the `actualBalance` indicating the funds that are actually on the instrument."
      properties:
        availableBalance:
          description: The funds available for transactions on the instrument. Funds
            that are blocked or pending are not included in the available balance.
          format: int64
        actualBalance:
          description: "The funds that are actually on the instrument. Funds that\
            \ are blocked or pending, due to for example, a purchase authorisation\
            \ or a pending deposit, are included in the actual balance."
          format: int64
    ManagedInstrumentState:
      properties:
        state:
          $ref: '#/components/schemas/InstrumentState'
        blockedReason:
          $ref: '#/components/schemas/BlockedReason'
        destroyedReason:
          $ref: '#/components/schemas/DestroyedReason'
      required:
      - state
    SwiftBankDetails:
      description: Bank details used in case the wire transfer is executed over SWIFT.
      properties:
        iban:
          description: "International Bank Account Number, required for wire transfer\
            \ over SWIFT."
          maxLength: 34
          minLength: 1
          pattern: "^[a-zA-Z0-9]{1,34}$"
        code:
          description: "SWIFT code, identifying a particular bank or branch, required\
            \ for wire transfer over SWIFT."
          maxLength: 11
          minLength: 8
          pattern: "^[a-zA-Z0-9]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[a-zA-Z0-9]{0,3}$"
      required:
      - code
      - iban
    StatementEntryState:
      description: |
        The transaction entry state, as follows:
          - PENDING: The transaction has started and some of the fund movements have completed, however additional fund movements are still pending to finalise the transaction.
          - COMPLETED: All fund movements for a transaction have completed.
      enum:
      - PENDING
      - COMPLETED
    ScaledAmount:
      description: "A floating point number, represented as a value and its scale.\
        \ Its actual value can be obtained using the equation: value * pow(10, -scale)."
      properties:
        value:
          format: int64
        scale:
          format: int32
          maximum: 127
          minimum: -128
    SensitiveCardNumber:
      description: |
        The full card number of the card.

        Unless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card number will be tokenised.

        To show the full unredacted card number to your user, you need to embed the Card number UI Component in your application. This accepts the tokenised card number and shows the unredacted card number to the user on screen.
      properties:
        value:
          maxLength: 16
    SensitiveCvv:
      description: |
        The CVV of the card.

        Unless you are PCI-DSS compliant and have opted to switch off Weavr's security model, the card's CVV will be tokenised.

        To show the card's CVV to your user, you need to embed the CVV UI Component in your application. This accepts the tokenised CVV and shows the plain text CVV number to the user on screen.
      properties:
        value:
          maxLength: 3
    PhysicalCardDetails:
      properties:
        productReference:
          description: The unique reference indicating the configuration of the physical
            card. Example the card design.
        carrierType: {}
        pendingActivation:
          description: Indicates if the physical card is activated for physical usage
            such as with physical terminals.
        pinBlocked:
          description: Indicates if the physical card is blocked due to providing
            incorrect PINs.
        manufacturingState:
          $ref: '#/components/schemas/ManufacturingState'
        replacement:
          $ref: '#/components/schemas/PhysicalCardDetails_replacement'
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddress'
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        deliveryTrackingCode:
          description: The delivery tracking code for tracking the physical card's
            delivery status.
        deliveryTrackingMethod:
          description: The delivery tracking method for tracking the physical card's
            delivery status.
        nameOnCardLine2:
          deprecated: true
          description: "Line 2 of the 'name on card' field. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards. This field is deprecated"
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
      required:
      - pendingActivation
    PrepaidModeCard:
      allOf:
      - $ref: '#/components/schemas/ManagedCard'
      - properties:
          balances:
            $ref: '#/components/schemas/ManagedInstrumentBalance'
    DebitModeCard:
      allOf:
      - $ref: '#/components/schemas/ManagedCard'
      - properties:
          parentManagedAccountId:
            description: "Id of the managed account holding funds which the managed\
              \ card will access, up to a configurable spend limit."
            pattern: "^[0-9]+$"
          availableToSpend:
            description: "The amount of funds from the parent managed account that\
              \ are available to be spent through the card, in a given time interval."
            items:
              $ref: '#/components/schemas/AvailableToSpend'
        required:
        - parentManagedAccountId
    SpendLimit:
      properties:
        value:
          $ref: '#/components/schemas/CurrencyAmount'
        interval:
          $ref: '#/components/schemas/SpendLimitInterval'
      required:
      - interval
      - value
    ProfileLevelSpendRules:
      allOf:
      - $ref: '#/components/schemas/CommonLevelSpendRules'
      - properties:
          authForwardingEnabled:
            description: Indicates if auth forwarding is enabled on profile level
    IdentityLevelSpendRules:
      allOf:
      - $ref: '#/components/schemas/CommonLevelSpendRules'
      - properties:
          minTransactionAmount:
            description: "The minimum transaction amount, in card currency, that is\
              \ allowed. If the transaction amount is less than this value, then the\
              \ transaction will be declined. Omit this, or set to 0 if no maximum\
              \ transaction amount is to be set."
            format: int64
            minimum: 0
          maxTransactionAmount:
            description: "The maximum transaction amount, in card currency, that is\
              \ allowed. If the transaction amount is greater than this value, then\
              \ the transaction will be declined."
            format: int64
            minimum: 0
    OutgoingWireTransferRejectedInfo:
      description: |
        Additional info when the outgoing wire transfer has been rejected, as follows:
          - SYSTEM: The wire transfer was rejected by the system.
          - USER: The wire transfer was rejected by the user.
      enum:
      - SYSTEM
      - USER
    AvailableToSpend:
      properties:
        value:
          $ref: '#/components/schemas/CurrencyAmount'
        interval:
          $ref: '#/components/schemas/SpendLimitInterval'
    CommonLevelSpendRules:
      properties:
        allowedMerchantCategories:
          description: "Whitelist MCC: A list of allowed merchant category codes (MCCs).\
            \ If the MCC does not match, then the transaction will be declined. If\
            \ an MCC is also in the blocked list, the blocked list will take precedence."
          items: {}
          maxItems: 50
        blockedMerchantCategories:
          description: "Blacklist MCC: A list of disallowed merchant category codes\
            \ (MCCs). If the MCC matches, then the transaction will be declined. If\
            \ an MCC is also in the allowed list, the blocked list will take precedence."
          items: {}
          maxItems: 50
        allowedMerchantIds:
          description: "Whitelist Merchant Id: A list of allowed merchant IDs. If\
            \ the Merchant Id does not match, then the transaction will be declined.\
            \ If a Merchant Id is also provided in the blocked list, the blocked list\
            \ will take precedence."
          items: {}
          maxItems: 50
        blockedMerchantIds:
          description: "Blacklist Merchant Id: A list of disallowed merchant IDs.\
            \ If the Merchant Id matches, then the transaction will be declined. If\
            \ a Merchant Id is also in the allowed list, the blocked list will take\
            \ precedence."
          items: {}
          maxItems: 50
        allowedMerchantCountries:
          description: "Whitelist Merchant Country: A list of allowed merchant countries,\
            \ in ISO 3166-1 alpha-2 format. If the Merchant country does not match,\
            \ then the transaction will be declined. If a Merchant Country is also\
            \ provided in the blocked list, the blocked list will take precedence."
          items:
            maxLength: 2
            minLength: 2
            pattern: "^[A-Z]{2}$"
          maxItems: 50
        blockedMerchantCountries:
          description: "Blacklist Merchant Country: A list of disallowed merchant\
            \ countries, in ISO 3166-1 alpha-2 format. If the Merchant country matches,\
            \ then the transaction will be declined. If a Merchant Country is also\
            \ in the allowed list, the blocked list will take precedence."
          items:
            maxLength: 2
            minLength: 2
            pattern: "^[A-Z]{2}$"
          maxItems: 50
        allowContactless:
          description: Indicates if a contactless transaction is allowed on the card.
        allowAtm:
          description: Indicates if an ATM Withdrawal transaction is allowed on the
            card.
        allowECommerce:
          description: Indicates if an online transaction is allowed on the card.
        allowCashback:
          description: Indicates if a cashback transaction at a physical terminal
            is allowed on the card.
        allowCreditAuthorisations:
          description: Indicates if a the card can receive a credit transaction.
    DeliveryTrackingCode:
      description: The delivery tracking code for tracking the physical card's delivery
        status.
    DeliveryTrackingMethod:
      description: The delivery tracking method for tracking the physical card's delivery
        status.
    SpendLimitInterval:
      description: |
        The time period for which the `spendLimit` is valid.
         - DAILY: starting from 00:00:00 UTC of current day to 23:59:59 UTC of current day
         - WEEKLY: 00:00:00 UTC Monday of current week to following Sunday 23:59:59 UTC
         - MONTHLY: 1st of current calendar month to end of current calendar month
         - QUARTERLY: starting from beginning of current quarter where quarters are defined as follows:
          - 1 January 00:00:00 UTC to 31 March 23:59:59 UTC
          - 1 April 00:00:00 UTC to 30 Jun 23:59:59 UTC
          - 1 July 00:00:00 UTC to 30 September 23:59:59 UTC
          - 1 October 00:00:00 UTC to 31 December 23:59:59 UTC

        - YEARLY: 1 January 00:00:00 UTC of current calendar year to 31 December 23:59:59 UTC of current calendar year.
        - ALWAYS: This indicates that the `spendLimit` is the total amount that can be spent through the card throughout the whole lifetime of the card.
      enum:
      - DAILY
      - WEEKLY
      - MONTHLY
      - QUARTERLY
      - YEARLY
      - ALWAYS
    loginWithPassword_request:
      properties:
        email:
          description: E-mail Address of the user
          format: email
        password:
          $ref: '#/components/schemas/SensitivePassword'
      required:
      - email
      - password
    stepupSCAVerify_request:
      properties:
        verificationCode:
          description: A randomly generated one-time use code.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:.[a-zA-Z0-9_-]+)*$"
      required:
      - verificationCode
    passwordCreate_request:
      properties:
        password:
          $ref: '#/components/schemas/SensitivePassword'
      required:
      - password
    passwordUpdate_request:
      properties:
        oldPassword:
          $ref: '#/components/schemas/SensitivePassword'
        newPassword:
          $ref: '#/components/schemas/SensitivePassword'
      required:
      - newPassword
      - oldPassword
    lostPasswordInitiate_request:
      properties:
        email:
          description: E-mail Address of the user
          format: email
      required:
      - email
    lostPasswordResume_request:
      properties:
        nonce:
          description: A randomly generated one-time use code.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:.[a-zA-Z0-9_-]+)*$"
        email:
          description: E-mail Address of the user
          format: email
        newPassword:
          $ref: '#/components/schemas/SensitivePassword'
      required:
      - email
      - newPassword
      - nonce
    requestAccessToken_request:
      properties:
        identity:
          $ref: '#/components/schemas/IdentityId'
      required:
      - identity
    userCreate_request:
      properties:
        name:
          description: The first name of the user.
          maxLength: 20
        surname:
          description: The last name of the user.
          maxLength: 20
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
      required:
      - email
      - name
      - surname
    userUpdate_request:
      properties:
        name:
          description: The first name of the user.
          maxLength: 20
        surname:
          description: The last name of the user.
          maxLength: 20
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
    userInviteValidate_request:
      properties:
        inviteCode:
          description: A randomly generated one-time use code.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:.[a-zA-Z0-9_-]+)*$"
      required:
      - inviteCode
    userInviteConsume_request:
      properties:
        inviteCode:
          description: A randomly generated one-time use code.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_.*@-]*$|^[a-zA-Z0-9.!#$%&*+\\\\/=?^_|~-]+@[a-zA-Z0-9_-]+(?:.[a-zA-Z0-9_-]+)*$"
        password:
          $ref: '#/components/schemas/SensitivePassword'
      required:
      - inviteCode
      - password
    authorisedUserEmailVerificationCodeSend_409_response:
      properties:
        errorCode:
          enum:
          - EMAIL_NOT_FOUND
    authorisedUserEmailVerify_request:
      properties:
        email:
          description: E-mail Address of the user
          format: email
        verificationCode:
          description: A randomly generated one-time use code used to verify the user's
            email address or mobile number.
          maxLength: 6
          minLength: 6
          pattern: "^[0-9]+$"
      required:
      - email
      - verificationCode
    authorisedUserEmailVerify_409_response:
      properties:
        errorCode:
          enum:
          - VERIFICATION_CODE_INVALID
    userKyc_200_response:
      example:
        reference: ""
      properties:
        reference:
          description: The reference required to initialise the KYB UI Component.
          pattern: "^[0-9]+$"
      required:
      - reference
    userKyc_409_response:
      properties:
        errorCode:
          enum:
          - EMAIL_NOT_VERIFIED
          - MOBILE_NOT_VERIFIED
          - KYC_ALREADY_APPROVED
          - KYC_PENDING_REVIEW
          - KYC_REJECTED
          - KYB_IDENTITY_NOT_APPROVED
    corporateCreate_request_rootUser:
      description: |
        The root user needs to be a director or a legal representative of the corporate that is being onboarded - this user cannot be deactivated.

        Root users need to verify their email address and mobile number, as well as complete KYC as part of the Corporate's due diligence process.
      properties:
        name:
          description: The first name of the root user.
          maxLength: 50
        surname:
          description: The last name of the root user.
          maxLength: 50
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        companyPosition:
          $ref: '#/components/schemas/CompanyPosition'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
      required:
      - companyPosition
      - email
      - mobile
      - name
      - surname
    corporateCreate_request_company:
      description: 'The details associated with the company being on-boarded. The
        details provided need to match exactly with the details provided during KYB. '
      properties:
        type:
          $ref: '#/components/schemas/CompanyType'
        businessAddress:
          $ref: '#/components/schemas/Address'
        name:
          description: The registered name of the company.
          maxLength: 100
        registrationNumber:
          description: The registration number of the company.
          maxLength: 20
          minLength: 1
        registrationCountry:
          description: "The country of company registration, in ISO 3166 alpha-2 format."
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
      required:
      - name
      - registrationCountry
      - type
    corporateCreate_request:
      properties:
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        rootUser:
          $ref: '#/components/schemas/corporateCreate_request_rootUser'
        company:
          $ref: '#/components/schemas/corporateCreate_request_company'
        industry:
          $ref: '#/components/schemas/Industry'
        sourceOfFunds:
          $ref: '#/components/schemas/CorporateSourceOfFunds'
        sourceOfFundsOther:
          deprecated: true
          description: Description of source of funds in case `OTHER` was chosen.
        acceptedTerms:
          description: Must be set to *true* to indicate that the corporate root user
            has accepted the terms and conditions.
        ipAddress:
          description: The IP address of the corporate user doing the registration.
          maxLength: 45
          minLength: 5
        baseCurrency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        feeGroup:
          description: "Fee groups allow the possibility to charge different fees\
            \ to users under the same profile. If fee groups are not required, ignore\
            \ this field."
      required:
      - acceptedTerms
      - baseCurrency
      - company
      - ipAddress
      - profileId
      - rootUser
    corporateUpdate_request:
      properties:
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        industry:
          $ref: '#/components/schemas/Industry'
        sourceOfFunds:
          $ref: '#/components/schemas/CorporateSourceOfFunds'
        sourceOfFundsOther:
          deprecated: true
          description: Description of source of funds in case `OTHER` was chosen.
        companyBusinessAddress:
          $ref: '#/components/schemas/Address'
        feeGroup:
          description: The fee group which the Corporate will be bound to. Do not
            specify this if you are not using fee groups.
        baseCurrency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        name:
          description: The first name of the Corporate root user.
          maxLength: 20
          pattern: "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        surname:
          description: The last name of the Corporate root user.
          maxLength: 20
          pattern: "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
        resetMobileCounter: {}
    corporateKybStart_409_response:
      properties:
        errorCode:
          enum:
          - KYB_ALREADY_APPROVED
          - KYB_PERMANENTLY_REJECTED
          - KYB_PENDING_REVIEW
    consumerCreate_request_rootUser:
      description: |
        The root user represents the identity.

        Root users need to verify their email address and mobile number, as well as complete KYC, as part of the Consumer's due diligence process.
      properties:
        name:
          description: The first name of the root user.
        surname:
          description: The last name of the root user.
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
        occupation:
          $ref: '#/components/schemas/Occupation'
        address:
          $ref: '#/components/schemas/AddressWithNoRequiredFields'
        placeOfBirth:
          description: Place of birth of the consumer root user.
        nationality:
          description: Nationality of the user - using ISO 3166 alpha-2.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
      required:
      - dateOfBirth
      - email
      - mobile
      - name
      - surname
    consumerCreate_request:
      properties:
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        rootUser:
          $ref: '#/components/schemas/consumerCreate_request_rootUser'
        ipAddress:
          description: The IP address of the user doing the registration.
          maxLength: 45
          minLength: 5
        acceptedTerms:
          description: Must be set to *true* to indicate that the consumer has accepted
            the terms and conditions.
        baseCurrency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        feeGroup:
          description: "The fee group which the consumer is bound to. Fee groups provide\
            \ the possibility of different fees to users under the same profile. If\
            \ fee groups are not required, ignore this field."
        sourceOfFunds:
          $ref: '#/components/schemas/ConsumerSourceOfFunds'
        sourceOfFundsOther:
          deprecated: true
          description: Description of source of funds in case `OTHER` was chosen.
      required:
      - acceptedTerms
      - ipAddress
      - profileId
      - rootUser
    consumerUpdate_request:
      properties:
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        name:
          description: The first name of the Consumer root user.
          maxLength: 20
          pattern: "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        surname:
          description: The last name of the Consumer root user.
          maxLength: 20
          pattern: "^[^0-9~!@#$%^*()_+={}\\\\|:;,<>/?]*$"
        email:
          description: E-mail Address of the user
          format: email
        mobile:
          $ref: '#/components/schemas/Mobile'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
        address:
          $ref: '#/components/schemas/AddressWithNoRequiredFields'
        feeGroup:
          description: The fee group which the consumer will be bound to. Do not specify
            this if you are not using fee groups.
        baseCurrency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        occupation:
          $ref: '#/components/schemas/Occupation'
        sourceOfFunds:
          $ref: '#/components/schemas/ConsumerSourceOfFunds'
        sourceOfFundsOther:
          deprecated: true
          description: Description of source of funds in case `OTHER` was chosen.
        placeOfBirth:
          description: The place of birth of the consumer root user.
        nationality:
          description: Nationality of the user - using ISO 3166 alpha-2.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
        resetMobileCounter: {}
    consumerKycStart_request:
      properties:
        kycLevel:
          $ref: '#/components/schemas/KycLevel'
    managedAccountCreate_request:
      properties:
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        friendlyName:
          description: The friendly name to be given to the managed account.
          maxLength: 50
          minLength: 1
        currency:
          description: "The currency expressed in ISO-4217 code. Example: GBP, EUR,\
            \ USD."
          maxLength: 3
          minLength: 3
          pattern: "^[A-Z]*$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
      required:
      - currency
      - friendlyName
      - profileId
    managedAccountUpdate_request:
      properties:
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        friendlyName:
          description: Updates the friendly name of the managed account. Leave blank
            if no change is needed.
          maxLength: 50
          minLength: 1
    managedCardUpdate_request:
      properties:
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        friendlyName:
          description: Updates the friendly name of the card. Leave blank if no change
            is needed.
          maxLength: 50
          minLength: 1
        nameOnCard:
          description: |
            The card holder's name for the card.

            This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card.
            The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        nameOnCardLine2:
          description: "Line 2 of the 'name on card' field. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        cardholderMobileNumber:
          description: "The mobile number including country code of the card holder,\
            \ needed in case a 3DS challenge is required."
          maxLength: 20
          minLength: 5
          pattern: "^\\\\+[0-9]+$"
        billingAddress:
          $ref: '#/components/schemas/Address'
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddress'
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        digitalWallets:
          $ref: '#/components/schemas/DigitalWallets'
        authForwardingDefaultTimeoutDecision:
          description: Default decision for auth forwarding on timeout
          enum:
          - APPROVE
          - DECLINE
    managedCardAssign_request:
      properties:
        externalReference:
          description: Unique code identifying a card.
        activationCode:
          description: "The code to be used to activate the physical card. Depending\
            \ on how the cards were created, this may be a code set upon creation,\
            \ or it may be the same as the `externalReference`."
        friendlyName:
          description: The friendly name given to the card.
          maxLength: 50
          minLength: 1
        nameOnCard:
          description: "The card holder’s name for the card. This may be verified\
            \ by merchants when the card is used online. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        nameOnCardLine2:
          description: "Line 2 of the 'name on card' field. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
        billingAddress:
          $ref: '#/components/schemas/Address'
        cardholderMobileNumber:
          description: "The mobile number including country code of the card holder,\
            \ needed for 3DS challenge."
          maxLength: 20
          minLength: 5
          pattern: "^\\\\+[0-9]+$"
        authForwardingDefaultTimeoutDecision:
          description: Default decision for auth forwarding on timeout
          enum:
          - APPROVE
          - DECLINE
      required:
      - activationCode
      - billingAddress
      - externalReference
      - friendlyName
      - nameOnCard
    managedCardPhysicalUpgrade_request:
      properties:
        productReference:
          description: |
            The product design reference to be used for this physical card.

            This reference will be given to you once your physical card programme has been set up. If only one card programme is configured, this field can be left empty.
        carrierType:
          description: |
            The carrier type to be used for this physical card.

            This reference will be given to you once your physical card carrier has been set up. If only one carrier is configured, this field can be left empty.
        deliveryMethod:
          $ref: '#/components/schemas/DeliveryMethod'
        deliveryAddress:
          $ref: '#/components/schemas/DeliveryAddress'
        activationCode:
          description: The unique code to be used to activate the physical card.
          maxLength: 6
          pattern: "^[0-9]+$"
        pin:
          $ref: '#/components/schemas/SensitivePin'
        nameOnCardLine2:
          deprecated: true
          description: "Line 2 of the 'name on card' field. For Physical cards, this\
            \ field will be printed on the card. The maximum characters allowed will\
            \ depend on the design chosen and will be provided to you by Weavr when\
            \ setting up your plastic cards. This field is deprecated."
          maxLength: 27
          pattern: "^[a-zA-Z0-9ßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØŠÙÚÛÜŸÝŽĄĆČĎĘĹĽŁŃŇŐŔŚȘȚŤŰŹŻ\
            äácdæéëeíllnöoøôrštüúuuýž\\\\-^. '-]*$"
      required:
      - activationCode
      - deliveryAddress
    managedCardPhysicalActivate_request:
      properties:
        activationCode:
          description: "The code, set up when upgrading the card, that allows the\
            \ physical card to be activated."
          maxLength: 6
          pattern: "^[0-9]+$"
      required:
      - activationCode
    managedCardPhysicalReplaceDamaged_request:
      properties:
        activationCode:
          description: The code that will be used to activate the physical card replacement.
          maxLength: 6
          pattern: "^[0-9]+$"
      required:
      - activationCode
    managedCardPhysicalReplaceLostOrStolen_request:
      properties:
        activationCode:
          description: A unique code to be used to activate the replacement physical
            card.
          maxLength: 6
          pattern: "^[0-9]+$"
      required:
      - activationCode
    transferCreate_request:
      properties:
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        source:
          $ref: '#/components/schemas/InstrumentId'
        destination:
          $ref: '#/components/schemas/InstrumentId'
        destinationAmount:
          $ref: '#/components/schemas/CurrencyAmount'
      required:
      - destination
      - destinationAmount
      - profileId
      - source
    outgoingWireTransferCreate_request_sourceInstrument:
      description: The managed account from which funds will be collected.
      properties:
        type:
          enum:
          - managed_accounts
        id:
          pattern: "^[0-9]+$"
      required:
      - id
      - type
    outgoingWireTransferCreate_request:
      properties:
        profileId:
          description: |
            The profile Id which a specific identity, instrument or transaction type is linked to.

            Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.

            You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.

            Profile Ids can be found in the Multi Portal, in the API Credentials page.
          pattern: "^[0-9]+$"
        tag:
          description: The tag field is a custom field that can be used to search
            and filter.
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-]+$"
        sourceInstrument:
          $ref: '#/components/schemas/outgoingWireTransferCreate_request_sourceInstrument'
        transferAmount:
          $ref: '#/components/schemas/CurrencyAmount'
        description:
          description: |
            These details are passed to the beneficiary as the `reference` and the allowed length is dependent on the payment type:

            `SEPA` and `SWIFT` <= `35` characters

            `Faster Payments` <= `18` characters
        destinationBeneficiary:
          $ref: '#/components/schemas/OutgoingWireTransferBeneficiary'
      required:
      - destinationBeneficiary
      - profileId
      - sourceInstrument
      - transferAmount
    Corporate_company:
      properties:
        name:
          description: The registered name of the company.
          maxLength: 100
        type:
          $ref: '#/components/schemas/CompanyType'
        registrationNumber:
          description: The company registration number.
          maxLength: 20
          minLength: 1
        registeredAddress:
          $ref: '#/components/schemas/LegalAddress'
        businessAddress:
          $ref: '#/components/schemas/Address'
        countryOfRegistration:
          description: The country of company registration in ISO 3166 alpha-2.
          maxLength: 2
          minLength: 2
          pattern: "^[A-Z]+$"
        incorporatedOn:
          $ref: '#/components/schemas/Date'
      required:
      - countryOfRegistration
      - name
      - type
    OutgoingWireTransfer_sourceInstrument:
      description: The source managed account from where the funds were taken.
      properties:
        type:
          enum:
          - managed_accounts
        id:
          pattern: "^[0-9]+$"
      required:
      - id
      - type
    PhysicalCardDetails_replacement:
      description: Indicates if the physical card is replaced by another card.
      properties:
        replacementReason:
          description: |
            The reason why the physical card was replaced.
              - DAMAGED: The physical card was damaged and cannot be used at a physical terminal.
              - LOST_STOLEN: The physical card was either lost or stolen and cannot be used.
              - EXPIRED: The physical card expired.
          enum:
          - DAMAGED
          - LOST_STOLEN
          - EXPIRED
        replacementId:
          description: The unique identifier of the new card that replaces this card.
          pattern: "^[0-9]+$"
  securitySchemes:
    api_key:
      description: The API Key representing your Multi account. You can find your
        API Key in your Multi Portal in the API Credentials page.
      in: header
      name: api-key
      type: apiKey
    auth_token:
      bearerFormat: JWT
      description: The authentication token representing the user. This will be included
        in the login response object.
      scheme: bearer
      type: http
    webhooks_key:
      description: The Webhooks key can be found in the API Credentials tab in your
        Portal Page.
      in: header
      name: webhooks-key
      type: apiKey
x-tagGroups:
- name: User Authentication
  tags:
  - Access
  - Passwords
  - Additional Factors
- name: Identities
  tags:
  - Corporates
  - Consumers
- name: User Management
  tags:
  - Authorised Users
- name: Instruments
  tags:
  - Managed Accounts
  - Managed Cards
- name: Transactions
  tags:
  - Sends
  - Transfers
  - Outgoing Wire Transfers
