/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ChargeFee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeFee{}

// ChargeFee struct for ChargeFee
type ChargeFee struct {
	// The unique identifier of the transaction.
	TransactionId TransactionId `json:"transactionId"`
	// The profile Id which a specific identity, instrument or transaction type is linked to.
	ProfileId interface{} `json:"profileId"`
	// The fee type as defined in the Multi Portal, and as sent in the request.
	FeeType interface{} `json:"feeType"`
	Source InstrumentId `json:"source"`
	// The object representing a monetary amount in a particular currency.
	AvailableBalanceAdjustment *CurrencyAmount `json:"availableBalanceAdjustment,omitempty"`
	// The transaction entry state.
	State *TransactionState `json:"state,omitempty"`
	CreationTimestamp interface{} `json:"creationTimestamp,omitempty"`
}

// NewChargeFee instantiates a new ChargeFee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeFee(transactionId TransactionId, profileId interface{}, feeType interface{}, source InstrumentId) *ChargeFee {
	this := ChargeFee{}
	this.TransactionId = transactionId
	this.ProfileId = profileId
	this.FeeType = feeType
	this.Source = source
	return &this
}

// NewChargeFeeWithDefaults instantiates a new ChargeFee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeFeeWithDefaults() *ChargeFee {
	this := ChargeFee{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *ChargeFee) GetTransactionId() TransactionId {
	if o == nil {
		var ret TransactionId
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *ChargeFee) GetTransactionIdOk() (*TransactionId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *ChargeFee) SetTransactionId(v TransactionId) {
	o.TransactionId = v
}

// GetProfileId returns the ProfileId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChargeFee) GetProfileId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeFee) GetProfileIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *ChargeFee) SetProfileId(v interface{}) {
	o.ProfileId = v
}

// GetFeeType returns the FeeType field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ChargeFee) GetFeeType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FeeType
}

// GetFeeTypeOk returns a tuple with the FeeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeFee) GetFeeTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FeeType) {
		return nil, false
	}
	return &o.FeeType, true
}

// SetFeeType sets field value
func (o *ChargeFee) SetFeeType(v interface{}) {
	o.FeeType = v
}

// GetSource returns the Source field value
func (o *ChargeFee) GetSource() InstrumentId {
	if o == nil {
		var ret InstrumentId
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ChargeFee) GetSourceOk() (*InstrumentId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ChargeFee) SetSource(v InstrumentId) {
	o.Source = v
}

// GetAvailableBalanceAdjustment returns the AvailableBalanceAdjustment field value if set, zero value otherwise.
func (o *ChargeFee) GetAvailableBalanceAdjustment() CurrencyAmount {
	if o == nil || IsNil(o.AvailableBalanceAdjustment) {
		var ret CurrencyAmount
		return ret
	}
	return *o.AvailableBalanceAdjustment
}

// GetAvailableBalanceAdjustmentOk returns a tuple with the AvailableBalanceAdjustment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeFee) GetAvailableBalanceAdjustmentOk() (*CurrencyAmount, bool) {
	if o == nil || IsNil(o.AvailableBalanceAdjustment) {
		return nil, false
	}
	return o.AvailableBalanceAdjustment, true
}

// HasAvailableBalanceAdjustment returns a boolean if a field has been set.
func (o *ChargeFee) HasAvailableBalanceAdjustment() bool {
	if o != nil && !IsNil(o.AvailableBalanceAdjustment) {
		return true
	}

	return false
}

// SetAvailableBalanceAdjustment gets a reference to the given CurrencyAmount and assigns it to the AvailableBalanceAdjustment field.
func (o *ChargeFee) SetAvailableBalanceAdjustment(v CurrencyAmount) {
	o.AvailableBalanceAdjustment = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ChargeFee) GetState() TransactionState {
	if o == nil || IsNil(o.State) {
		var ret TransactionState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeFee) GetStateOk() (*TransactionState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ChargeFee) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given TransactionState and assigns it to the State field.
func (o *ChargeFee) SetState(v TransactionState) {
	o.State = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeFee) GetCreationTimestamp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeFee) GetCreationTimestampOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return &o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *ChargeFee) HasCreationTimestamp() bool {
	if o != nil && IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given interface{} and assigns it to the CreationTimestamp field.
func (o *ChargeFee) SetCreationTimestamp(v interface{}) {
	o.CreationTimestamp = v
}

func (o ChargeFee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeFee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionId"] = o.TransactionId
	if o.ProfileId != nil {
		toSerialize["profileId"] = o.ProfileId
	}
	if o.FeeType != nil {
		toSerialize["feeType"] = o.FeeType
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.AvailableBalanceAdjustment) {
		toSerialize["availableBalanceAdjustment"] = o.AvailableBalanceAdjustment
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	return toSerialize, nil
}

type NullableChargeFee struct {
	value *ChargeFee
	isSet bool
}

func (v NullableChargeFee) Get() *ChargeFee {
	return v.value
}

func (v *NullableChargeFee) Set(val *ChargeFee) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeFee) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeFee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeFee(val *ChargeFee) *NullableChargeFee {
	return &NullableChargeFee{value: val, isSet: true}
}

func (v NullableChargeFee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeFee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


