/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the OutgoingWireTransferState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutgoingWireTransferState{}

// OutgoingWireTransferState The state of the Outgoing wire transfer transaction, as follows:   - PENDING_CHALLENGE: The wire transfer requires verification before it can be submitted. _Use the `/outgoing_wire_transfers/{id}/challenges/otp/{channel}` API endpoint to start the verification process._   - SUBMITTED: The wire transfer has been initiated over the selected route.   - REJECTED: The wire transfer submitted was rejected.   - APPROVED: The wire transfer submission was approved.   - FAILED: There was an issue with the wire transfer, and the transaction has failed.   - COMPLETED: The requested funds have been sent from the source instrument. 
type OutgoingWireTransferState struct {
}

// NewOutgoingWireTransferState instantiates a new OutgoingWireTransferState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutgoingWireTransferState() *OutgoingWireTransferState {
	this := OutgoingWireTransferState{}
	return &this
}

// NewOutgoingWireTransferStateWithDefaults instantiates a new OutgoingWireTransferState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutgoingWireTransferStateWithDefaults() *OutgoingWireTransferState {
	this := OutgoingWireTransferState{}
	return &this
}

func (o OutgoingWireTransferState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutgoingWireTransferState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableOutgoingWireTransferState struct {
	value *OutgoingWireTransferState
	isSet bool
}

func (v NullableOutgoingWireTransferState) Get() *OutgoingWireTransferState {
	return v.value
}

func (v *NullableOutgoingWireTransferState) Set(val *OutgoingWireTransferState) {
	v.value = val
	v.isSet = true
}

func (v NullableOutgoingWireTransferState) IsSet() bool {
	return v.isSet
}

func (v *NullableOutgoingWireTransferState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutgoingWireTransferState(val *OutgoingWireTransferState) *NullableOutgoingWireTransferState {
	return &NullableOutgoingWireTransferState{value: val, isSet: true}
}

func (v NullableOutgoingWireTransferState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutgoingWireTransferState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


