/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the ManagedCardRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedCardRequest{}

// ManagedCardRequest struct for ManagedCardRequest
type ManagedCardRequest struct {
	// The profile Id which a specific identity, instrument or transaction type is linked to.  Profiles contain configuration and determine behavioral aspects of the newly created transaction, for example, fees that may apply.  You can have one or more profiles linked to your application, and these can be used to drive different behaviors according to your product's needs.  Profile Ids can be found in the Multi Portal, in the API Credentials page. 
	ProfileId interface{} `json:"profileId"`
	// The tag field is a custom field that can be used to search and filter.
	Tag interface{} `json:"tag,omitempty"`
	// The friendly name for the card.
	FriendlyName interface{} `json:"friendlyName"`
	// The card holder's name for the card.  This may be verified by merchants when the card is used online. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards. 
	NameOnCard interface{} `json:"nameOnCard"`
	// Line 2 of the 'name on card' field. For Physical cards, this field will be printed on the card. The maximum characters allowed will depend on the design chosen and will be provided to you by Weavr when setting up your plastic cards.
	NameOnCardLine2 interface{} `json:"nameOnCardLine2,omitempty"`
	// The mobile number including country code of the card holder.  For transactions that require a 3DS challenge, an SMS with a code will be sent on this number, to be entered during an online purchase. 
	CardholderMobileNumber interface{} `json:"cardholderMobileNumber"`
	// The billing address set for the card holder. This may be verified by merchants when the card is used online.
	BillingAddress Address `json:"billingAddress"`
	// The Card Tokenisation details
	DigitalWallets *DigitalWallets `json:"digitalWallets,omitempty"`
	// Default decision for auth forwarding on timeout
	AuthForwardingDefaultTimeoutDecision interface{} `json:"authForwardingDefaultTimeoutDecision,omitempty"`
	// The card can be created in prepaid mode or debit mode.  - A prepaid mode card has its own balance and can have funds transferred to or from it. - A debit mode card does not have its own balance but will be able to spend funds belonging to its parent managed account, subject to a configurable spend limit. 
	Mode interface{} `json:"mode"`
}

// NewManagedCardRequest instantiates a new ManagedCardRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedCardRequest(profileId interface{}, friendlyName interface{}, nameOnCard interface{}, cardholderMobileNumber interface{}, billingAddress Address, mode interface{}) *ManagedCardRequest {
	this := ManagedCardRequest{}
	this.ProfileId = profileId
	this.FriendlyName = friendlyName
	this.NameOnCard = nameOnCard
	this.CardholderMobileNumber = cardholderMobileNumber
	this.BillingAddress = billingAddress
	this.Mode = mode
	return &this
}

// NewManagedCardRequestWithDefaults instantiates a new ManagedCardRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedCardRequestWithDefaults() *ManagedCardRequest {
	this := ManagedCardRequest{}
	return &this
}

// GetProfileId returns the ProfileId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCardRequest) GetProfileId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetProfileIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return &o.ProfileId, true
}

// SetProfileId sets field value
func (o *ManagedCardRequest) SetProfileId(v interface{}) {
	o.ProfileId = v
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCardRequest) GetTag() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetTagOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return &o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ManagedCardRequest) HasTag() bool {
	if o != nil && IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given interface{} and assigns it to the Tag field.
func (o *ManagedCardRequest) SetTag(v interface{}) {
	o.Tag = v
}

// GetFriendlyName returns the FriendlyName field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCardRequest) GetFriendlyName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetFriendlyNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return &o.FriendlyName, true
}

// SetFriendlyName sets field value
func (o *ManagedCardRequest) SetFriendlyName(v interface{}) {
	o.FriendlyName = v
}

// GetNameOnCard returns the NameOnCard field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCardRequest) GetNameOnCard() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.NameOnCard
}

// GetNameOnCardOk returns a tuple with the NameOnCard field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetNameOnCardOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NameOnCard) {
		return nil, false
	}
	return &o.NameOnCard, true
}

// SetNameOnCard sets field value
func (o *ManagedCardRequest) SetNameOnCard(v interface{}) {
	o.NameOnCard = v
}

// GetNameOnCardLine2 returns the NameOnCardLine2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCardRequest) GetNameOnCardLine2() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NameOnCardLine2
}

// GetNameOnCardLine2Ok returns a tuple with the NameOnCardLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetNameOnCardLine2Ok() (*interface{}, bool) {
	if o == nil || IsNil(o.NameOnCardLine2) {
		return nil, false
	}
	return &o.NameOnCardLine2, true
}

// HasNameOnCardLine2 returns a boolean if a field has been set.
func (o *ManagedCardRequest) HasNameOnCardLine2() bool {
	if o != nil && IsNil(o.NameOnCardLine2) {
		return true
	}

	return false
}

// SetNameOnCardLine2 gets a reference to the given interface{} and assigns it to the NameOnCardLine2 field.
func (o *ManagedCardRequest) SetNameOnCardLine2(v interface{}) {
	o.NameOnCardLine2 = v
}

// GetCardholderMobileNumber returns the CardholderMobileNumber field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCardRequest) GetCardholderMobileNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CardholderMobileNumber
}

// GetCardholderMobileNumberOk returns a tuple with the CardholderMobileNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetCardholderMobileNumberOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CardholderMobileNumber) {
		return nil, false
	}
	return &o.CardholderMobileNumber, true
}

// SetCardholderMobileNumber sets field value
func (o *ManagedCardRequest) SetCardholderMobileNumber(v interface{}) {
	o.CardholderMobileNumber = v
}

// GetBillingAddress returns the BillingAddress field value
func (o *ManagedCardRequest) GetBillingAddress() Address {
	if o == nil {
		var ret Address
		return ret
	}

	return o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value
// and a boolean to check if the value has been set.
func (o *ManagedCardRequest) GetBillingAddressOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingAddress, true
}

// SetBillingAddress sets field value
func (o *ManagedCardRequest) SetBillingAddress(v Address) {
	o.BillingAddress = v
}

// GetDigitalWallets returns the DigitalWallets field value if set, zero value otherwise.
func (o *ManagedCardRequest) GetDigitalWallets() DigitalWallets {
	if o == nil || IsNil(o.DigitalWallets) {
		var ret DigitalWallets
		return ret
	}
	return *o.DigitalWallets
}

// GetDigitalWalletsOk returns a tuple with the DigitalWallets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedCardRequest) GetDigitalWalletsOk() (*DigitalWallets, bool) {
	if o == nil || IsNil(o.DigitalWallets) {
		return nil, false
	}
	return o.DigitalWallets, true
}

// HasDigitalWallets returns a boolean if a field has been set.
func (o *ManagedCardRequest) HasDigitalWallets() bool {
	if o != nil && !IsNil(o.DigitalWallets) {
		return true
	}

	return false
}

// SetDigitalWallets gets a reference to the given DigitalWallets and assigns it to the DigitalWallets field.
func (o *ManagedCardRequest) SetDigitalWallets(v DigitalWallets) {
	o.DigitalWallets = &v
}

// GetAuthForwardingDefaultTimeoutDecision returns the AuthForwardingDefaultTimeoutDecision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManagedCardRequest) GetAuthForwardingDefaultTimeoutDecision() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AuthForwardingDefaultTimeoutDecision
}

// GetAuthForwardingDefaultTimeoutDecisionOk returns a tuple with the AuthForwardingDefaultTimeoutDecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetAuthForwardingDefaultTimeoutDecisionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AuthForwardingDefaultTimeoutDecision) {
		return nil, false
	}
	return &o.AuthForwardingDefaultTimeoutDecision, true
}

// HasAuthForwardingDefaultTimeoutDecision returns a boolean if a field has been set.
func (o *ManagedCardRequest) HasAuthForwardingDefaultTimeoutDecision() bool {
	if o != nil && IsNil(o.AuthForwardingDefaultTimeoutDecision) {
		return true
	}

	return false
}

// SetAuthForwardingDefaultTimeoutDecision gets a reference to the given interface{} and assigns it to the AuthForwardingDefaultTimeoutDecision field.
func (o *ManagedCardRequest) SetAuthForwardingDefaultTimeoutDecision(v interface{}) {
	o.AuthForwardingDefaultTimeoutDecision = v
}

// GetMode returns the Mode field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *ManagedCardRequest) GetMode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManagedCardRequest) GetModeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *ManagedCardRequest) SetMode(v interface{}) {
	o.Mode = v
}

func (o ManagedCardRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedCardRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProfileId != nil {
		toSerialize["profileId"] = o.ProfileId
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.FriendlyName != nil {
		toSerialize["friendlyName"] = o.FriendlyName
	}
	if o.NameOnCard != nil {
		toSerialize["nameOnCard"] = o.NameOnCard
	}
	if o.NameOnCardLine2 != nil {
		toSerialize["nameOnCardLine2"] = o.NameOnCardLine2
	}
	if o.CardholderMobileNumber != nil {
		toSerialize["cardholderMobileNumber"] = o.CardholderMobileNumber
	}
	toSerialize["billingAddress"] = o.BillingAddress
	if !IsNil(o.DigitalWallets) {
		toSerialize["digitalWallets"] = o.DigitalWallets
	}
	if o.AuthForwardingDefaultTimeoutDecision != nil {
		toSerialize["authForwardingDefaultTimeoutDecision"] = o.AuthForwardingDefaultTimeoutDecision
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

type NullableManagedCardRequest struct {
	value *ManagedCardRequest
	isSet bool
}

func (v NullableManagedCardRequest) Get() *ManagedCardRequest {
	return v.value
}

func (v *NullableManagedCardRequest) Set(val *ManagedCardRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedCardRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedCardRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedCardRequest(val *ManagedCardRequest) *NullableManagedCardRequest {
	return &NullableManagedCardRequest{value: val, isSet: true}
}

func (v NullableManagedCardRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedCardRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


