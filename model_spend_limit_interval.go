/*
Weavr Multi Product API

Weavr Multi API provides a simple and flexible way to issue cards and accounts to your customers.  By integrating Weavr Multi API in your application you can embed banking capabilities within your app and provide a seamless experience for your customers.  # Authentication Each request to the Multi API must include an `api_key` that represents your account. You can obtain an API Key by registering for a Multi account [here](https://portal.weavr.io).  Almost all endpoints require a secondary authentication token `auth_token` that represents the user for whom the request is being executed. 

API version: 3.32.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package weavr

import (
	"encoding/json"
)

// checks if the SpendLimitInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpendLimitInterval{}

// SpendLimitInterval The time period for which the `spendLimit` is valid.  - DAILY: starting from 00:00:00 UTC of current day to 23:59:59 UTC of current day  - WEEKLY: 00:00:00 UTC Monday of current week to following Sunday 23:59:59 UTC  - MONTHLY: 1st of current calendar month to end of current calendar month  - QUARTERLY: starting from beginning of current quarter where quarters are defined as follows:   - 1 January 00:00:00 UTC to 31 March 23:59:59 UTC   - 1 April 00:00:00 UTC to 30 Jun 23:59:59 UTC   - 1 July 00:00:00 UTC to 30 September 23:59:59 UTC   - 1 October 00:00:00 UTC to 31 December 23:59:59 UTC  - YEARLY: 1 January 00:00:00 UTC of current calendar year to 31 December 23:59:59 UTC of current calendar year. - ALWAYS: This indicates that the `spendLimit` is the total amount that can be spent through the card throughout the whole lifetime of the card. 
type SpendLimitInterval struct {
}

// NewSpendLimitInterval instantiates a new SpendLimitInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpendLimitInterval() *SpendLimitInterval {
	this := SpendLimitInterval{}
	return &this
}

// NewSpendLimitIntervalWithDefaults instantiates a new SpendLimitInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpendLimitIntervalWithDefaults() *SpendLimitInterval {
	this := SpendLimitInterval{}
	return &this
}

func (o SpendLimitInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpendLimitInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

type NullableSpendLimitInterval struct {
	value *SpendLimitInterval
	isSet bool
}

func (v NullableSpendLimitInterval) Get() *SpendLimitInterval {
	return v.value
}

func (v *NullableSpendLimitInterval) Set(val *SpendLimitInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableSpendLimitInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableSpendLimitInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpendLimitInterval(val *SpendLimitInterval) *NullableSpendLimitInterval {
	return &NullableSpendLimitInterval{value: val, isSet: true}
}

func (v NullableSpendLimitInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpendLimitInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


